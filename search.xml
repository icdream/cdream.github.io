<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[设计模式——迭代器模式(遍历王者荣耀和英雄联盟英雄信息)]]></title>
    <url>%2F2018%2F12%2F18%2Fdesignpattern05%2F</url>
    <content type="text"><![CDATA[&#x672C;&#x6587;&#x4E3B;&#x8981;&#x8BB2;&#x8FF0;&#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x904D;&#x5386;&#x4E0D;&#x540C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x738B;&#x8005;&#x8363;&#x8000;&#x548C;&#x82F1;&#x96C4;&#x8054;&#x76DF;&#x82F1;&#x96C4;&#x4F5C;&#x4E3A;&#x4F8B;&#x5B50;&#x5E2E;&#x52A9;&#x5927;&#x5BB6;&#x7406;&#x89E3;&#xFF0C;&#x6700;&#x540E;&#x9644;&#x4E0A;&#x963F;&#x79BB;&#x7F8E;&#x56FE;&#x4E00;&#x5F20;&#xFF01; &#x4E00;&#x3001;&#x6982;&#x8FF0;&#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;(Iterator pattern):&#x63D0;&#x4F9B;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x987A;&#x5E8F;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A;&#x805A;&#x5408;&#x5BF9;&#x8C61;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x800C;&#x53C8;&#x4E0D;&#x7528;&#x66B4;&#x9732;&#x805A;&#x5408;&#x5E95;&#x5C42;&#x7684;&#x5B9E;&#x73B0;&#x3002; &#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#x6BD4;&#x8F83;&#x5E38;&#x89C1;&#x7684;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#xFF0C;&#x5BF9;&#x4E8E;&#x719F;&#x6089;java&#x96C6;&#x5408;&#x7684;&#x6211;&#x4EEC;&#x6765;&#x8BF4;&#xFF0C;&#x4F1A;&#x7ECF;&#x5E38;&#x7528;&#x5230;&#x8FED;&#x4EE3;&#x5668;&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5199;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x904D;&#x5386;&#x96C6;&#x5408;&#xFF0C;&#x53C8;&#x4E0D;&#x60F3;&#x9488;&#x5BF9;&#x4E0D;&#x540C;&#x7684;&#x96C6;&#x5408;&#x5B9E;&#x73B0;&#x4E0D;&#x540C;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FED;&#x4EE3;&#x5668;&#x6765;&#x5B8C;&#x6210;&#x3002; &#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#x4E3B;&#x8981;&#x89E3;&#x51B3;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;1.&#x805A;&#x96C6;&#x5143;&#x7D20;&#x5728;&#x8BBF;&#x95EE;&#x548C;&#x904D;&#x5386;&#x65F6;&#xFF0C;&#x4E0D;&#x5FC5;&#x8981;&#x66B4;&#x9732;&#x5E95;&#x5C42;&#x6570;&#x636E;&#x7ED3;&#x6784;(without exposing its representation)2.&#x5F53;&#x4E3A;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x805A;&#x96C6;&#x5B9A;&#x4E49;&#x904D;&#x5386;&#x64CD;&#x4F5C;&#x65F6;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x6539;&#x53D8;&#x63A5;&#x53E3; &#x4E8C;&#x3001;&#x7ED3;&#x6784;UML&#x56FE;: &#x4E3B;&#x8981;&#x89D2;&#x8272;&#xFF1A; &#x805A;&#x5408;&#x7684;&#x63A5;&#x53E3;(Aggregate)&#xFF1A;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5171;&#x540C;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x7ED9;&#x6240;&#x6709;&#x7684;&#x805A;&#x5408;&#x4F7F;&#x7528;&#xFF0C;&#x5C06;&#x5BA2;&#x6237;&#x4EE3;&#x7801;&#x4ECE;&#x805A;&#x5408;&#x7684;&#x5B9E;&#x73B0;&#x4E2D;&#x89E3;&#x8026;&#x3002; &#x805A;&#x5408;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;(ConcreateAggregate)&#xFF1A;&#x8FD9;&#x4E2A;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x4F1A;&#x6301;&#x6709;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x5E76;&#x5B9E;&#x73B0;createIterator()&#x65B9;&#x6CD5;&#xFF0C;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x96C6;&#x5408;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x3002; &#x8FED;&#x4EE3;&#x5668;&#x63A5;&#x53E3;(Iterator)&#xFF1A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x63A5;&#x53E3;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x4E00;&#x4E9B;&#x65B9;&#x6CD5;&#xFF0C;&#x5229;&#x7528;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x5728;&#x96C6;&#x5408;&#x5143;&#x7D20;&#x4E4B;&#x95F4;&#x6E38;&#x8D70;&#x3002;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;java&#x81EA;&#x5E26;&#x7684;java.util.Iterator&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x6765;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;Iterator&#x3002; &#x8FED;&#x4EE3;&#x5668;&#x5177;&#x4F53;&#x5B9E;&#x73B0;(ConcreteIterator)&#xFF1A;&#x7531;&#x5177;&#x4F53;&#x805A;&#x5408;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5DE5;&#x5382;&#x65B9;&#x6CD5;&#x6765;&#x5B9E;&#x73B0;&#x5177;&#x4F53;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x8FD9;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x8D1F;&#x8D23;&#x7BA1;&#x7406;&#x76EE;&#x524D;&#x904D;&#x5386;&#x7684;&#x4F4D;&#x7F6E;&#x3002; &#x4E09;&#x3001;&#x8F93;&#x51FA;&#x6240;&#x6709;&#x738B;&#x8005;&#x8363;&#x8000;&#x548C;&#x82F1;&#x96C4;&#x8054;&#x76DF;&#x7684;&#x82F1;&#x96C4;&#x4FE1;&#x606F;&#x6E90;&#x4EE3;&#x7801;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x6709;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x9700;&#x6C42;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x5C0F;&#x52A9;&#x624B;&#xFF0C;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x5411;&#x7528;&#x6237;&#x5C55;&#x793A;&#x738B;&#x8005;&#x8363;&#x8000;&#x548C;&#x82F1;&#x96C4;&#x8054;&#x76DF;&#x4E2D;&#x7684;&#x82F1;&#x96C4;&#x4FE1;&#x606F;&#xFF0C;&#x4F46;&#x662F;&#x4E24;&#x6B3E;&#x6E38;&#x620F;&#x7EF4;&#x62A4;&#x82F1;&#x96C4;&#x4F7F;&#x7528;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E0D;&#x540C;&#xFF0C;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x7528;&#x8FED;&#x4EE3;&#x5668;&#x6765;&#x5B8C;&#x6210;&#x8FD9;&#x4E2A;&#x529F;&#x80FD; &#x5B9A;&#x4E49;&#x82F1;&#x96C4;&#x7684;&#x5B9E;&#x4F53;&#x7C7B;&#xFF0C;&#x5305;&#x62EC;&#x59D3;&#x540D;&#x3001;&#x6027;&#x522B;&#x3001;&#x63CF;&#x8FF0; 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class Hero { private String name; private String sex; private String desc; public Hero(String name, String sex, String desc) { this.name = name; this.sex = sex; this.desc = desc; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } public String getDesc() { return desc; } public void setDesc(String desc) { this.desc = desc; } @Override public String toString() { return &quot;Hero{&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, sex=&apos;&quot; + sex + &apos;\&apos;&apos; + &quot;, desc=&apos;&quot; + desc + &apos;\&apos;&apos; + &apos;}&apos;; }} &#x521B;&#x5EFA;&#x738B;&#x8005;&#x8363;&#x8000;&#x82F1;&#x96C4;&#x7C7B; 1234567891011121314151617181920212223242526272829303132public class HOKHeros { static final int MAX_HERO_COUNT = 10; int heroCount = 0; private Hero[] hokHeros = new Hero[MAX_HERO_COUNT]; public HOKHeros() { Hero gsl = new Hero(&quot;&#x516C;&#x5B59;&#x79BB;&quot;, &quot;&#x59B9;&#x5B50;&quot;, &quot;&#x6211;&#x89C9;&#x5F97;&#x963F;&#x79BB;&#x662F;&#x6700;&#x6F02;&#x4EAE;&#x7684;&#x5973;&#x82F1;&#x96C4;~&quot;); Hero lbqh = new Hero(&quot;&#x9C81;&#x73ED;&#x4E03;&#x53F7;&quot;, &quot;&#x7537;&quot;, &quot;&#x667A;&#x5546;250&quot;); Hero wzt = new Hero(&quot;&#x6B66;&#x5219;&#x5929;&quot;, &quot;&#x5973;&quot;, &quot;&#x8D3C;&#x8D35;&quot;); hokHeros[0] = gsl; hokHeros[1] = lbqh; hokHeros[2] = wzt; this.heroCount = 3; } public Hero[] getHokHeros() { return hokHeros; } public void addHero(Hero hero) { if (heroCount &gt;= MAX_HERO_COUNT) { System.out.println(&quot;&#x5DF2;&#x7ECF;&#x4E0D;&#x80FD;&#x653E;&#x66F4;&#x591A;&#x82F1;&#x96C4;&#x4E86;&#xFF01;&quot;); } else { hokHeros[this.heroCount] = hero; this.heroCount += 1; } } public Iterator&lt;Hero&gt; createIterator(){ return new HOKHerosIterator(hokHeros); }} &#x6570;&#x7EC4;&#x6CA1;&#x6709;&#x7EE7;&#x627F;&#x8FED;&#x4EE3;&#x5668;&#x63A5;&#x53E3;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#xFF01; 12345678910111213141516171819202122232425public class HOKHerosIterator implements Iterator&lt;Hero&gt; { private int position = 0; private Hero[] heroes; public HOKHerosIterator(Hero[] heroes) { this.heroes = heroes; } @Override public boolean hasNext() { if (heroes.length &lt;= position || heroes[position] == null) { return false; } return true; } @Override public Hero next() { Hero hero = heroes[position]; position += 1; return hero; }} &#x521B;&#x5EFA;&#x82F1;&#x96C4;&#x8054;&#x76DF;&#x82F1;&#x96C4;&#x7C7B; 1234567891011121314151617181920212223public class LOLHeros { private ArrayList&lt;Hero&gt; heroes; public LOLHeros() { heroes = new ArrayList&lt;&gt;(); Hero gl = new Hero(&quot;&#x76D6;&#x4F26;&quot;, &quot;&#x7537;&quot;, &quot;&#x521D;&#x59CB;&#x82F1;&#x96C4;&quot;); Hero rw = new Hero(&quot;&#x9510;&#x96EF;&quot;, &quot;&#x5973;&quot;, &quot;&#x8D3C;&#x79C0;&quot;); Hero ys = new Hero(&quot;&#x4E9A;&#x7D22;&quot;, &quot;&#x7537;&quot;, &quot;&#x5F88;&#x5389;&#x5BB3;&#x7684;&#x6837;&#x5B50;&quot;); heroes.add(gl); heroes.add(rw); heroes.add(ys); } public ArrayList&lt;Hero&gt; getHeroes() { return heroes; } public void addHere(Hero hero){ heroes.add(hero); } public Iterator&lt;Hero&gt; createIterator(){ return heroes.iterator(); }} &#x5C0F;&#x52A9;&#x624B; 1234567891011121314151617181920public class HeroHelper { private Iterator iterator; public HeroHelper(Iterator iterator) { this.iterator = iterator; } public HeroHelper() { } public void showHeros() { while (iterator.hasNext()) { System.out.println(iterator.next()); } } public void setIterator(Iterator iterator) { this.iterator = iterator; }} &#x6D4B;&#x8BD5;&#x7C7B; 123456789101112131415161718192021public class Test { public static void main(String[] args) { HOKHeros hokHeros = new HOKHeros(); LOLHeros lolHeros = new LOLHeros(); HeroHelper heroHelper = new HeroHelper(); heroHelper.setIterator(hokHeros.createIterator()); System.out.println(&quot;------&quot;); heroHelper.showHeros(); heroHelper.setIterator(lolHeros.createIterator()); heroHelper.showHeros();}&#x7ED3;&#x679C;Hero{name=&apos;&#x516C;&#x5B59;&#x79BB;&apos;, sex=&apos;&#x59B9;&#x5B50;&apos;, desc=&apos;&#x6211;&#x89C9;&#x5F97;&#x963F;&#x79BB;&#x662F;&#x6700;&#x6F02;&#x4EAE;&#x7684;&#x5973;&#x82F1;&#x96C4;~&apos;}Hero{name=&apos;&#x9C81;&#x73ED;&#x4E03;&#x53F7;&apos;, sex=&apos;&#x7537;&apos;, desc=&apos;&#x667A;&#x5546;250&apos;}Hero{name=&apos;&#x6B66;&#x5219;&#x5929;&apos;, sex=&apos;&#x5973;&apos;, desc=&apos;&#x8D3C;&#x8D35;&apos;}------Hero{name=&apos;&#x76D6;&#x4F26;&apos;, sex=&apos;&#x7537;&apos;, desc=&apos;&#x521D;&#x59CB;&#x82F1;&#x96C4;&apos;}Hero{name=&apos;&#x9510;&#x96EF;&apos;, sex=&apos;&#x5973;&apos;, desc=&apos;&#x8D3C;&#x79C0;&apos;}Hero{name=&apos;&#x4E9A;&#x7D22;&apos;, sex=&apos;&#x7537;&apos;, desc=&apos;&#x5F88;&#x5389;&#x5BB3;&#x7684;&#x6837;&#x5B50;&apos;} &#x4ECE;&#x4E0A;&#x9762;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x8FED;&#x4EE3;&#x5668;&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x6838;&#x5FC3;&#x65B9;&#x6CD5;hashNext(),next(),&#x5728;java&#x4E2D;&#x8FD8;&#x63D0;&#x4F9B;&#x4E86;remove()&#x65B9;&#x6CD5;&#xFF0C;&#x6839;&#x636E;&#x9700;&#x8981;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x5B9E;&#x73B0;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x4F8B;&#x5982;&#x4E0A;&#x6587;&#x4E2D;&#xFF0C;&#x738B;&#x8005;&#x8363;&#x8000;&#x662F;&#x7528;&#x6570;&#x7EC4;&#x6765;&#x50A8;&#x5B58;&#x82F1;&#x96C4;&#xFF0C;&#x6211;&#x4EEC;&#x624B;&#x52A8;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x3002; &#x5C0F;&#x52A9;&#x624B;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x6E05;&#x695A;&#x6BCF;&#x6B3E;&#x6E38;&#x620F;&#x5728;&#x5E95;&#x5C42;&#x662F;&#x5982;&#x4F55;&#x50A8;&#x5B58;&#x82F1;&#x96C4;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x8981;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x5C0F;&#x52A9;&#x624B;&#x5C31;&#x53EF;&#x4EE5;&#x5E2E;&#x6211;&#x4EEC;&#x904D;&#x5386;&#x82F1;&#x96C4;&#x5217;&#x8868;&#x3002; &#x60F3;&#x8C61;&#x5982;&#x679C;&#x4E24;&#x6B3E;&#x6E38;&#x620F;&#x6CA1;&#x6709;&#x5B9E;&#x73B0;&#x8FED;&#x4EE3;&#x5668;&#x63A5;&#x53E3;&#xFF0C;&#x662F;&#x4E0D;&#x662F;&#x5C31;&#x5F97;&#x5728;&#x5C0F;&#x52A9;&#x624B;&#x91CC;&#x81EA;&#x5DF1;&#x624B;&#x5199;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;for&#x5FAA;&#x73AF;&#xFF1F; &#x5982;&#x679C;&#x65B0;&#x52A0;&#x5165;&#x4E86;doto&#x7684;&#x82F1;&#x96C4;&#x5217;&#x8868;&#xFF0C;&#x5B83;&#x662F;&#x7528;Hashtable&#x6765;&#x7EF4;&#x62A4;&#x82F1;&#x96C4;&#x5217;&#x8868;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x5C31;&#x53EF;&#x4EE5;&#x8BA9;&#x5B83;&#x63D0;&#x4F9B;createItorator&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x4F46;&#x82E5;&#x4E0D;&#x4F7F;&#x7528;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x662F;&#x4E0D;&#x662F;&#x5C31;&#x9700;&#x8981;&#x5BF9;&#x5C0F;&#x52A9;&#x624B;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF1F; java&#x4E2D;&#x7684;&#x96C6;&#x5408;java&#x7684;&#x96C6;&#x5408;&#x5E76;&#x672A;&#x5C06;&#x8FED;&#x4EE3;&#x5668;&#x5355;&#x72EC;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x800C;&#x662F;&#x5C06;&#x8FED;&#x4EE3;&#x5668;&#x4F5C;&#x4E3A;&#x96C6;&#x5408;&#x7684;&#x5185;&#x90E8;&#x7C7B;&#xFF0C;&#x8FD9;&#x6837;&#x8FED;&#x4EE3;&#x5668;&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x64CD;&#x4F5C;&#x96C6;&#x5408;&#x5185;&#x5143;&#x7D20;&#xFF0C;&#x5373;&#x4FDD;&#x8BC1;&#x4E86;&#x805A;&#x5408;&#x5BF9;&#x8C61;&#x7684;&#x5C01;&#x88C5;&#x53C8;&#x80FD;&#x5B9E;&#x73B0;&#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public classArrayList&lt;E&gt; extends AbstractList&lt;E&gt;implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable{ private class Itr implements Iterator&lt;E&gt; { int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; Itr() {} public boolean hasNext() { return cursor != size; } @SuppressWarnings(&quot;unchecked&quot;) public E next() { checkForComodification(); int i = cursor; if (i &gt;= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i]; } public void remove() { if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try { ArrayList.this.remove(lastRet); cursor = lastRet; lastRet = -1; expectedModCount = modCount; } catch (IndexOutOfBoundsException ex) { throw new ConcurrentModificationException(); } } @Override @SuppressWarnings(&quot;unchecked&quot;) public void forEachRemaining(Consumer&lt;? super E&gt; consumer) { Objects.requireNonNull(consumer); final int size = ArrayList.this.size; int i = cursor; if (i &gt;= size) { return; } final Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) { throw new ConcurrentModificationException(); } while (i != size &amp;&amp; modCount == expectedModCount) { consumer.accept((E) elementData[i++]); } // update once at end of iteration to reduce heap write traffic cursor = i; lastRet = i - 1; checkForComodification(); } final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException(); } }} &#x50CF;&#x8FD9;&#x4E2A;ArrayList&#xFF0C;&#x5185;&#x90E8;&#x4E3B;&#x5E72;&#x662F;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x4F46;&#x662F;&#x522B;&#x4E3A;&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x83B7;&#x53D6;&#x8BE5;&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E0D;&#x8FC7;&#x5229;&#x7528;&#x5185;&#x90E8;&#x7C7B;&#x4F9D;&#x7136;&#x5B9E;&#x73B0;&#x4E86;&#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#x3002; &#x5982;&#x679C;&#x8BFB;&#x8FC7;ArrayList&#x6E90;&#x7801;&#xFF0C;&#x4F1A;&#x6CE8;&#x610F;modCount&#x8FD9;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x7528;&#x6765;&#x8BB0;&#x5F55;ArrayList&#x88AB;&#x4FEE;&#x6539;&#x6B21;&#x6570;(add,remove,set&#x8FD9;&#x7C7B;&#x65B9;&#x6CD5;&#x90FD;&#x4F1A;&#x7ED9;modCount&#x52A0;1)&#xFF0C;&#x5728;&#x8FED;&#x4EE3;&#x5668;&#x4E2D;checkForComodification()&#xFF0C;&#x7528;&#x6765;&#x5B9E;&#x73B0;fail-fast&#x673A;&#x5236;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5728;&#x4F7F;&#x7528;&#x8FED;&#x4EE3;&#x5668;&#x904D;&#x5386;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x53E6;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5BF9;&#x96C6;&#x5408;&#x8FDB;&#x884C;&#x4E86;&#x4FEE;&#x6539;&#xFF0C;&#x5C31;&#x4F1A;&#x629B;&#x51FA;&#x5F02;&#x5E38;&#x3002; &#x56DB;&#x3001;&#x4F18;&#x7F3A;&#x70B9;&#x4F18;&#x70B9;&#xFF1A; &#x5BA2;&#x6237;&#x7AEF;&#x4E0D;&#x9700;&#x8981;&#x8981;&#x4E86;&#x89E3;&#x5177;&#x4F53;&#x5E95;&#x5C42;&#x5B9E;&#x73B0;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FED;&#x4EE3;&#x5668;&#x8FDB;&#x884C;&#x904D;&#x5386; &#x7B26;&#x5408;&#x5F00;&#x95ED;&#x539F;&#x5219;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x65B0;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x805A;&#x5408;&#x65F6;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x5BF9;&#x5BA2;&#x6237;&#x7AEF;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4F7F;&#x805A;&#x5408;&#x5B9E;&#x73B0;&#x8FED;&#x4EE3;&#x5668;&#x63A5;&#x53E3;&#x5C31;&#x53EF;&#x4EE5; &#x5C01;&#x88C5;&#x826F;&#x597D;&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x53EA;&#x9700;&#x8981;&#x8FED;&#x4EE3;&#x5668;&#x5C31;&#x53EF;&#x4EE5;&#x904D;&#x5386;&#xFF0C;&#x800C;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x5177;&#x4F53;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x7B97;&#x6CD5; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x4E8E;&#x7B80;&#x5355;&#x7684;&#x904D;&#x5386;&#xFF0C;&#x5B9E;&#x73B0;&#x8FED;&#x4EE3;&#x5668;&#x8F83;&#x4E3A;&#x7E41;&#x7410;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x80FD;&#x66F4;&#x559C;&#x6B22;&#x7528;for&#x6765;&#x8FDB;&#x884C;&#x904D;&#x5386;&#x3002; &#x4E94;&#x3001;&#x603B;&#x7ED3;&#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#x5728;&#x5E73;&#x65F6;&#x904D;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x5E76;&#x4E0D;&#x9AD8;&#xFF0C;&#x4F46;&#x662F;&#x4E86;&#x89E3;&#x8FED;&#x4EE3;&#x5668;&#x5374;&#x80FD;&#x52A0;&#x6DF1;&#x6211;&#x4EEC;&#x5BF9;&#x96C6;&#x5408;&#x7684;&#x4E86;&#x89E3;&#x3002;&#x5728;java&#x7C7B;&#x4E2D;&#xFF0C;&#x9664;&#x4E86;Iterator&#x5916;&#xFF0C;Iterable&#x3001;ListIterator&#x4E5F;&#x503C;&#x5F97;&#x6211;&#x4EEC;&#x53BB;&#x4E86;&#x89E3;~&#x6709;&#x5174;&#x8DA3;&#x7684;&#x540C;&#x5B66;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x9605;&#x8BFB;&#x3002; &#x638C;&#x63E1;&#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#x8981;&#x628A;&#x63E1;&#x4F4F;&#x5728;&#x4E0D;&#x4E86;&#x89E3;&#x805A;&#x5408;&#x5E95;&#x5C42;&#x5B9E;&#x73B0;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x8FDB;&#x884C;&#x904D;&#x5386;&#x8FD9;&#x4E2A;&#x6838;&#x5FC3;&#x5373;&#x53EF;&#xFF0C;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x63D0;&#x4F9B;&#x8FD9;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x8FED;&#x4EE3;&#x5668;&#x6A21;&#x5F0F;&#x4E0E;&#x5DE5;&#x5382;&#x6A21;&#x5F0F;&#x7ED3;&#x5408;&#x53EF;&#x4EE5;&#x53D1;&#x6325;&#x5DE8;&#x5927;&#x7684;&#x5A01;&#x529B;&#xFF01; &#x5E0C;&#x671B;&#x672C;&#x6587;&#x5BF9;&#x60F3;&#x8981;&#x5B66;&#x4E60;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x6709;&#x6240;&#x5E2E;&#x52A9;&#xFF0C;&#x6700;&#x540E;&#x9644;&#x79BB;&#x59B9;&#x7F8E;&#x56FE;&#x4E00;&#x5F20;&#xFF01; &#x672C;&#x6587;&#x9996;&#x53D1;&#x4E8E;cdream&#x4E2A;&#x4EBA;&#x535A;&#x5BA2; &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#xFF01; &#x672C;&#x6587;&#x53C2;&#x8003;&#xFF1A; Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;,Eric Freeman &amp;Elisabeth Freeman with Kathy Sierra &amp; Bert Bates Iterator pattern&#xFF0C;wiki &#x300A;JAVA&#x4E0E;&#x6A21;&#x5F0F;&#x300B;&#x4E4B;&#x8FED;&#x4EE3;&#x5B50;&#x6A21;&#x5F0F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式——模板方法模式（使用模板写作文）]]></title>
    <url>%2F2018%2F12%2F17%2Fdesignpattern04%2F</url>
    <content type="text"><![CDATA[&#x672C;&#x6587;&#x7B80;&#x5355;&#x8BB2;&#x8FF0;&#x4E86;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;&#xFF0C;&#x4F8B;&#x5B50;&#x4E3A;&#x5982;&#x4F55;&#x4F7F;&#x4F5C;&#x6587;&#x6A21;&#x677F;&#x6765;&#x5199;&#x4F5C;&#x6587;&#x3002;&#x5982;&#x679C;&#x60F3;&#x8FDB;&#x4E00;&#x6B65;&#xFF0C;&#x4E86;&#x89E3;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#xFF0C;&#x5EFA;&#x8BAE;&#x8BFB;&#x5B8C;&#x540E;&#x9605;&#x8BFB;&#x4E00;&#x4E0B;spring&#x4E2D;AbstractApplicationContext&#x7C7B;&#x7684;refresh&#x65B9;&#x6CD5;&#x6216;HttpServelt&#x7C7B;&#x4E2D;&#x7684;service&#x65B9;&#x6CD5;&#x3002; &#x4E00;&#x3001;&#x6982;&#x5FF5;&#x5B9A;&#x4E49;:&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;(Template method pattern)&#x662F;&#x4E00;&#x79CD;&#x7C7B;&#x7684;&#x884C;&#x4E3A;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x3002;&#x8BE5;&#x6A21;&#x5F0F;&#x4F1A;&#x5728;&#x7236;&#x7C7B;&#x7684;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x4E2D;&#x5B9A;&#x4E49;&#x7B97;&#x6CD5;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x63A8;&#x8FDF;&#x5230;&#x5B50;&#x7C7B;&#x4E2D;&#x5B8C;&#x6210;&#x3002;&#x53EF;&#x4EE5;&#x8BA9;&#x5B50;&#x7C7B;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#x67D0;&#x4E9B;&#x65B9;&#x6CD5;&#x7684;&#x5B9E;&#x73B0;&#x800C;&#x4E0D;&#x6539;&#x53D8;&#x539F;&#x6765;&#x7684;&#x7B97;&#x6CD5;&#x7ED3;&#x6784;&#x3002; &#x5F53;&#x7136;&#xFF0C;&#x7236;&#x7C7B;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x8BE5;&#x7B97;&#x6CD5;&#x7ED3;&#x6784;&#x7684;&#x67D0;&#x4E9B;&#x65B9;&#x6CD5;&#xFF0C;&#x5C06;&#x5269;&#x4F59;&#x903B;&#x8F91;&#x4EA4;&#x7ED9;&#x5B50;&#x7C7B;&#x5B9E;&#x73B0;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x7C7B;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5B9E;&#x73B0;&#x3002; &#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;&#x662F;&#x6700;&#x5E38;&#x88AB;&#x4F7F;&#x7528;&#x7684;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x4E4B;&#x4E00;&#xFF0C;&#x5728;Servlet&#x91CC;&#xFF0C;&#x8BB0;&#x4E0D;&#x8BB0;&#x7684;&#x6211;&#x4EEC;&#x8981;&#x7EE7;&#x627F;&#x4E00;&#x4E2A;HttpServlet&#x7C7B;&#xFF0C;&#x7136;&#x540E;&#x9700;&#x8981;&#x91CD;&#x5199;doPost()&#x548C;doGet()&#x65B9;&#x6CD5;&#x3002;&#x8FD8;&#x6709;&#x90A3;&#x4E2A;Spring&#x7684;IoC&#x5BB9;&#x5668;&#x7684;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#x4E2D;refresh()&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x91CC;&#x9762;obtainFreshBeanFactory()&#x662F;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#xFF0C;postProcessBeanFactory()&#x548C;onRefresh()&#x662F;&#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#x3002; &#x4E8C;&#x3001;&#x7ED3;&#x6784;UML&#x56FE;: &#x4E3B;&#x8981;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#xFF1A; &#x62BD;&#x8C61;&#x6A21;&#x677F;&#x7C7B;&#xFF08;Template&#xFF09;&#xFF1A;&#x4F1A;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#xFF0C;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x5F80;&#x5F80;&#x662F;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x65B9;&#x6CD5;&#xFF0C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x7684;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x987A;&#x5E8F;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#x4F1A;&#x63A8;&#x8FDF;&#x5230;&#x5B50;&#x7C7B;&#x4E2D;&#x5B9E;&#x73B0;&#x3002; Template:&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#xFF0C;&#x4F1A;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x903B;&#x8F91;&#x9AA8;&#x67B6; method01:&#x5177;&#x4F53;&#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x4E2D;&#x5C31;&#x7ED9;&#x51FA;&#x4E86;&#x5B9E;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x60F3;&#x8BA9;&#x5B50;&#x7C7B;&#x4FEE;&#x6539;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED9;&#x65B9;&#x6CD5;&#x52A0;&#x4E0A;final method02:&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#xFF0C;&#x63A8;&#x8FDF;&#x5230;&#x5B50;&#x7C7B;&#x4E2D;&#x5B9E;&#x73B0;&#xFF0C;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x7C7B;&#x4E2D;&#x53EF;&#x4EE5;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5B9E;&#x73B0; hook:&#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#xFF0C;&#x62BD;&#x8C61;&#x7C7B;&#x7ED9;&#x51FA;&#x4E86;&#x9ED8;&#x8BA4;&#x5B9E;&#x73B0;&#xFF0C;&#x5B50;&#x7C7B;&#x4E5F;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x9700;&#x8981;&#x5BF9;&#x8BE5;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x91CD;&#x5199; &#x62BD;&#x8C61;&#x7C7B;&#x5B9E;&#x73B0;&#xFF08;SubClass&#xFF09;:&#x6A21;&#x677F;&#x7C7B;&#x4E2D;&#x7684;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#x4F1A;&#x5728;&#x5B50;&#x7C7B;&#x4E2D;&#x5B9E;&#x73B0;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x7C7B;&#x4E2D;&#x7B97;&#x6CD5;&#x4F1A;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x5176;&#x4E2D;SubClass2&#x9009;&#x62E9;&#x4E86;&#x91CD;&#x5199;hook&#x65B9;&#x6CD5;&#xFF0C;&#x800C;SubClass1&#x9009;&#x62E9;&#x4E86;&#x62BD;&#x8C61;&#x7C7B;&#x4E2D;&#x9ED8;&#x8BA4;&#x5B9E;&#x73B0;&#x3002; &#x4E09;&#x3001;&#x8C01;&#x53C8;&#x6CA1;&#x80CC;&#x8FC7;&#x51E0;&#x7BC7;&#x4F5C;&#x6587;&#x6A21;&#x677F;&#x5462;&#xFF1F;&#x90FD;&#x662F;&#x5E94;&#x8BD5;&#x6559;&#x80B2;&#x8FC7;&#x6765;&#x7684;&#x4EBA;&#xFF0C;&#x60F3;&#x5FC5;&#x5927;&#x5BB6;&#x90FD;&#x80CC;&#x8FC7;&#x51E0;&#x4E2A;&#x4F5C;&#x6587;&#x6A21;&#x677F;&#x5427;~&#x54C8;&#x54C8;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x7528;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;&#x505A;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4F5C;&#x6587;&#x6A21;&#x677F;&#xFF01; &#x8FD9;&#x662F;&#x4E2A;&#x4F5C;&#x6587;&#x6A21;&#x677F;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;&#x91CC;&#x9762;&#x7684;&#x62BD;&#x8C61;&#x7C7B;&#xFF0C;start&#x548C;end&#x90FD;&#x662F;&#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#xFF0C;content&#x662F;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#xFF0C;&#x9700;&#x8981;&#x63A8;&#x8FDF;&#x5230;&#x5B50;&#x7C7B;&#x4E2D;&#x5B9E;&#x73B0; 123456789101112131415public abstract class CompositionTemplate { public void template(){ start(); content(); end(); } public void start(){ System.out.println(&quot;As far as I am concerned,&quot;); } public void end(){ System.out.println(&quot;In a word,&quot;); } public abstract void content();} &#x4E00;&#x7BC7;&#x5173;&#x4E8E;&#x4FDD;&#x62A4;&#x73AF;&#x5883;&#x7684;&#x6587;&#x7AE0; 123456public class Composition1 extends CompositionTemplate { @Override public void content() { System.out.println(&quot;&#x674E;&#x534E;&#x8BA4;&#x4E3A;&#x4FDD;&#x62A4;&#x73AF;&#x5883;&#x5F88;&#x91CD;&#x8981;&#xFF01;&quot;); }} &#x4E00;&#x7BC7;&#x5173;&#x4E8E;&#x7ECF;&#x6D4E;&#x7684;&#x6587;&#x7AE0; 123456public class Composition2 extends CompositionTemplate { @Override public void content() { System.out.println(&quot;&#x5C0F;&#x767D;&#x8BA4;&#x4E3A;&#x7ECF;&#x6D4E;&#x53D1;&#x5C55;&#x66F4;&#x91CD;&#x8981;&#xFF01;&quot;); }} &#x641E;&#x8D77;&#x6765;~ 1234567891011121314151617181920public class Test { public static void main(String[] args) { CompositionTemplate composition1 = new Composition1(); CompositionTemplate composition2 = new Composition2(); composition1.template(); System.out.println(&quot;--------------&quot;); composition2.template(); }}------&gt; As far as I am concerned,&#x674E;&#x534E;&#x8BA4;&#x4E3A;&#x4FDD;&#x62A4;&#x73AF;&#x5883;&#x5F88;&#x91CD;&#x8981;&#xFF01;In a word,--------------As far as I am concerned,&#x5C0F;&#x767D;&#x8BA4;&#x4E3A;&#x7ECF;&#x6D4E;&#x53D1;&#x5C55;&#x66F4;&#x91CD;&#x8981;&#xFF01;In a word, &#x770B;&#x6709;&#x4E86;&#x6A21;&#x677F;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x6587;&#x7AE0;&#x91CC;&#x5C06;&#x4E2D;&#x95F4;&#x7684;content&#x90E8;&#x5206;&#x91CD;&#x5199;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x540C;&#x5B66;&#x59FF;&#x52BF;&#x6C34;&#x5E73;&#x6BD4;&#x8F83;&#x9AD8;&#xFF0C;&#x90A3;&#x5C31;&#x8FDE;&#x5F00;&#x5934;&#x7ED3;&#x5C3E;&#x7684;&#x4E24;&#x4E2A;&#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#x4E5F;&#x91CD;&#x5199;&#x4E86;&#xFF0C;&#x54C8;&#x54C8;~ &#x6211;&#x81EA;&#x5DF1;&#x5199;&#x8FD9;&#x4E2A;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#xFF0C;&#x4E0D;&#x8981;&#x592A;&#x7B80;&#x5355;&#xFF0C;&#x5927;&#x5BB6;&#x5982;&#x679C;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x6211;&#x5F3A;&#x70C8;&#x5EFA;&#x8BAE;&#x770B;&#x4E00;&#x4E0B;HttpServlet&#x91CC;&#x9762;&#x7684;service&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x7ECF;&#x5178;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;&#xFF0C;&#x91CC;&#x9762;&#x7684;doPost&#x3001;doGet&#x3001;doDelete&#x7B49;&#x7B49;&#xFF0C;&#x90FD;&#x662F;&#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x91CC;&#x6709;&#x9ED8;&#x8BA4;&#x5B9E;&#x73B0;&#xFF0C;&#x5728;&#x5B50;&#x7C7B;&#x4E2D;&#x53EF;&#x4EE5;&#x91CD;&#x5199;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#x7684;&#x547D;&#x540D;&#x89C4;&#x5219;&#x662F;doXXX&#xFF0C;&#x8FD9;&#x662F;&#x719F;&#x6089;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x7684;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x7684;&#x9ED8;&#x8BA4;&#x505A;&#x6CD5;&#xFF0C;&#x4EE5;&#x540E;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x8BB0;&#x5F97;&#x8FD9;&#x6837;&#x547D;&#x540D;&#xFF0C;&#x4F60;&#x548C;&#x5176;&#x4ED6;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x5C31;&#x66F4;&#x65B9;&#x4FBF;&#x6C9F;&#x901A;&#x4E86;~ &#x56DB;&#x3001;&#x4F18;&#x7F3A;&#x70B9;&#x4F18;&#x70B9; &#x63D0;&#x9AD8;&#x4EE3;&#x7801;&#x7684;&#x590D;&#x7528;&#x6027;&#xFF0C;&#x76F8;&#x540C;&#x7684;&#x903B;&#x8F91;&#x90E8;&#x5206;&#x4F1A;&#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x4E2D;&#x5B9E;&#x73B0; &#x63D0;&#x9AD8;&#x4EE3;&#x7801;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5C06;&#x4E0D;&#x540C;&#x90E8;&#x5206;&#x653E;&#x5165;&#x5B50;&#x7C7B;&#xFF0C;&#x5982;&#x679C;&#x9700;&#x8981;&#x6269;&#x5C55;&#xFF0C;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#x65B0;&#x7684;&#x5B50;&#x7C7B; &#x7B26;&#x5408;&#x597D;&#x83B1;&#x575E;&#x539F;&#x5219;&#xFF0C;&#x7531;&#x62BD;&#x8C61;&#x7C7B;&#x4E3B;&#x63A7;&#x4E00;&#x5207;&#xFF0C;&#x5B50;&#x7C7B;&#x7EDD;&#x4E0D;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x62BD;&#x8C61;&#x7C7B;&#x3002; &#x7F3A;&#x70B9; &#x5F15;&#x5165;&#x4E86;&#x62BD;&#x8C61;&#x7C7B;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5B9E;&#x73B0;&#x90FD;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B;&#x6765;&#x5B9E;&#x73B0;&#xFF0C;&#x5BFC;&#x81F4;&#x7C7B;&#x7684;&#x4E2A;&#x6570;&#x589E;&#x52A0;&#xFF0C;&#x4ECE;&#x800C;&#x589E;&#x52A0;&#x4E86;&#x7CFB;&#x7EDF;&#x5B9E;&#x73B0;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x3002; &#x4E94;&#x3001;&#x603B;&#x7ED3;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;&#x662F;&#x7ECF;&#x5E38;&#x7528;&#x5230;&#x7684;&#x4E00;&#x79CD;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#xFF0C;&#x4F46;&#x4E5F;&#x662F;&#x5F88;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#x7684;&#x4E00;&#x79CD;&#x6A21;&#x5F0F;&#x3002;&#x91CD;&#x70B9;&#x5728;&#x62BD;&#x8C61;&#x6A21;&#x677F;&#x7C7B;&#x4E2D;&#x7684;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x4E3B;&#x63A7;&#x4E00;&#x5207;&#xFF0C;&#x9700;&#x8981;&#x6539;&#x53D8;&#x7684;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#x63A8;&#x8FDF;&#x5230;&#x5B50;&#x7C7B;&#x4E2D;&#x5B8C;&#x6210;&#x3002; &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x4E0D;&#x8981;&#x4E0E;&#x7B56;&#x7565;&#x6A21;&#x5F0F;&#x6DF7;&#x6DC6;&#xFF0C;&#x7B56;&#x7565;&#x6A21;&#x5F0F;&#x540C;&#x6837;&#x4E5F;&#x662F;&#x5C01;&#x88C5;&#x7B97;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x7B56;&#x7565;&#x6A21;&#x5F0F;&#x662F;&#x5C01;&#x88C5;&#x6574;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;&#x800C;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F;&#x662F;&#x5C06;&#x9700;&#x8981;&#x6539;&#x53D8;&#x7684;&#x90E8;&#x5206;&#x5728;&#x5B50;&#x7C7B;&#x4E2D;&#x5B9E;&#x73B0;&#xFF1B;&#x7B56;&#x7565;&#x65B9;&#x6CD5;&#x4F7F;&#x7528;&#x7EC4;&#x5408;&#xFF0C;&#x800C;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x662F;&#x4F7F;&#x7528;&#x7EE7;&#x627F;&#x3002; &#x672C;&#x6587;&#x9996;&#x53D1;&#x4E8E;cdream&#x4E2A;&#x4EBA;&#x535A;&#x5BA2; &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#xFF01; &#x53C2;&#x8003;&#x8D44;&#x6599;&#xFF1A; Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;,Eric Freeman &amp;Elisabeth Freeman with Kathy Sierra &amp; Bert Bates Template method pattern&#xFF0C;wiki &#x300A;JAVA&#x4E0E;&#x6A21;&#x5F0F;&#x300B;&#x4E4B;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x6A21;&#x5F0F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式——适配器模式（type-c转3.5mm耳机口）]]></title>
    <url>%2F2018%2F12%2F14%2Fdesignpattern03%2F</url>
    <content type="text"><![CDATA[&#x672C;&#x6587;&#x7B80;&#x8FF0;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#xFF0C;&#x8003;&#x8651;&#x5230;java&#x4E2D;&#x6CA1;&#x6709;&#x591A;&#x7EE7;&#x627F;&#x5C31;&#x53EA;&#x5199;&#x4E86;&#x5BF9;&#x8C61;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#xFF0C;&#x7136;&#x540E;&#x4F8B;&#x5B50;&#x662F;&#x600E;&#x4E48;&#x7528;&#x8F6C;&#x63A5;&#x53E3;&#x628A;3.5mm&#x8033;&#x673A;&#x63D2;&#x5728;&#x5C0F;&#x7C73;8&#x4E0A;&#x9762;&#x3002; &#x4E00;&#x3001;&#x6982;&#x5FF5;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#xFF08;&#x82F1;&#x8BED;&#xFF1A;adapter pattern&#xFF09;&#x6709;&#x65F6;&#x5019;&#x4E5F;&#x79F0;&#x5305;&#x88C5;&#x6837;&#x5F0F;&#x6216;&#x8005;&#x5305;&#x88C5;(wrapper)&#x3002;&#x5C06;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x63A5;&#x53E3;&#x8F6C;&#x63A5;&#x6210;&#x7528;&#x6237;&#x6240;&#x671F;&#x5F85;&#x7684;&#x3002;&#x4E00;&#x4E2A;&#x9002;&#x914D;&#x5668;&#x4F7F;&#x5F97;&#x56E0;&#x63A5;&#x53E3;&#x4E0D;&#x517C;&#x5BB9;&#x800C;&#x4E0D;&#x80FD;&#x5728;&#x4E00;&#x8D77;&#x5DE5;&#x4F5C;&#x7684;&#x7C7B;&#x80FD;&#x5728;&#x4E00;&#x8D77;&#x5DE5;&#x4F5C;&#xFF0C;&#x505A;&#x6CD5;&#x662F;&#x5C06;&#x7C7B;&#x81EA;&#x5DF1;&#x7684;&#x63A5;&#x53E3;&#x5305;&#x88F9;&#x5728;&#x4E00;&#x4E2A;&#x5DF2;&#x5B58;&#x5728;&#x7684;&#x7C7B;&#x4E2D;&#x3002; &#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x5141;&#x8BB8;&#x4E00;&#x4E2A;&#x5DF2;&#x5B58;&#x5728;&#x7684;&#x7C7B;&#x7684;&#x63A5;&#x53E3;&#x88AB;&#x7528;&#x4F5C;&#x53E6;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x3002;&#x901A;&#x5E38;&#x53EF;&#x4EE5;&#x5728;&#x4E0D;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4F7F;&#x7528;&#x5DF2;&#x5B58;&#x5728;&#x7684;&#x7C7B;&#x3002; &#x5176;&#x5B9E;&#x5728;&#x751F;&#x6D3B;&#x4E2D;&#xFF0C;&#x9002;&#x914D;&#x5668;&#x968F;&#x5904;&#x770B;&#x89C1;&#xFF0C;&#x4F8B;&#x5982;&#x4E0B;&#x56FE;&#xFF0C;&#x4E00;&#x4E2A;type-c&#x8F6C;&#x8033;&#x673A;&#x53E3;&#x7684;&#x9002;&#x914D;&#x5668;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x8BA9;&#x6211;&#x770B;&#x770B;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5E76;&#x7528;java&#x4EE3;&#x7801;&#x6765;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;type-c&#x63A5;&#x53E3;&#x7684;&#x624B;&#x673A;&#x4E0E;3.5mm&#x7684;&#x8033;&#x673A;&#x901A;&#x8FC7;&#x9002;&#x914D;&#x5668;&#x8FDE;&#x63A5;&#x3002; &#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x4E3B;&#x8981;&#x89E3;&#x51B3;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;1.&#x8F6C;&#x6362;&#x5F53;&#x524D;&#x63A5;&#x53E3;&#x4E3A;&#x5BA2;&#x6237;&#x7AEF;&#x9700;&#x8981;&#x7684;&#x63A5;&#x53E3;2.&#x901A;&#x8FC7;&#x9002;&#x914D;&#x5668;&#x4F7F;&#x7528;&#x6CA1;&#x6709;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x7684;&#x63A5;&#x53E3;&#x7684;&#x7C7B; &#x63CF;&#x8FF0;&#x770B;&#x4F3C;&#x76F8;&#x540C;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x51FA;&#x53D1;&#x70B9;&#x4E0D;&#x540C;~&#x563F;&#x563F;&#xFF0C;&#x610F;&#x4F1A;&#x610F;&#x4F1A; &#x4E8C;&#x3001;&#x7ED3;&#x6784;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x6709;&#x4E24;&#x79CD;&#xFF0C;&#x4E00;&#x79CD;&#x662F;&#x7C7B;&#x9002;&#x914D;&#x5668;&#xFF0C;&#x4E0D;&#x8FC7;&#x9700;&#x8981;&#x652F;&#x6301;&#x591A;&#x7EE7;&#x627F;&#x7684;&#x8BED;&#x8A00;&#x624D;&#x80FD;&#x5B9E;&#x73B0;&#xFF0C;&#x672C;&#x6587;&#x4E3B;&#x8981;&#x8BB2;&#x89E3;&#x5355;&#x7EE7;&#x627F;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x7684;&#x5BF9;&#x8C61;&#x9002;&#x914D;&#x5668;&#x3002;&#x4E0B;&#x56FE;&#x662F;&#x5BF9;&#x8C61;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x7684;&#x7C7B;&#x56FE;&#xFF0C;Client&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0;Target&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#x6765;&#x5B8C;&#x6210;&#x5DE5;&#x4F5C;&#xFF0C;&#x800C;&#x5F53;&#x524D;&#x6211;&#x4EEC;&#x63D0;&#x4F9B;&#x7684;&#x53EA;&#x6709;Adaptee&#x7C7B;&#xFF0C;&#x8FD9;&#x65F6;&#x8BE5;&#x600E;&#x4E48;&#x529E;&#x5462;&#xFF1F;&#x6069;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x9020;&#x4E00;&#x4E2A;&#x9002;&#x914D;&#x5668;&#xFF08;adapter&#xFF09;&#x6765;&#x5B8C;&#x6210;&#x8FD9;&#x4E2A;&#x9700;&#x6C42;&#x3002; &#x6D89;&#x53CA;&#x5230;&#x7684;&#x4E3B;&#x8981;&#x89D2;&#x8272;&#xFF1A; &#x200B; Target&#xFF1A;&#x76EE;&#x6807;&#x63A5;&#x53E3;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x671F;&#x5F85;&#x5F97;&#x5230;&#x7684;&#x63A5;&#x53E3;&#x3002; &#x200B; Adaptee&#xFF1A;&#x5F53;&#x524D;&#x62E5;&#x6709;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x9700;&#x8981;&#x9002;&#x914D;&#xFF0C;&#x5DF2;&#x6EE1;&#x8DB3;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x8981;&#x6C42;&#x3002; &#x200B; Adapter&#xFF1A;&#x9002;&#x914D;&#x5668;&#x7C7B;&#xFF0C;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x7684;&#x6838;&#x5FC3;&#xFF0C;&#x5C31;&#x662F;&#x5C06;Adaptee&#x8F6C;&#x6362;&#x6210;&#x9700;&#x8981;&#x7684;&#x63A5;&#x53E3;&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x3002; &#x4E09;&#x3001;Type-C&#x8F6C;3.5mm&#x8033;&#x673A;&#x5B54;&#x9002;&#x914D;&#x5668;&#x8FD9;&#x4E2A;&#x662F;&#x5C0F;&#x7C73;8&#x624B;&#x673A;&#x7C7B;&#xFF0C;&#x53EA;&#x63D0;&#x4F9B;&#x63D2;TypeC&#x8033;&#x673A;&#x7684;&#x63A5;&#x53E3; 1234567891011121314151617181920public class Mi8{ private TypeCEraPhones eraPhones; //&#x6253;&#x7535;&#x8BDD;&#x529F;&#x80FD; public void call() { System.out.println(&quot;&#x6253;&#x7535;&#x8BDD;&quot;); } //&#x64AD;&#x653E;&#x97F3;&#x4E50;&#xFF0C;&#x6709;&#x8033;&#x673A;&#x5C31;&#x7528;&#x8033;&#x673A;&#xFF0C;&#x6CA1;&#x8033;&#x673A;&#x5C31;&#x5916;&#x653E; public void playMusic() { if (eraPhones != null){ eraPhones.play(); }else{ System.out.println(&quot;&#x5916;&#x653E;&quot;); } } // &#x63D2;&#x4E2A;TypeC&#x63A5;&#x53E3;&#x7684;&#x8033;&#x673A; public void setEraPhones(TypeCEraPhones eraPhones) { this.eraPhones = eraPhones; }} &#x8FD9;&#x4E2A;&#x662F;TypeC&#x63A5;&#x53E3;&#x7684;&#x8033;&#x673A;&#x63A5;&#x53E3;&#xFF0C;&#x542C;&#x8BF4;&#x7528;&#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x7684;&#x8033;&#x673A;&#x90FD;&#x597D;&#x597D;&#x8D35;&#x5462;~~ 123public interface TypeCEraPhones { void play();} &#x8FD9;&#x4E2A;&#x662F;&#x6211;&#x4EEC;&#x4EE5;&#x524D;&#x5269;&#x4E0B;&#x7684;&#x80FD;&#x542C;&#x4E2A;&#x54CD;&#x7684;3.5mm&#x63A5;&#x53E3;&#x7684;&#x8033;&#x673A; 12345public class Mi35MMEraPhones { public void play(){ System.out.println(&quot;&#x4F7F;&#x7528;3.5mm&#x5B54;&#x7684;&#x5C0F;&#x7C73;&#x8033;&#x673A;&#x64AD;&#x653E;&#x58F0;&#x97F3;&quot;); }} &#x600E;&#x4E48;&#x529E;&#x5462;&#xFF0C;&#x662F;&#x82B1;&#x5927;&#x94B1;&#x4E70;&#x4E2A;&#x65B0;&#x7684;&#x8033;&#x673A;&#xFF08;&#x60F3;&#x60F3;&#xFF0C;&#x5982;&#x679C;&#x771F;&#x662F;&#x4E2A;&#x590D;&#x6742;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x91CD;&#x65B0;&#x5B9E;&#x73B0;&#x529F;&#x80FD;&#x662F;&#x4E0D;&#x662F;&#x5F88;&#x5934;&#x5927;&#xFF09;&#xFF0C;&#x8FD8;&#x662F;&#x5BF9;&#x5F53;&#x524D;&#x8FD9;&#x4E2A;3.5mm&#x7684;&#x8033;&#x673A;&#x7206;&#x6539;,&#x53EF;&#x662F;&#x6211;&#x8FD8;&#x6709;&#x4E2A;&#x9700;&#x8981;&#x4F7F;&#x7528;3.5mm&#x7684;mp3 ,&#x1F914;,&#x8FD9;&#x53EF;&#x600E;&#x4E48;&#x662F;&#x597D;&#x2026;&#x2026;&#x4E8E;&#x662F;&#x673A;&#x667A;&#x7684;&#x6211;&#x53BB;&#x6DD8;&#x5B9D;&#x53D1;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;type-c&#x8F6C;3.5mm&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x624D;5&#x5757;&#x94B1;&#xFF01;&#xFF01;&#x1F923; &#x9002;&#x914D;&#x5668;&#x7C7B; 123456789101112public class Adapter implements TypeCEraPhones { private Mi35MMEraPhones eraPhones; public Adapter(Mi35MMEraPhones eraPhones) { this.eraPhones = eraPhones; } @Override public void play() { eraPhones.play(); }} &#x9002;&#x914D;&#x5668;&#x5B9E;&#x73B0;&#x4E86;TypeC&#x8033;&#x673A;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5E76;&#x80FD;&#x628A;&#x539F;&#x6765;&#x7684;&#x8033;&#x673A;&#x4F20;&#x8FDB;&#x6765;&#xFF0C;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x5C31;&#x80FD;&#x6109;&#x5FEB;&#x7684;&#x7528;&#x539F;&#x6765;&#x7684;&#x8033;&#x673A;&#x5728;&#x5C0F;&#x7C73;8&#x4E0A;&#x542C;&#x97F3;&#x4E50;&#x4E86;&#xFF0C;hooooooo~&#x800C;&#x4E14;&#x8FD8;&#x80FD;&#x6211;&#x7684;mp3&#x4F7F;&#x7528;&#xFF0C;&#x7F8E;&#x6ECB;&#x6ECB;~ &#x56DB;&#x3001;&#x7F3A;&#x7701;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x5728;&#x5F88;&#x591A;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5FC5;&#x987B;&#x8BA9;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x7C7B;&#x5B9E;&#x73B0;&#x67D0;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x7C7B;&#x53C8;&#x7528;&#x4E0D;&#x5230;&#x63A5;&#x53E3;&#x6240;&#x89C4;&#x5B9A;&#x7684;&#x6240;&#x6709;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x901A;&#x5E38;&#x7684;&#x5904;&#x7406;&#x65B9;&#x6CD5;&#x662F;&#xFF0C;&#x628A;&#x65B9;&#x6CD5;&#x90FD;&#x5B9E;&#x73B0;&#x4E86;&#xFF0C;&#x6709;&#x7528;&#x7684;&#x5199;&#x4E0A;&#x9700;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6CA1;&#x7528;&#x7684;&#x63D0;&#x4F9B;&#x7A7A;&#x5B9E;&#x73B0;&#xFF0C;&#x70E6;&#x6B7B;&#x4E86;&#x1F624; &#x8FD9;&#x4E9B;&#x7A7A;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x4E00;&#x79CD;&#x6D6A;&#x8D39;&#xFF0C;&#x6709;&#x65F6;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x6DF7;&#x4E71;&#x3002;&#x53EA;&#x6709;&#x770B;&#x8FC7;&#x8FD9;&#x4E9B;&#x7A7A;&#x65B9;&#x6CD5;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x7A0B;&#x5E8F;&#x5458;&#x624D;&#x80FD;&#x77E5;&#x9053;&#x54EA;&#x4E9B;&#x662F;&#x7A7A;&#x7684;&#xFF0C;&#x54EA;&#x4E9B;&#x4E0D;&#x662F;&#x7A7A;&#x7684;&#xFF0C;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x9002;&#x914D;&#x5668;&#x7C7B;&#xFF0C;&#x6765;&#x4E3A;&#x63A5;&#x53E3;&#x6240;&#x6709;&#x65B9;&#x6CD5;&#x63D0;&#x4F9B;&#x7A7A;&#x5B9E;&#x73B0;&#xFF0C;&#x7136;&#x540E;&#x8FD9;&#x4E2A;&#x5177;&#x4F53;&#x7C7B;&#x7EE7;&#x627F;&#x9002;&#x914D;&#x5668;&#x63A5;&#x53E3;&#xFF0C;&#x9700;&#x8981;&#x54EA;&#x4E9B;&#x65B9;&#x6CD5;&#xFF0C;&#x8FDB;&#x884C;&#x91CD;&#x5199;&#x5C31;&#x53EF;&#x4EE5;&#x3002; &#x5728;jdk&#x4E2D;&#x6709;AbstractList&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;List&#x63A5;&#x53E3;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5B9A;&#x5236;&#x81EA;&#x5DF1;&#x7684;&#x96C6;&#x5408;&#x7C7B;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x7EE7;&#x627F;&#x8FD9;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#xFF0C;&#x9700;&#x8981;&#x54EA;&#x4E9B;&#x65B9;&#x6CD5;&#x5C31;&#x53EF;&#x4EE5;&#x5BF9;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x91CD;&#x5199;&#xFF0C;&#x800C;&#x4E0D;&#x7528;&#x5BF9;List&#x63A5;&#x53E3;&#x4E0B;&#x6240;&#x6709;&#x65B9;&#x6CD5;&#x90FD;&#x63D0;&#x4F9B;&#x7A7A;&#x5B9E;&#x73B0;&#x3002; &#x7F3A;&#x7701;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x5728;&#x4E0D;&#x5F97;&#x4E0D;&#x7EE7;&#x627F;&#x67D0;&#x4E2A;&#x65B9;&#x6CD5;&#x65F6;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x91CD;&#x5199;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x4E94;&#x3001;&#x4F18;&#x7F3A;&#x70B9;&#x4F18;&#x70B9; &#x66F4;&#x597D;&#x7684;&#x590D;&#x7528;&#x6027;&#xFF1A;&#x7CFB;&#x7EDF;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x73B0;&#x6709;&#x7684;&#x7C7B;&#xFF0C;&#x800C;&#x6B64;&#x7C7B;&#x7684;&#x63A5;&#x53E3;&#x4E0D;&#x7B26;&#x5408;&#x7CFB;&#x7EDF;&#x7684;&#x9700;&#x8981;&#x3002;&#x90A3;&#x4E48;&#x901A;&#x8FC7;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x5C31;&#x53EF;&#x4EE5;&#x8BA9;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x5F97;&#x5230;&#x66F4;&#x597D;&#x7684;&#x590D;&#x7528;&#x3002; &#x66F4;&#x597D;&#x7684;&#x6269;&#x5C55;&#x6027;&#xFF1A;&#x5728;&#x5B9E;&#x73B0;&#x9002;&#x914D;&#x5668;&#x529F;&#x80FD;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x81EA;&#x5DF1;&#x5F00;&#x53D1;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x4ECE;&#x800C;&#x81EA;&#x7136;&#x5730;&#x6269;&#x5C55;&#x7CFB;&#x7EDF;&#x7684;&#x529F;&#x80FD;&#x3002; &#x7F3A;&#x70B9; &#x8FC7;&#x591A;&#x7684;&#x4F7F;&#x7528;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#xFF0C;&#x4F1A;&#x8BA9;&#x7CFB;&#x7EDF;&#x96BE;&#x4EE5;&#x628A;&#x63A7;&#xFF0C;&#x6BD5;&#x7ADF;&#x8868;&#x9762;&#x4E0A;&#x662F;A&#x63A5;&#x53E3;&#xFF0C;&#x5176;&#x5B9E;&#x5185;&#x90E8;&#x88AB;&#x9002;&#x914D;&#x6210;&#x4E86;B&#x63A5;&#x53E3;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x4E00;&#x4E2A;&#x7CFB;&#x7EDF;&#x5982;&#x679C;&#x592A;&#x591A;&#x51FA;&#x73B0;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x65E0;&#x5F02;&#x4E8E;&#x4E00;&#x573A;&#x707E;&#x96BE;&#x3002; &#x516D;&#x3001;&#x603B;&#x7ED3;&#x672C;&#x6587;&#x5BF9;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x8FDB;&#x884C;&#x4E86;&#x7B80;&#x8981;&#x4ECB;&#x7ECD;&#xFF0C;&#x4E3B;&#x8981;&#x628A;&#x63E1;&#x662F;&#x9002;&#x914D;&#x5668;&#x5B9E;&#x73B0;&#x9700;&#x8981;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5E76;&#x4E0E;adaptee&#x8FDB;&#x884C;&#x7EC4;&#x5408;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5BF9;&#x8C61;&#x9002;&#x914D;&#x5668;&#x3002;&#x5728;&#x5B66;&#x4E60;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x4EE5;&#x4E0E;&#x88C5;&#x9970;&#x8005;&#x6A21;&#x5F0F;&#x548C;&#x5916;&#x89C2;&#x6A21;&#x5F0F;&#xFF0C;&#x9002;&#x914D;&#x5668;&#x548C;&#x88C5;&#x9970;&#x8005;&#x4F7F;&#x7528;&#x65B9;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x76EE;&#x7684;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#xFF0C;&#x524D;&#x8005;&#x662F;&#x5C06;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x8F6C;&#x4E3A;&#x53E6;&#x4E00;&#x4E2A;&#x63A5;&#xFF0C;&#x540E;&#x8005;&#x662F;&#x4E3A;&#x4E86;&#x5BF9;&#x7C7B;&#x8FDB;&#x884C;&#x589E;&#x5F3A;&#xFF1B;&#x5916;&#x89C2;&#x6A21;&#x5F0F;&#x76EE;&#x7684;&#x662F;&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x63A5;&#x53E3;&#x3002; &#x672C;&#x6587;&#x9996;&#x53D1;&#x4E8E;cdream&#x4E2A;&#x4EBA;&#x535A;&#x5BA2; &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#xFF01; &#x672C;&#x6587;&#x53C2;&#x8003;&#xFF1A; Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;,Eric Freeman &amp;Elisabeth Freeman with Kathy Sierra &amp; Bert Bates Adapter pattern&#xFF0C;wiki &#x300A;JAVA&#x4E0E;&#x6A21;&#x5F0F;&#x300B;&#x4E4B;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式——命令模式（遥控器与灯）]]></title>
    <url>%2F2018%2F12%2F12%2Fdesignpattern02%2F</url>
    <content type="text"><![CDATA[&#x672C;&#x6587;&#x4E3B;&#x8981;&#x5BF9;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x8FDB;&#x884C;&#x6982;&#x8FF0;&#x8BB2;&#x89E3;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x4F7F;&#x7528;&#x9065;&#x63A7;&#x5668;&#x4E0E;&#x706F;&#x6765;&#x8BB2;&#x8FF0;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E2D;&#x8C03;&#x7528;&#x8005;&#x4E0E;&#x63A5;&#x6536;&#x8005;&#x7684;&#x5173;&#x7CFB;&#x3002; &#x4E00;&#x3001;&#x6982;&#x8FF0;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#xFF08;&#x82F1;&#x8BED;&#xFF1A;Command pattern&#xFF09;&#x662F;&#x4E00;&#x79CD;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#xFF0C;&#x5B83;&#x5C1D;&#x8BD5;&#x4EE5;&#x5BF9;&#x8C61;&#x6765;&#x4EE3;&#x8868;&#x5B9E;&#x9645;&#x884C;&#x52A8;&#x3002;&#x547D;&#x4EE4;&#x5BF9;&#x8C61;&#x53EF;&#x4EE5;&#x628A;&#x884C;&#x52A8;(action) &#x53CA;&#x5176;&#x53C2;&#x6570;&#x5C01;&#x88C5;&#x8D77;&#x6765;&#xFF0C;&#x4E8E;&#x662F;&#x8FD9;&#x4E9B;&#x884C;&#x52A8;&#x53EF;&#x4EE5;&#x88AB;&#x91CD;&#x590D;&#x4F7F;&#x7528;&#x3001;&#x64A4;&#x9500;&#x3001;&#x64A4;&#x9500;&#x540E;&#x91CD;&#x505A;&#x3002; &#x8FD9;&#x4E2A;&#x662F;&#x6982;&#x5FF5;&#x662F;&#x6765;&#x81EA;&#x7EF4;&#x57FA;&#x767E;&#x79D1;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x6700;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#xFF0C;&#x5C31;&#x662F;&#x628A;&#x547D;&#x4EE4;&#x5C01;&#x88C5;&#x6210;&#x5BF9;&#x8C61;&#xFF0C;&#x4F7F;&#x547D;&#x4EE4;&#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x8C03;&#x7528;&#x3001;&#x64A4;&#x9500;&#xFF0C;&#x964D;&#x4F4E;&#x4E86;&#x8C03;&#x7528;&#x8005;&#x548C;&#x63A5;&#x53D7;&#x8005;&#x7684;&#x8026;&#x5408;&#xFF0C;&#x540C;&#x65F6;&#x5BB9;&#x6613;&#x6269;&#x5C55;&#x51FA;&#x65B0;&#x7684;&#x547D;&#x4EE4;&#x3002; &#x5176;&#x4ED6;&#x63CF;&#x8FF0;&#xFF1A;1.&#x5C06;&#x201C;&#x8BF7;&#x6C42;&#x201D;&#x5C01;&#x88C5;&#x6210;&#x5BF9;&#x8C61;&#xFF0C;&#x4EE5;&#x4FBF;&#x4F7F;&#x4E0D;&#x540C;&#x7684;&#x8BF7;&#x6C42;&#x3001;&#x961F;&#x5217;&#x6216;&#x65E5;&#x5FD7;&#x6765;&#x53C2;&#x6570;&#x5316;&#x5176;&#x4ED6;&#x5BF9;&#x8C61;&#xFF0C;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E5F;&#x652F;&#x6301;&#x53EF;&#x64A4;&#x9500;&#x64CD;&#x4F5C;&#x3002;&#xFF08;Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#xFF09;2.&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x628A;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x6216;&#x8005;&#x64CD;&#x4F5C;&#x5C01;&#x88C5;&#x5230;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x4E2D;&#x3002;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x5141;&#x8BB8;&#x7CFB;&#x7EDF;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x8BF7;&#x6C42;&#x628A;&#x5BA2;&#x6237;&#x7AEF;&#x53C2;&#x6570;&#x5316;&#xFF0C;&#x5BF9;&#x8BF7;&#x6C42;&#x6392;&#x961F;&#x6216;&#x8005;&#x8BB0;&#x5F55;&#x8BF7;&#x6C42;&#x65E5;&#x5FD7;&#xFF0C;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x547D;&#x4EE4;&#x7684;&#x64A4;&#x9500;&#x548C;&#x6062;&#x590D;&#x529F;&#x80FD;&#x3002;&#xFF08;Java&#x4E0E;&#x6A21;&#x5F0F;&#xFF09; &#x5927;&#x5BB6;&#x505A;&#x9002;&#x5F53;&#x53C2;&#x8003;&#xFF0C;&#x4E0D;&#x7406;&#x89E3;&#x53EF;&#x4EE5;&#x5148;&#x770B;&#x770B;&#x4E0B;&#x9762;&#x7684;&#x6E90;&#x7801;&#xFF01; &#x4E8C;&#x3001;&#x7ED3;&#x6784;&#x5982;&#x56FE;&#xFF0C;&#x8FD9;&#x662F;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x7684;&#x7ED3;&#x6784;&#xFF1A; &#x4EE5;&#x7528;&#x9065;&#x63A7;&#x5668;&#x5F00;&#x706F;&#x4E3A;&#x4F8B;&#xFF08;Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x4F8B;&#x5B50;&#xFF09; Invoker&#xFF1A;&#x547D;&#x4EE4;&#x8C03;&#x7528;&#x8005;,&#x8D1F;&#x8D23;&#x8C03;&#x7528;&#x547D;&#x4EE4;&#x5BF9;&#x8C61;&#x7684;&#x8BF7;&#x6C42;&#x2014;&#x2014;&#x9065;&#x63A7;&#x5668; Command&#xFF1A;&#x58F0;&#x660E;&#x4E86;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x547D;&#x4EE4;&#x7C7B;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3;&#x2014;&#x2014;&#x547D;&#x4EE4;&#x7684;&#x63A5;&#x53E3; ConcreteCommand&#xFF1A;&#x5177;&#x4F53;&#x547D;&#x4EE4;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;Invoker&#x548C;Receiver&#x4E4B;&#x95F4;&#x7684;&#x89E3;&#x8026;&#xFF0C;&#x901A;&#x5E38;&#x6301;&#x6709;&#x63A5;&#x6536;&#x8005;&#x5BF9;&#x8C61;&#x7684;&#x996E;&#x7528;&#x2014;&#x2014;&#x5F00;&#x706F;&#x6309;&#x94AE;&#x6267;&#x884C;&#x7684;&#x547D;&#x4EE4; Receiver:&#x547D;&#x4EE4;&#x63A5;&#x6536;&#x8005;&#xFF0C;&#x771F;&#x6B63;&#x63A5;&#x6536;&#x547D;&#x4EE4;&#x5E76;&#x6267;&#x884C;&#x52A8;&#x4F5C;&#x7684;&#x5BF9;&#x8C61;&#x2014;&#x2014;&#x706F; Client&#xFF1A;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;&#x521B;&#x9020;&#x5177;&#x4F53;&#x7684;&#x547D;&#x4EE4;&#xFF0C;&#x5E76;&#x786E;&#x5B9A;&#x63A5;&#x6536;&#x8005; &#x4E09;&#x3001;&#x6E90;&#x4EE3;&#x7801;Receiver&#x2014;&#x2014;&#x4E8C;&#x6863;&#x4EAE;&#x5EA6;&#x7684;&#x706F; 12345678910111213141516171819202122232425262728293031323334353637383940// &#x4E8C;&#x6863;&#x8C03;&#x8282;&#x7684;&#x706F;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4F5C;&#x4E3A;&#x63A5;&#x6536;&#x8005;public class Light { public static final String HIGH = &quot;&#x8D3C;&#x4EAE;&quot;; public static final String MEDIUM = &quot;&#x6709;&#x70B9;&#x4EAE;&quot;; public static final String LOW = &quot;&#x5FEB;&#x706D;&#x706B;&#x4E86;&quot;; public static final String OFF = &quot;&#x771F;&#x7684;&#x706D;&#x706B;&#x4E86;~&quot;; private String luminance; public Light() { this.luminance = OFF; } public void off() { System.out.println(&quot;&#x706F;&#x5173;&#x95ED;&#x4E86;&quot;); this.luminance = OFF; } public void high() { System.out.println(&quot;&#x8D3C;&#x4EAE;&quot;); this.luminance = HIGH; } public void medium() { System.out.println(&quot;&#x633A;&#x4EAE;&#x5730;&#xFF01;&quot;); this.luminance = MEDIUM; } public void low() { System.out.println(&quot;&#x5FEB;&#x706D;&#x706B;&#x4E86;&quot;); this.luminance = LOW; } public String getLuminance(){ return this.luminance; }} Command&#x2014;&#x2014;&#x505A;&#x4E2A;&#x547D;&#x4EE4;&#x63A5;&#x53E3;&#xFF0C;&#x5E26;&#x64A4;&#x9500;&#x529F;&#x80FD; 1234public interface Command { void excute(); void undo();} LightHighCommand&#x2014;&#x2014;&#x9AD8;&#x5149;&#x547D;&#x4EE4; 1234567891011121314151617181920212223242526272829303132public class LightHighCommand implements Command { private Light light; private String preLuminance; @Override public void excute() { // &#x5907;&#x4EFD;&#x4E0A;&#x4E00;&#x4E2A;&#x547D;&#x4EE4;&#xFF0C;&#x64A4;&#x9500;&#x4F7F;&#x7528; preLuminance = light.getLuminance(); light.high(); } @Override public void undo() { if (Light.HIGH.equals(preLuminance)){ light.high(); }else if(Light.MEDIUM.equals(preLuminance) ){ light.medium(); }else if (Light.LOW.equals(preLuminance)){ light.low(); }else if (Light.OFF.equals(preLuminance)){ light.off(); } } public LightHighCommand(Light light) { this.light = light; } // &#x667A;&#x80FD;&#x9065;&#x63A7;&#x5668;&#x6309;&#x952E;&#x529F;&#x80FD;&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x591A;&#x4E2A;&#x706F; // &#x5982;&#x679C;&#x63A7;&#x5236;&#x4EE4;&#x4E00;&#x4E2A;&#x63A5;&#x6536;&#x8005;&#xFF0C;&#x53EF;&#x4EE5;&#x4F20;&#x5165;&#xFF0C;&#x4E0D;&#x7528;&#x65B0;&#x5EFA;&#x547D;&#x4EE4; public void setLight(Light light) { this.light = light; }} LightOffCommand&#x2014;&#x2014;&#x5173;&#x706F;&#x547D;&#x4EE4; 12345678910111213141516171819202122232425262728293031public class LightOffCommand implements Command { private Light light; private String preLuminance; public LightOffCommand(Light light) { this.light = light; } @Override public void excute() { preLuminance = light.getLuminance(); light.off(); } @Override public void undo() { if (Light.HIGH.equals(preLuminance)){ light.high(); }else if(Light.MEDIUM.equals(preLuminance) ){ light.medium(); }else if (Light.LOW.equals(preLuminance)){ light.low(); }else if (Light.OFF.equals(preLuminance)){ light.off(); } } public void setLight(Light light) { this.light = light; }} Invoker&#x2014;&#x2014;&#x9065;&#x63A7;&#x5668; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class RemoteControl { private Command off; private Command high; private Command medium; private Command low; private Command preCommand; public void setOff(Command off) { this.off = off; } public void setHigh(Command high) { this.high = high; } public void setMedium(Command medium) { this.medium = medium; } public void setLow(Command low) { this.low = low; } public void lightOff() { off.excute(); preCommand = off; } public void lightHigh() { high.excute(); preCommand = high; } public void lightMedium() { medium.excute(); preCommand = medium; } public void lightLow() { low.excute(); preCommand = low; } public void undo() { if (preCommand == null) { System.out.println(&quot;&#x65E0;&#x6CD5;&#x64A4;&#x9500;&quot;); } else { preCommand.undo(); } }} Client&#x2014;&#x2014;&#x5BA2;&#x6237;&#x7AEF; 12345678910111213141516171819202122public class Client { public static void main(String[] args) { // &#x521B;&#x5EFA;&#x63A5;&#x6536;&#x8005; Light light = new Light(); // &#x521B;&#x5EFA;&#x547D;&#x4EE4; Command lightHighCommand = new LightHighCommand(light); Command lightOffCommand = new LightOffCommand(light); // &#x521B;&#x5EFA;&#x8C03;&#x7528;&#x8005; RemoteControl remoteControl = new RemoteControl(); remoteControl.setHigh(lightHighCommand); remoteControl.setOff(lightOffCommand); // &#x8C03;&#x7528; remoteControl.lightHigh(); remoteControl.lightOff(); remoteControl.undo(); }}&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&gt;&#x7ED3;&#x679C;&#x8D3C;&#x4EAE;&#x706F;&#x5173;&#x95ED;&#x4E86;&#x8D3C;&#x4EAE; &#x4EE5;&#x4E0A;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5E26;&#x64A4;&#x56DE;&#x529F;&#x80FD;&#x7684;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#xFF0C;&#x5176;&#x4E2D;: &#x5982;&#x679C;&#x60F3;&#x5B9E;&#x73B0;&#x591A;&#x6B65;&#x64A4;&#x56DE;&#xFF0C;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x628A;&#x8C03;&#x7528;&#x8005;&#x4E2D;&#x7684;preCommand&#x6362;&#x6210;stack; &#x5982;&#x679C;&#x60F3;&#x5B9E;&#x73B0;&#x7EC4;&#x5408;&#x547D;&#x4EE4;&#xFF0C;&#x53EF;&#x4EE5;&#x91CD;&#x65B0;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5B8F;&#x547D;&#x4EE4;&#xFF0C;&#x5982;&#x4E0B; 123456789101112131415161718192021public class MacroCommand implements Command { private Command[] commands; public MacroCommand(Command[] commands) { this.commands = commands; } @Override public void excute() { for (Command command : commands) { command.excute(); } } @Override public void undo() { for (Command command : commands) { command.undo(); } }} &#x4F60;&#x53EF;&#x4EE5;&#x7528;&#x8FD9;&#x4E2A;&#x547D;&#x4EE4;&#x5B9E;&#x73B0;&#x4EFB;&#x4F55;&#x5F62;&#x5F0F;&#x7684;&#x547D;&#x4EE4;&#x7EC4;&#x5408;&#xFF0C;&#x751A;&#x81F3;&#x5982;&#x679C;&#x4F60;&#x89C9;&#x5F97;&#x4F60;&#x7684;&#x9065;&#x63A7;&#x5668;&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x7A7A;&#x8C03;&#xFF0C;&#x63A7;&#x5236;&#x7535;&#x6E90;&#xFF0C;&#x63A7;&#x5236;&#x7535;&#x996D;&#x9505;&#xFF0C;&#x4F60;&#x751A;&#x81F3;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x4E9B;&#x547D;&#x4EE4;&#x7EC4;&#x5408;&#x8FDB;&#x6765;~ &#x56DB;&#x3001;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x7684;&#x4F18;&#x7F3A;&#x70B9;&#x4F18;&#x70B9; &#x89E3;&#x8026;&#x5408;&#xFF1A;&#x5C06;&#x547D;&#x4EE4;&#x8C03;&#x7528;&#x8005;&#x548C;&#x547D;&#x4EE4;&#x6267;&#x884C;&#x8005;&#x901A;&#x8FC7;&#x547D;&#x4EE4;&#x8FDB;&#x884C;&#x89E3;&#x8026;&#xFF0C;&#x547D;&#x4EE4;&#x8C03;&#x7528;&#x8005;&#x4E0D;&#x5173;&#x5FC3;&#x7531;&#x8C01;&#x6765;&#x6267;&#x884C;&#x547D;&#x4EE4;&#xFF0C;&#x53EA;&#x8981;&#x547D;&#x4EE4;&#x6267;&#x884C;&#x5C31;&#x53EF;&#x4EE5; &#x66F4;&#x52A8;&#x6001;&#x7684;&#x63A7;&#x5236;&#xFF1A;&#x8BF7;&#x6C42;&#x88AB;&#x5C01;&#x88C5;&#x6210;&#x5BF9;&#x8C61;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x8F7B;&#x6613;&#x7684;&#x53C2;&#x6570;&#x5316;&#x3001;&#x961F;&#x5217;&#x5316;&#x3001;&#x65E5;&#x5FD7;&#x5316;&#xFF0C;&#x4F7F;&#x7CFB;&#x7EDF;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#x3002; &#x66F4;&#x5BB9;&#x6613;&#x7684;&#x547D;&#x4EE4;&#x7EC4;&#x5408;&#xFF1A;&#x6709;&#x4E86;&#x5B8F;&#x547D;&#x4EE4;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x4EFB;&#x610F;&#x7684;&#x5BF9;&#x547D;&#x4EE4;&#x8FDB;&#x884C;&#x7EC4;&#x5408; &#x66F4;&#x597D;&#x6269;&#x5C55;&#x6027;&#xFF1A;&#x53EF;&#x4EE5;&#x8F7B;&#x6613;&#x7684;&#x6DFB;&#x52A0;&#x65B0;&#x7684;&#x547D;&#x4EE4;&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD;&#x5230;&#x5176;&#x4ED6;&#x7684;&#x547D;&#x4EE4; &#x7F3A;&#x70B9; &#x547D;&#x4EE4;&#x8FC7;&#x591A;&#x65F6;&#xFF0C;&#x4F1A;&#x521B;&#x5EFA;&#x4E86;&#x8FC7;&#x591A;&#x7684;&#x547D;&#x4EE4;&#x7C7B;&#xFF0C;&#x4E0D;&#x65B9;&#x4FBF;&#x8FDB;&#x884C;&#x7BA1;&#x7406; &#x4E94;&#x3001;&#x603B;&#x7ED3;&#x672C;&#x6587;&#x5BF9;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4F5C;&#x4E86;&#x7B80;&#x5355;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x53EA;&#x8981;&#x660E;&#x767D;&#x8C03;&#x7528;&#x8005;&#x5982;&#x4F55;&#x901A;&#x8FC7;&#x547D;&#x4EE4;&#x4E0E;&#x63A5;&#x6536;&#x8005;&#x4EA4;&#x4E92;&#xFF0C;&#x5C31;&#x6BD4;&#x8F83;&#x597D;&#x7406;&#x89E3;&#x3002;&#x5728;&#x5B9E;&#x9645;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x53EF;&#x4EE5;&#x7528;&#x5728;&#x5E76;&#x884C;&#x5904;&#x7406;&#x3001;&#x4E8B;&#x52A1;&#x884C;&#x4E3A;&#x3001;&#x7EBF;&#x7A0B;&#x6C60;&#x7B49;&#x5730;&#x65B9;&#x3002;&#x4F8B;&#x5982;&#x4F20;&#x7EDF;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#x5C31;&#x6709;addTask()&#x65B9;&#x6CD5;&#x5C06;&#x547D;&#x4EE4;&#x52A0;&#x5165;&#x5230;&#x7B49;&#x5F85;&#x88AB;&#x6267;&#x884C;&#x7684;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x5141;&#x8BB8;&#x591A;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x5B9E;&#x73B0;java.lang.Runnable &#x7684;&#x547D;&#x4EE4;&#xFF0C;&#x5C3D;&#x7BA1;&#x7EBF;&#x7A0B;&#x6C60;&#x672C;&#x8EAB;&#x5BF9;&#x5177;&#x4F53;&#x7684;&#x4EFB;&#x52A1;&#x6BEB;&#x65E0;&#x8BA4;&#x77E5;&#x3002; &#x672C;&#x6587;&#x9996;&#x53D1;&#x4E8E;cdream&#x4E2A;&#x4EBA;&#x535A;&#x5BA2; &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#xFF01; Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;,Eric Freeman &amp;Elisabeth Freeman with Kathy Sierra &amp; Bert Bates Command pattern&#xFF0C;wiki &#x300A;JAVA&#x4E0E;&#x6A21;&#x5F0F;&#x300B;&#x4E4B;&#x547D;&#x4EE4;&#x6A21;&#x5F0F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式——观察者模式（海姆达尔与仙宫人民）]]></title>
    <url>%2F2018%2F12%2F09%2Fdesignpattern01%2F</url>
    <content type="text"><![CDATA[&#x672C;&#x6587;&#x4E3B;&#x8981;&#x5BF9;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x8FDB;&#x884C;&#x8BB2;&#x89E3;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x6765;&#x6A21;&#x62DF;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x5728;&#x53D1;&#x73B0;&#x654C;&#x4EBA;&#x6765;&#x88AD;&#x540E;&#x901A;&#x77E5;&#x96F7;&#x795E;&#x6258;&#x5C14;&#x548C;&#x6D1B;&#x57FA;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x4E00;&#x3001;&#x6982;&#x5FF5;&#x5B9A;&#x4E49;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x4E5F;&#x53EB;&#x4F5C;&#x53D1;&#x5E03;-&#x8BA2;&#x9605;&#x6A21;&#x5F0F;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x4E8B;&#x4EF6;&#x76D1;&#x542C;&#x673A;&#x5236;&#x3002;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x5B9A;&#x4E49;&#x4E86;&#x5BF9;&#x8C61;&#x4E4B;&#x95F4;&#x7684;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#xFF0C;&#x8BA9;&#x591A;&#x4E2A;&#x89C2;&#x5BDF;&#x8005;&#x5BF9;&#x8C61;&#x540C;&#x65F6;&#x76D1;&#x542C;&#x67D0;&#x4E00;&#x4E2A;&#x4E3B;&#x9898;&#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x4E2A;&#x4E3B;&#x9898;&#x5BF9;&#x8C61;&#x5728;&#x72B6;&#x6001;&#x4E0A;&#x53D1;&#x751F;&#x53D8;&#x5316;&#x65F6;&#xFF0C;&#x4F1A;&#x901A;&#x77E5;&#x6240;&#x6709;&#x89C2;&#x5BDF;&#x8005;&#x5BF9;&#x8C61;&#xFF0C;&#x4F7F;&#x4ED6;&#x4EEC;&#x80FD;&#x591F;&#x81EA;&#x52A8;&#x66F4;&#x65B0;&#x81EA;&#x5DF1;&#xFF0C;&#x5E76;&#x91C7;&#x53D6;&#x76F8;&#x5E94;&#x6D3B;&#x52A8;&#x3002; &#x4E3B;&#x8981;&#x7ED3;&#x6784; &#x62BD;&#x8C61;&#x4E3B;&#x9898;&#x89D2;&#x8272; &#x88AB;&#x89C2;&#x5BDF;&#x8005;,&#x628A;&#x6240;&#x6709;&#x89C2;&#x5BDF;&#x8005;&#x5BF9;&#x8C61;&#x5F15;&#x7528;&#x4FDD;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x91CC;,&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x589E;&#x52A0;&#x5220;&#x9664;&#x7684;&#x63A5;&#x53E3; &#x5177;&#x4F53;&#x4E3B;&#x9898;&#x89D2;&#x8272; &#x5C06;&#x6709;&#x5173;&#x72B6;&#x6001;&#x5B58;&#x5165;&#x5177;&#x4F53;&#x89C2;&#x5BDF;&#x8005;&#x5BF9;&#x8C61;,&#x5728;&#x5185;&#x90E8;&#x72B6;&#x6001;&#x53D1;&#x751F;&#x6539;&#x53D8;&#x65F6;&#x7ED9;&#x6240;&#x6709;&#x6CE8;&#x518C;&#x8FC7;&#x7684;&#x89C2;&#x5BDF;&#x8005;&#x53D1;&#x9001;&#x4FE1;&#x606F; &#x62BD;&#x8C61;&#x89C2;&#x5BDF;&#x8005;&#x89D2;&#x8272; &#x4E3A;&#x6240;&#x6709;&#x5177;&#x4F53;&#x89C2;&#x5BDF;&#x8005;&#x5B9A;&#x4E49;&#x66F4;&#x65B0;&#x63A5;&#x53E3; &#x5177;&#x4F53;&#x89C2;&#x5BDF;&#x8005;&#x89D2;&#x8272; &#x50A8;&#x5B58;&#x4E0E;&#x4E3B;&#x9898;&#x72B6;&#x6001;&#x81EA;&#x6070;&#x7684;&#x72B6;&#x6001;,&#x5B9E;&#x73B0;&#x66F4;&#x65B0;&#x63A5;&#x53E3;,&#x4E0E;&#x4E3B;&#x9898;&#x72B6;&#x6001;&#x534F;&#x8C03; UML&#x7C7B;&#x56FE;&#xFF1A; &#x7279;&#x70B9;&#xFF1A;&#x677E;&#x8026;&#x5408;&#x89C2;&#x5BDF;&#x8005;&#x8BA9;&#x4E3B;&#x9898;&#x5BF9;&#x8C61;&#x597D;&#x89C2;&#x5BDF;&#x8005;&#x4E4B;&#x95F4;&#x677E;&#x8026;&#x5408;&#xFF0C;&#x4ED6;&#x4EEC;&#x53EF;&#x4EE5;&#x76F8;&#x4E92;&#x4EA4;&#x4E92;&#xFF0C;&#x4F46;&#x4E0D;&#x6E05;&#x695A;&#x5F7C;&#x6B64;&#x7684;&#x7EC6;&#x8282;&#x3002; &#x89C2;&#x5BDF;&#x8005;&#x53EA;&#x77E5;&#x9053;&#x89C2;&#x5BDF;&#x8005;&#x5B9E;&#x73B0;&#x4E86;&#x67D0;&#x4E2A;&#x63A5;&#x53E3;&#xFF0C;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x89C2;&#x5BDF;&#x8005;&#x5177;&#x4F53;&#x7C7B;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x54EA;&#x4E9B;&#x7EC6;&#x8282;&#x3002; &#x4EFB;&#x4F55;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x589E;&#x52A0;&#x89C2;&#x5BDF;&#x8005;&#x3002;&#x4E3B;&#x9898;&#x552F;&#x4E00;&#x4F9D;&#x8D56;&#x7684;&#x4E1C;&#x897F;&#x662F;&#x50A8;&#x5B58;&#x89C2;&#x5BDF;&#x8005;&#x5B9E;&#x73B0;&#x7684;&#x5217;&#x8868;&#x3002;&#x6240;&#x4EE5;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x6DFB;&#x52A0;&#x65B0;&#x7684;&#x89C2;&#x5BDF;&#x8005;&#x4E5F;&#x4E0D;&#x4F1A;&#x5BF9;&#x4E3B;&#x9898;&#x9020;&#x6210;&#x5F71;&#x54CD;&#x3002; &#x6709;&#x65B0;&#x7684;&#x89C2;&#x5BDF;&#x8005;&#x52A0;&#x5165;&#x65F6;&#xFF0C;&#x4E3B;&#x9898;&#x4EE3;&#x7801;&#x4E0D;&#x9700;&#x8981;&#x6539;&#x53D8;&#x3002;&#x4E3B;&#x9898;&#x5728;&#x610F;&#x7684;&#x53EA;&#x662F;&#x53D1;&#x9001;&#x901A;&#x77E5;&#x7ED9;&#x89C2;&#x5BDF;&#x8005;&#x3002; &#x53EF;&#x4EE5;&#x72EC;&#x7ACB;&#x7684;&#x4F7F;&#x7528;&#x4E3B;&#x9898;&#x548C;&#x89C2;&#x5BDF;&#x8005;&#xFF0C;&#x56E0;&#x4E3A;&#x4ED6;&#x4EEC;&#x4E4B;&#x95F4;&#x662F;&#x677E;&#x8026;&#x5408;&#x7684;&#x3002; &#x6539;&#x53D8;&#x4E3B;&#x9898;&#x6216;&#x89C2;&#x5BDF;&#x8005;&#x5176;&#x4E00;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x53E6;&#x4E00;&#x65B9;&#xFF0C;&#x53EA;&#x8981;&#x9075;&#x5B88;&#x63A5;&#x53E3;&#x5C31;&#x53EF;&#x4EE5;&#x3002; &#x4E8C;&#x3001;&#x6D77;&#x8FBE;&#x59C6;&#x65AF;&#x4E0E;&#x4ED9;&#x5BAB;&#x4EBA;&#x6C11;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#xFF08;Heimdall&#xFF09;&#x662F;&#x5E0C;&#x8299;&#x7684;&#x54E5;&#x54E5;&#x3002;&#x4ED6;&#x662F;&#x80FD;&#x773C;&#x89C6;&#x4E07;&#x7269;&#x548C;&#x8033;&#x542C;&#x4E00;&#x5207;&#x7684;&#x4ED9;&#x5BAB;&#x5B88;&#x62A4;&#x54E8;&#x5175;&#xFF0C;&#x4ED6;&#x7AD9;&#x5728;&#x5F69;&#x8679;&#x6865;&#x6BD4;&#x5F17;&#x7F57;&#x65AF;&#x7279;&#x4E0A;&#xFF0C;&#x5E76;&#x6CE8;&#x610F;&#x89C2;&#x5BDF;&#x4EFB;&#x4F55;&#x5BF9;&#x4ED9;&#x5BAB;&#x7684;&#x88AD;&#x51FB;&#x3002;&#x4ED6;&#x4F5C;&#x4E3A;&#x4ED9;&#x5BAB;&#x7684;&#x5B88;&#x536B;&#x7AD9;&#x7ACB;&#x7740;&#xFF0C;&#x4FDD;&#x536B;&#x8FD9;&#x4E2A;&#x57CE;&#x5E02;&#x7684;&#x5927;&#x95E8;&#x4F7F;&#x4EFB;&#x4F55;&#x95EF;&#x5165;&#x8005;&#x8FDC;&#x79BB;&#xFF0C;&#x662F;&#x5965;&#x4E01;&#x6700;&#x4E3A;&#x4FE1;&#x4EFB;&#x7684;&#x4EC6;&#x4EBA;&#x4E4B;&#x4E00;&#x3002; &#x5BF9;&#x4E8E;&#x4ED9;&#x5BAB;&#x7684;&#x4F4F;&#x6C11;&#x6765;&#x8BF4;Heimdall&#x662F;&#x4ED6;&#x4EEC;&#x7684;&#x53EF;&#x89C2;&#x5BDF;&#x8005;&#xFF0C;&#x5F53;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x89C2;&#x5BDF;&#x5230;&#x5371;&#x673A;&#xFF0C;&#x4F1A;&#x5411;&#x6240;&#x6709;&#x4ED6;&#x9700;&#x8981;&#x901A;&#x77E5;&#x7684;&#x4EBA;&#x53D1;&#x9001;&#x901A;&#x77E5;&#x3002;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x7528;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x6765;&#x6A21;&#x62DF;&#x6D77;&#x59C6;&#x8FBE;&#x65AF;&#x53D1;&#x73B0;&#x5371;&#x673A;&#x901A;&#x77E5;&#x4ED9;&#x5BAB;&#x4F4F;&#x6C11;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x3002; &#x4E0B;&#x9762;&#x662F;&#x4E00;&#x4E2A;UML&#x56FE;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x6D77;&#x59C6;&#x8FBE;&#x65AF;&#x4E0E;&#x4ED9;&#x5BAB;&#x4EBA;&#x6C11;&#x7684;&#x89E3;&#x8026;&#xFF0C;&#x53BB;&#x9664;&#x5F3A;&#x8026;&#x5408;&#x5173;&#x7CFB;&#xFF0C;&#x540C;&#x65F6;&#x54E8;&#x5175;&#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x7ED9;&#x4ED9;&#x5BAB;&#x6240;&#x6709;&#x54E8;&#x5175;&#x4F7F;&#x7528;&#xFF0C;&#x89C2;&#x5BDF;&#x8005;&#x4EEC;&#x6839;&#x636E;&#x9700;&#x8981;&#x5B9E;&#x73B0;Action&#x63A5;&#x53E3; &#x5B9A;&#x4E49;&#x54E8;&#x5175;&#x63A5;&#x53E3; 1234567891011121314151617181920212223242526272829/** * &#x963F;&#x65AF;&#x52A0;&#x5FB7;&#x6240;&#x6709;&#x7684;&#x54E8;&#x5175;&#x90FD;&#x6709;&#x7684;&#x884C;&#x4E3A; * @author cdream * @date 2018/12/9 */public interface Sentinel { /** * &#x6CE8;&#x518C;&#x9700;&#x8981;&#x901A;&#x77E5;&#x7684;&#x963F;&#x65AF;&#x52A0;&#x5FB7;&#x4EBA; * @param asgardManObserver */ void registerObserver(AsgardManObserver asgardManObserver); /** * &#x79FB;&#x9664;&#x9700;&#x8981;&#x901A;&#x77E5;&#x7684;&#x963F;&#x65AF;&#x52A0;&#x5FB7;&#x4EBA; * @param asgardManObserver */ void removeObserver(AsgardManObserver asgardManObserver); /** * &#x901A;&#x77E5;&#x6240;&#x6709;asgard&#x4EBA; */ void notifyObservers(); /** * &#x89C2;&#x5BDF;&#x5230;&#x4E86;&#x4FE1;&#x606F; * @param message */ void setMessage(String message);} &#x6D77;&#x59C6;&#x8FBE;&#x65AF;&#x5B9E;&#x73B0;&#x54E8;&#x5175;&#x63A5;&#x53E3; 12345678910111213141516171819202122232425262728293031/** * &#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x7C7B;&#xFF0C;&#x4ED6;&#x5411;&#x4ED9;&#x5BAB;&#x5185;&#x7684;&#x4EBA;&#x6C11;&#x6765;&#x4F20;&#x9012;&#x4FE1;&#x606F;&#xFF0C;&#x662F;&#x4ED9;&#x5BAB;&#x5185;&#x4EBA;&#x6C11;&#x7684;&#x770B;&#x89C2;&#x5BDF;&#x8005; * @author cdream * @date 2018/12/9 */public class Heimdall implements Sentinel { // &#x7EF4;&#x7CFB;&#x6240;&#x6709;&#x9700;&#x8981;&#x901A;&#x77E5;&#x7684;&#x4EBA;&#xFF0C;&#x8FD9;&#x662F;&#x89C2;&#x5BDF;&#x8005;&#x548C;&#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x552F;&#x4E00;&#x5173;&#x8054;&#x7684;&#x5730;&#x65B9; private ArrayList&lt;AsgardManObserver&gt; lists=new ArrayList&lt;&gt;(); private String message; @Override public void registerObserver(AsgardManObserver asgardManObserver) { lists.add(asgardManObserver); } @Override public void removeObserver(AsgardManObserver asgardManObserver) { lists.remove(asgardManObserver); } @Override public void notifyObservers() { lists.forEach(asgardMan -&gt; asgardMan.update(message)); } @Override public void setMessage(String message) { this.message = message; System.out.println(&quot;Heimdall:&quot;+message); notifyObservers(); }} AsgardManObserver&#x63A5;&#x53E3;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x60F3;&#x63A5;&#x6536;&#x4FE1;&#x606F;&#x7684;&#x4EBA;&#x90FD;&#x8981;&#x5B9E;&#x73B0; 1234567public interface AsgardManObserver { /** * &#x63A5;&#x6536;&#x6765;&#x81EA;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x66F4;&#x65B0;&#x72B6;&#x6001; * @param message */ void update(String message);} Action&#x63A5;&#x53E3;&#xFF0C;&#x9700;&#x8981;&#x91C7;&#x53D6;&#x884C;&#x52A8;&#x7684;&#x4EBA;&#x5B9E;&#x73B0; 1234public interface Action { // &#x91C7;&#x53D6;&#x884C;&#x52A8; void takeAction();} &#x4E24;&#x4E2A;&#x9700;&#x8981;&#x7528;&#x5230;&#x7684;&#x5E38;&#x91CF; 1234// &#x706D;&#x9738;public static final String THANOS=&quot;Thanos&quot;;// &#x51B0;&#x971C;&#x5DE8;&#x4EBA;public static final String FROST_GIANTS=&quot;Frost Giants&quot;; &#x89C2;&#x5BDF;&#x8005;1:&#x96F7;&#x795E;&#x6258;&#x5C14; 12345678910111213141516171819202122public class Thor implements AsgardManObserver,Action { private String message; @Override public void takeAction() { // &#x5982;&#x679C;&#x662F;&#x706D;&#x9738; if (message!=null &amp;&amp; message.contains(Const.THANOS)){ System.out.println(&quot;Thor:&#x51C6;&#x5907;&#x5BF9;&#x6297;&#x706D;&#x9738;&quot;); // &#x5982;&#x679C;&#x662F;&#x51B0;&#x971C;&#x5DE8;&#x4EBA; }else if(message !=null &amp;&amp; message.contains(Const.FROST_GIANTS)){ System.out.println(&quot;Thor:&#x51C6;&#x5907;&#x5BF9;&#x6297;&#x51B0;&#x971C;&#x5DE8;&#x4EBA;&quot;); }else{ System.out.println(&quot;Thor:&#x6211;&#x6CA1;&#x542C;&#x61C2;&#x4F60;&#x8BF4;&#x4EC0;&#x4E48;&quot;); } } // &#x4E00;&#x65E6;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x53D1;&#x9001;&#x654C;&#x4EBA;&#x88AD;&#x51FB;&#x6D88;&#x606F;&#xFF0C;&#x6258;&#x5C14;&#x7ACB;&#x5373;&#x91C7;&#x53D6;&#x884C;&#x52A8; @Override public void update(String message) { this.message = message; takeAction(); }} &#x89C2;&#x5BDF;&#x8005;2:&#x6D1B;&#x57FA; 123456789101112131415161718192021public class Lokey implements AsgardManObserver,Action { private String message; @Override public void takeAction() { // &#x5982;&#x679C;&#x662F;&#x706D;&#x9738; if (message!=null &amp;&amp; message.contains(Const.THANOS)){ System.out.println(&quot;Lokey:&#x51C6;&#x5907;&#x9003;&#x8D70;&quot;); // &#x5982;&#x679C;&#x662F;&#x7238;&#x7238; }else if(message !=null &amp;&amp; message.contains(Const.FROST_GIANTS)){ System.out.println(&quot;Lokey:&#x51C6;&#x5907;&#x53CD;&#x53DB;&quot;); }else{ System.out.println(&quot;Lokey:&#x6211;&#x7EE7;&#x7EED;&#x505A;&#x6211;&#x7684;&#x95F2;&#x9C7C;~&quot;); } } @Override public void update(String message) { this.message = message; takeAction(); }} &#x89C2;&#x5BDF;&#x8005;3:&#x54B8;&#x9C7C; 12345678public class SaltedFish implements AsgardManObserver { private String message; @Override public void update(String message) { this.message = message; System.out.println(&quot;&#x95F2;&#x9C7C;&#xFF1A;&#x7EE7;&#x7EED;&#x505A;&#x54B8;&#x9C7C;&quot;); }} &#x5F00;&#x59CB;&#x6A21;&#x62DF;&#xFF1A; 123456789101112131415161718192021public class Test { public static void main(String[] args) { // &#x4ED9;&#x5BAB;&#x5EFA;&#x7ACB;&#xFF0C;&#x963F;&#x65AF;&#x52A0;&#x5FB7;&#x4EBA;&#x8BDE;&#x751F; Sentinel heimdall = new Heimdall(); AsgardManObserver thor = new Thor(); AsgardManObserver lokey = new Lokey(); AsgardManObserver saltedFish = new SaltedFish(); // &#x4E09;&#x4E2A;&#x4EBA;&#x90FD;&#x53BB;&#x6D77;&#x5C14;&#x8FBE;&#x59C6;&#x90A3;&#x91CC;&#x53BB;&#x6CE8;&#x518C; heimdall.registerObserver(thor); heimdall.registerObserver(lokey); heimdall.registerObserver(saltedFish); // &#x51B0;&#x971C;&#x5DE8;&#x4EBA;&#x6765;&#x88AD; heimdall.setMessage(Const.FROST_GIANTS + &quot;&#x6765;&#x88AD;&quot;); // &#x6D1B;&#x57FA;&#x53DB;&#x53D8;&#xFF0C;&#x6D77;&#x8FBE;&#x59C6;&#x65AF;&#x4E0D;&#x518D;&#x901A;&#x77E5;&#x6D1B;&#x57FA; heimdall.removeObserver(lokey); System.out.println(&quot;-------------&quot;); //&#x706D;&#x9738;&#x6765;&#x88AD; heimdall.setMessage(Const.THANOS + &quot;&#x6765;&#x88AD;&quot;); }} &#x7ED3;&#x679C;&#xFF1A; 12345678Heimdall:Frost Giants&#x6765;&#x88AD;Thor:&#x51C6;&#x5907;&#x5BF9;&#x6297;&#x51B0;&#x971C;&#x5DE8;&#x4EBA;Lokey:&#x51C6;&#x5907;&#x53CD;&#x53DB;&#x95F2;&#x9C7C;&#xFF1A;&#x7EE7;&#x7EED;&#x505A;&#x54B8;&#x9C7C;-------------Heimdall:Thanos&#x6765;&#x88AD;Thor:&#x51C6;&#x5907;&#x5BF9;&#x6297;&#x706D;&#x9738;&#x95F2;&#x9C7C;&#xFF1A;&#x7EE7;&#x7EED;&#x505A;&#x54B8;&#x9C7C; &#x5BF9;&#x6297;&#x51B0;&#x971C;&#x5DE8;&#x4EBA;&#x4E00;&#x6218;&#xFF0C;&#x6D1B;&#x57FA;&#x53DB;&#x53D8;&#xFF0C;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x4E0D;&#x5728;&#x5411;&#x5176;&#x53D1;&#x9001;&#x901A;&#x77E5;~ &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x7684;&#x63A8;&#x6A21;&#x5F0F;&#xFF0C;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x4E00;&#x65E6;&#x5F97;&#x5230;&#x654C;&#x4EBA;&#x6765;&#x88AD;&#x7684;&#x6D88;&#x606F;&#x5C31;&#x4F1A;&#x901A;&#x77E5;&#x4ED6;&#x6240;&#x7EF4;&#x7CFB;&#x7684;&#x89C2;&#x5BDF;&#x8005;&#xFF0C;&#x6D77;&#x5C14;&#x8FBE;&#x59C6;&#x4E0E;&#x4ED9;&#x5BAB;&#x4F4F;&#x6C11;&#x662F;&#x677E;&#x8026;&#x5408;&#x7684;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x72EC;&#x7ACB;&#x884C;&#x52A8;&#xFF0C;&#x53C8;&#x4E0D;&#x7528;&#x5173;&#x6CE8;&#x5404;&#x81EA;&#x7684;&#x7EC6;&#x8282;&#xFF08;&#x6240;&#x4EE5;&#x4ED6;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x6D1B;&#x57FA;&#x5F97;&#x5230;&#x6D88;&#x606F;&#x540E;&#x4F1A;&#x505A;&#x4EC0;&#x4E48;:&#xFF09;&#xFF09;&#xFF0C;&#x65B0;&#x6765;&#x4E86;&#x89C2;&#x5BDF;&#x8005;&#x76F4;&#x63A5;&#x7EF4;&#x7CFB;&#x5230;list&#x91CC;&#x6269;&#x5C55;&#x6027;&#x5F3A;&#x3002; &#x62C9;&#x6A21;&#x5F0F;&#xFF1A;&#x5C06;&#x6574;&#x4E2A;&#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x5BF9;&#x8C61;&#x5F15;&#x7528;&#x9001;&#x7ED9;&#x89C2;&#x5BDF;&#x8005;&#xFF0C;&#x7531;&#x89C2;&#x5BDF;&#x8005;&#x83B7;&#x53D6;&#x9700;&#x8981;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x5982;&#x4E0B;&#xFF0C;&#x6CE8;&#x610F;notifyObservers&#x65B9;&#x6CD5;&#x7684;&#x4FEE;&#x6539; 1234567891011121314151617181920212223242526272829303132/** * &#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x7C7B;&#xFF0C;&#x4ED6;&#x5411;&#x4ED9;&#x5BAB;&#x5185;&#x7684;&#x4EBA;&#x6C11;&#x6765;&#x4F20;&#x9012;&#x4FE1;&#x606F;&#xFF0C;&#x662F;&#x4ED9;&#x5BAB;&#x5185;&#x4EBA;&#x6C11;&#x7684;&#x770B;&#x89C2;&#x5BDF;&#x8005; * @author cdream * @date 2018/12/9 */public class Heimdall implements Sentinel { // &#x7EF4;&#x7CFB;&#x6240;&#x6709;&#x9700;&#x8981;&#x901A;&#x77E5;&#x7684;&#x4EBA;&#xFF0C;&#x8FD9;&#x662F;&#x89C2;&#x5BDF;&#x8005;&#x548C;&#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x552F;&#x4E00;&#x5173;&#x8054;&#x7684;&#x5730;&#x65B9; private ArrayList&lt;AsgardManObserver&gt; lists=new ArrayList&lt;&gt;(); private String message; @Override public void registerObserver(AsgardManObserver asgardManObserver) { lists.add(asgardManObserver); } @Override public void removeObserver(AsgardManObserver asgardManObserver) { lists.remove(asgardManObserver); } @Override public void notifyObservers() { // &#x53EA;&#x8981;&#x5728;&#x904D;&#x5386;&#x8FD9;&#x91CC;&#x4F20;&#x9012;this&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x89C2;&#x5BDF;&#x8005;&#x7684;update&#x65B9;&#x6CD5;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x4E00;&#x4E0B; lists.forEach(asgardMan -&gt; asgardMan.update(this)); } @Override public void setMessage(String message) { this.message = message; System.out.println(&quot;Heimdall:&quot;+message); notifyObservers(); }} &#x63A8;&#x6A21;&#x5F0F;&#x4E0E;&#x62C9;&#x6A21;&#x5F0F;1.&#x63A8;&#x6A21;&#x578B;&#x662F;&#x5047;&#x5B9A;&#x4E3B;&#x9898;&#x5BF9;&#x8C61;&#x77E5;&#x9053;&#x89C2;&#x5BDF;&#x8005;&#x9700;&#x8981;&#x7684;&#x6570;&#x636E;&#xFF1B;&#x800C;&#x62C9;&#x6A21;&#x578B;&#x662F;&#x4E3B;&#x9898;&#x5BF9;&#x8C61;&#x4E0D;&#x77E5;&#x9053;&#x89C2;&#x5BDF;&#x8005;&#x5177;&#x4F53;&#x9700;&#x8981;&#x4EC0;&#x4E48;&#x6570;&#x636E;&#xFF0C;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5E72;&#x8106;&#x628A;&#x81EA;&#x8EAB;&#x4F20;&#x9012;&#x7ED9;&#x89C2;&#x5BDF;&#x8005;&#xFF0C;&#x8BA9;&#x89C2;&#x5BDF;&#x8005;&#x81EA;&#x5DF1;&#x53BB;&#x6309;&#x9700;&#x8981;&#x53D6;&#x503C;&#x3002;2.&#x63A8;&#x6A21;&#x578B;&#x53EF;&#x80FD;&#x4F1A;&#x4F7F;&#x5F97;&#x89C2;&#x5BDF;&#x8005;&#x5BF9;&#x8C61;&#x96BE;&#x4EE5;&#x590D;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x89C2;&#x5BDF;&#x8005;&#x7684;update()&#x65B9;&#x6CD5;&#x662F;&#x6309;&#x9700;&#x8981;&#x5B9A;&#x4E49;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x53EF;&#x80FD;&#x65E0;&#x6CD5;&#x517C;&#x987E;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x7684;&#x4F7F;&#x7528;&#x60C5;&#x51B5;&#x3002;&#x8FD9;&#x5C31;&#x610F;&#x5473;&#x7740;&#x51FA;&#x73B0;&#x65B0;&#x60C5;&#x51B5;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x53EF;&#x80FD;&#x63D0;&#x4F9B;&#x65B0;&#x7684;update()&#x65B9;&#x6CD5;&#xFF0C;&#x6216;&#x8005;&#x662F;&#x5E72;&#x8106;&#x91CD;&#x65B0;&#x5B9E;&#x73B0;&#x89C2;&#x5BDF;&#x8005;&#xFF1B;&#x800C;&#x62C9;&#x6A21;&#x578B;&#x5C31;&#x4E0D;&#x4F1A;&#x9020;&#x6210;&#x8FD9;&#x6837;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x56E0;&#x4E3A;&#x62C9;&#x6A21;&#x578B;&#x4E0B;&#xFF0C;update()&#x65B9;&#x6CD5;&#x7684;&#x53C2;&#x6570;&#x662F;&#x4E3B;&#x9898;&#x5BF9;&#x8C61;&#x672C;&#x8EAB;&#xFF0C;&#x8FD9;&#x57FA;&#x672C;&#x4E0A;&#x662F;&#x4E3B;&#x9898;&#x5BF9;&#x8C61;&#x80FD;&#x4F20;&#x9012;&#x7684;&#x6700;&#x5927;&#x6570;&#x636E;&#x96C6;&#x5408;&#x4E86;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x53EF;&#x4EE5;&#x9002;&#x5E94;&#x5404;&#x79CD;&#x60C5;&#x51B5;&#x7684;&#x9700;&#x8981;&#x3002;3.&#x62C9;&#x6A21;&#x5F0F;&#x4F1A;&#x4F7F;&#x89C2;&#x5BDF;&#x8005;&#x83B7;&#x53D6;&#x6240;&#x6709;&#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x4FE1;&#x606F;&#xFF0C;&#x540C;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x591A;&#x6B21;&#x83B7;&#x53D6;&#x624D;&#x80FD;&#x4F1A;&#x5F97;&#x5230;&#x9700;&#x8981;&#x7684;&#x6240;&#x6709;&#x4FE1;&#x606F;4.&#x4F46;&#x662F;&#x60F3;&#x8C61;&#x5176;&#x5B9E;&#xFF0C;&#x62C9;&#x6A21;&#x5F0F;&#x4E5F;&#x662F;&#x63A8;&#x6A21;&#x5F0F;&#x7684;&#x4E00;&#x79CD;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x662F;&#x63A8;&#x9001;&#x4E2A;&#x5F15;&#x7528;&#x8FC7;&#x53BB;&#xFF0C;&#x91CC;&#x9762;&#x5305;&#x542B;&#x4E86;&#x66F4;&#x591A;&#x7684;&#x4FE1;&#x606F; &#x4E09;&#x3001;jdk&#x5BF9;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x7684;&#x652F;&#x6301;jdk&#x672C;&#x8EAB;&#x63D0;&#x4F9B;&#x4E86;&#x5BF9;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x5E76;&#x4E14;&#x652F;&#x6301;&#x63A8;&#x3001;&#x62C9;&#x4E24;&#x79CD;&#x65B9;&#x6848;&#x3002;&#x4E3B;&#x8981;&#x7C7B;&#x6216;&#x63A5;&#x53E3;&#x662F;java.util.Observable(&#x62BD;&#x8C61;&#x7C7B;)&#x548C;java.util.Observer&#xFF08;&#x63A5;&#x53E3;&#xFF09; &#x8FD9;&#x91CC;&#x5C31;&#x4E3E;&#x4E2A;Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x7684;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x5427;&#xFF0C;&#x5929;&#x6C14;&#x6570;&#x636E;&#x548C;&#x5929;&#x6C14;&#x663E;&#x793A;&#x5668;&#x3002;&#x4E0D;&#x540C;&#x7684;&#x5929;&#x6C14;&#x663E;&#x793A;&#x5668;&#x4F1A;&#x663E;&#x793A;&#x4E0D;&#x540C;&#x7684;&#x4FE1;&#x606F;&#x3002; &#x7528;&#x6765;&#x50A8;&#x5B58;&#x5929;&#x6C14;&#x4FE1;&#x606F;&#x7684;&#x5B9E;&#x4F53;&#x7C7B; 1234567891011121314151617181920212223242526272829303132333435363738394041public class WeatherPojo { // &#x6E29;&#x5EA6; private float temperature; // &#x6E7F;&#x5EA6; private float humidity; // &#x6C14;&#x538B; private float pressure; public WeatherPojo() { } public WeatherPojo(float temperature, float humidity, float pressure) { this.temperature = temperature; this.humidity = humidity; this.pressure = pressure; } public float getTemperature() { return temperature; } public void setTemperature(float temperature) { this.temperature = temperature; } public float getHumidity() { return humidity; } public void setHumidity(float humidity) { this.humidity = humidity; } public float getPressure() { return pressure; } public void setPressure(float pressure) { this.pressure = pressure; }} &#x88AB;&#x89C2;&#x5BDF;&#x8005;&#xFF1A;&#x5929;&#x6C14;&#x6570;&#x636E; 12345678910111213141516171819202122232425262728293031323334public class WeatherData extends Observable { private float temperature; private float humidity; private float pressure; public WeatherData() {} public void measurementsChanged(){ // &#x8FD9;&#x4E2A;&#x662F;observable&#x4E2D;&#x7684;&#x6807;&#x5FD7;&#xFF0C;&#x4F7F;&#x7C7B;&#x66F4;&#x52A0;&#x7075;&#x6D3B; // &#x60F3;&#x8C61;&#x5929;&#x6C14;&#x53D8;&#x4E2A;0.01&#x5EA6;&#x4F60;&#x90FD;&#x63D0;&#x9192;&#x662F;&#x5427;&#x662F;&#x70E6;&#x6B7B;&#x4E86; // &#x8FD9;&#x91CC;&#x8FDB;&#x884C;&#x9650;&#x5236;&#xFF0C;&#x8FBE;&#x5230;&#x4E00;&#x5B9A;&#x6761;&#x4EF6;&#x518D;&#x53D1;&#x9001;&#x901A;&#x77E5; setChanged(); notifyObservers(); } public void updateData(WeatherPojo pojo){ this.temperature = pojo.getTemperature(); this.humidity = pojo.getHumidity(); this.pressure = pojo.getPressure(); // &#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x6570;&#x636E;&#x53D1;&#x751F;&#x4E86;&#x6539;&#x53D8;&#xFF0C;&#x63D0;&#x9192;&#x89C2;&#x5BDF;&#x8005; measurementsChanged(); } public float getTemperature() { return temperature; } public float getHumidity() { return humidity; } public float getPressure() { return pressure; }} &#x89C2;&#x5BDF;&#x8005;&#xFF1A;&#x5929;&#x6C14;&#x663E;&#x793A;&#x677F; 12345678910111213141516171819202122232425public class CurrentDisplay implements Observer { Observable observable; private float temperature; private float humidity; public CurrentDisplay(Observable observable) { this.observable = observable; observable.addObserver(this); } public void display(){ System.out.println(&quot;&#x6E29;&#x5EA6;&#x662F;&#xFF1A;&quot;+temperature+&quot;; &#x6E7F;&#x5EA6;&#x662F;&#xFF1A;&quot;+humidity); } // &#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x524D;&#x9762;&#x662F;&#x4F20;&#x9012;&#x89C2;&#x5BDF;&#x8005;&#x5BF9;&#x8C61; // &#x540E;&#x9762;&#x53EF;&#x4EE5;&#x4F20;&#x9012;&#x9700;&#x8981;&#x7684;&#x53C2;&#x6570;,&#x662F;notifyObservers()&#x65B9;&#x6CD5;&#x4E2D;&#x7684;&#x53C2;&#x6570; // &#x8FD9;&#x79CD;&#x5C31;&#x662F;&#x53C2;&#x6570;&#x548C;&#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x996E;&#x7528;&#x90FD;&#x4F20;&#x8FC7;&#x53BB; @Override public void update(Observable o, Object arg) { if (o instanceof WeatherData){ WeatherData weatherData = (WeatherData) o; this.temperature = weatherData.getTemperature(); this.humidity = weatherData.getHumidity(); display(); } }} jdk&#x5BF9;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x7684;&#x5B9E;&#x73B0;&#x9700;&#x8981;&#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x7EE7;&#x627F;Observable&#xFF0C;&#x5BF9;&#x4EE3;&#x7801;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x4FB5;&#x5165;&#xFF0C;&#x4F8B;&#x5982;&#x5982;&#x679C;&#x6D77;&#x59C6;&#x8FBE;&#x5C14;&#x8FD8;&#x8981;&#x7EE7;&#x627F;&#x963F;&#x65AF;&#x52A0;&#x5FB7;&#x4EBA;&#x8FD9;&#x4E2A;&#x7C7B;&#xFF0C;&#x90A3;&#x5C31;&#x9700;&#x8981;&#x6211;&#x4EEC;&#x624B;&#x52A8;&#x6765;&#x5B9E;&#x73B0;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x4E86;&#x3002; &#x56DB;&#x3001;&#x603B;&#x7ED3;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x662F;&#x6BD4;&#x8F83;&#x5E38;&#x89C1;&#x7684;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#xFF0C;&#x6211;&#x4EEC;&#x5E38;&#x89C1;&#x7684;MVC&#x5C31;&#x662F;&#x6807;&#x51C6;&#x7684;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#xFF0C;&#x5982;&#x679C;&#x611F;&#x5174;&#x8DA3;&#x770B;&#x4EE5;google&#x201D;&#x4F7F;&#x7528;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#x5B9E;&#x73B0;mvc&#x201D;&#x3002;&#x6B64;&#x5916;&#x5411;&#x6D88;&#x606F;&#x961F;&#x5217;&#x7684;&#x53D1;&#x5E03;&#x8BA2;&#x9605;&#x6A21;&#x5F0F;&#x4E5F;&#x662F;&#x4F7F;&#x7528;&#x7684;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#xFF0C;&#x800C;&#x4E14;&#x662F;&#x5F02;&#x6B65;&#x7684;&#x6027;&#x80FD;&#x66F4;&#x597D;&#xFF0C;&#x50CF;&#x6211;&#x4EEC;&#x4E0A;&#x9762;&#x5B9E;&#x73B0;&#x7684;&#x8FD9;&#x79CD;&#x7B80;&#x5355;&#x904D;&#x5386;&#xFF0C;&#x5982;&#x679C;&#x89C2;&#x5BDF;&#x8005;&#x5B9E;&#x73B0;&#x590D;&#x6742;&#x90A3;&#x6027;&#x80FD;&#x770B;&#x5C31;&#x4F1A;&#x53D7;&#x5230;&#x5F71;&#x54CD;&#xFF0C;&#x6BD5;&#x7ADF;&#x8981;&#x7B49;&#x5F85;&#x4E00;&#x4E2A;&#x89C2;&#x5BDF;&#x8005;&#x6267;&#x884C;&#x5B8C;&#x624D;&#x80FD;&#x901A;&#x77E5;&#x4E0B;&#x4E00;&#x4E2A;&#x89C2;&#x5BDF;&#x8005;&#x3002; &#x672C;&#x6587;&#x9996;&#x53D1;&#x4E8E;cdream&#x4E2A;&#x4EBA;&#x535A;&#x5BA2; &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#xFF01; &#x53C2;&#x8003;&#x8D44;&#x6599;&#xFF1A; Head First &#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;,Eric Freeman &amp;Elisabeth Freeman with Kathy Sierra &amp; Bert Bates java&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x7CBE;&#x8BB2; Debug &#x65B9;&#x5F0F;+&#x5185;&#x5B58;&#x5206;&#x6790; &#x300A;JAVA&#x4E0E;&#x6A21;&#x5F0F;&#x300B;&#x4E4B;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring源码分析之IoC容器初始化]]></title>
    <url>%2F2018%2F11%2F27%2Fspringioc01%2F</url>
    <content type="text"><![CDATA[&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;java&#x7A0B;&#x5E8F;&#x5458;&#xFF0C;&#x4FDD;&#x5B88;&#x4F30;&#x8BA1;&#x4E00;&#x5E74;&#x91CC;&#x4E5F;&#x90FD;&#x6709;300&#x5929;&#x8981;&#x548C;Spring&#x6709;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;~~&#x50CF;&#x6211;&#x8FD9;&#x79CD;&#x6015;&#x662F;&#x6BCF;&#x5929;&#x90FD;&#x8981;&#x64B8;&#x64B8;Spring&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x6B21;&#x4E5F;&#x8981;&#x505A;&#x4E2A;&#x6DF1;&#x5165;&#x4E86;&#x89E3;&#xFF01;&#x8FD9;&#x6B21;&#x5C31;&#x6765;&#x770B;&#x770B;Spring&#x662F;&#x600E;&#x4E48;&#x521D;&#x59CB;&#x5316;IoC&#x5BB9;&#x5668;&#x7684;&#x1F604; &#x6CE8;&#xFF1A;&#x9605;&#x8BFB;&#x672C;&#x6587;&#x65F6;&#x4E00;&#x5B9A;&#x8981;&#x5728;IDE&#x8FDB;&#x884C;&#x8DF3;&#x8F6C; &#x6211;&#x4EEC;&#x90FD;&#x662F;&#x77E5;&#x9053;Spring&#x4E3A;&#x4F01;&#x4E1A;&#x7EA7;&#x5E94;&#x7528;&#x63D0;&#x4F9B;&#x4E86;&#x4E30;&#x5BCC;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x800C;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x5E95;&#x5C42;&#x90FD;&#x4F9D;&#x8D56;&#x4E8E;&#x5E95;&#x5C42;&#x6700;&#x6838;&#x5FC3;&#x7684;&#x4E24;&#x79CD;&#x7279;&#x6027;IOC&#x548C;AOP&#x3002; IOC&#x5B9E;&#x73B0;&#x91CC;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;IOC&#x5BB9;&#x5668;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x662F;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#xFF0C;&#x7531;&#x4E8E;&#x4E24;&#x90E8;&#x5206;&#x662F;&#x76F8;&#x5BF9;&#x72EC;&#x7ACB;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x6240;&#x4EE5;&#x5206;&#x6210;&#x4E0D;&#x540C;&#x6587;&#x7AE0;&#x8BB2;&#x89E3;&#xFF0C;&#x672C;&#x7BC7;&#x4E3B;&#x8981;&#x8BB2;&#x8FF0;IOC&#x5BB9;&#x5668;&#x7684;&#x521D;&#x59CB;&#x5316;&#x3002; &#x4E00;&#x3001;IoC&#x7684;&#x6982;&#x5FF5; &#x63A7;&#x5236;&#x53CD;&#x8F6C;&#xFF08;Inversion of Control&#xFF0C;&#x7F29;&#x5199;&#x4E3A;IoC&#xFF09;&#xFF0C;&#x662F;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#x4E2D;&#x7684;&#x4E00;&#x79CD;&#x8BBE;&#x8BA1;&#x539F;&#x5219;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x51CF;&#x4F4E;&#x8BA1;&#x7B97;&#x673A;&#x4EE3;&#x7801;&#x4E4B;&#x95F4;&#x7684;&#x8026;&#x5408;&#x5EA6;&#x3002;&#x5176;&#x4E2D;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x65B9;&#x5F0F;&#x53EB;&#x505A;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#xFF08;Dependency Injection&#xFF0C;&#x7B80;&#x79F0;DI&#xFF09;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#x53EB;&#x201C;&#x4F9D;&#x8D56;&#x67E5;&#x627E;&#x201D;&#xFF08;Dependency Lookup&#xFF09;&#x3002;&#x901A;&#x8FC7;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#xFF0C;&#x5BF9;&#x8C61;&#x5728;&#x88AB;&#x521B;&#x5EFA;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x7531;&#x4E00;&#x4E2A;&#x8C03;&#x63A7;&#x7CFB;&#x7EDF;&#x5185;&#x6240;&#x6709;&#x5BF9;&#x8C61;&#x7684;&#x5916;&#x754C;&#x5B9E;&#x4F53;&#xFF0C;&#x5C06;&#x5176;&#x6240;&#x4F9D;&#x8D56;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x5F15;&#x7528;&#x4F20;&#x9012;&#x7ED9;&#x5B83;&#x3002;&#x4E5F;&#x53EF;&#x4EE5;&#x8BF4;&#xFF0C;&#x4F9D;&#x8D56;&#x88AB;&#x6CE8;&#x5165;&#x5230;&#x5BF9;&#x8C61;&#x4E2D;&#x3002; &#x4E0A;&#x9762;&#x8FD9;&#x4E2A;&#x6982;&#x5FF5;&#x662F;&#x6765;&#x81EA;&#x7EF4;&#x57FA;&#x767E;&#x79D1;&#xFF0C;&#x5728;Expert Spring MVC and Web Flow&#x548C;Expert One-on-One J2EE without EJB&#x7B49;&#x4E66;&#x4E2D;&#x90FD;&#x4E5F;&#x662F;&#x5C06;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#x770B;&#x4F5C;&#x662F;IoC&#x7684;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#x3002;&#x4E0D;&#x8FC7;&#x6709;&#x4E9B;&#x5730;&#x65B9;&#x4F1A;&#x628A;IoC&#x548C;DI&#x770B;&#x6210;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF08;&#x4F8B;&#x5982;Spring in Action&#x3001;Spring&#x63ED;&#x5BC6;&#x7B49;&#x4E66;&#xFF09;&#xFF0C;&#x4E0D;&#x8FC7;&#x6CA1;&#x5173;&#x7CFB;&#xFF0C;&#x4E0D;&#x5F71;&#x54CD;&#x6211;&#x4EEC;&#x7406;&#x89E3;&#x5C31;&#x53EF;&#x4EE5;&#x3002; &#x767D;&#x8BDD;&#x7248; A&#x7C7B;&#x7684;&#x6B63;&#x5E38;&#x7684;&#x8FD0;&#x884C;&#x9700;&#x8981;B&#x7C7B; &#x6CA1;&#x6709;IoC&#x4E4B;&#x524D;&#x6211;&#x4EEC;&#x5728;&#x4F7F;&#x7528;A&#x7C7B;&#x7684;&#x67D0;&#x4E2A;&#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x603B;&#x4F1A;&#x4F9D;&#x8D56;&#x4E8E;B&#x7C7B;&#x7684;&#x4E00;&#x4E9B;&#x529F;&#x80FD;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5C31;&#x8981;&#x53BB;new&#x4E2A;B&#x5BF9;&#x8C61;&#xFF0C;&#x6709;&#x65F6;&#x8FD8;&#x8981;&#x8003;&#x8651;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x9500;&#x6BC1;&#xFF0C;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#x5355;&#x4F8B;&#x6A21;&#x5F0F;&#x7B49;&#x7B49;&#xFF0C;&#x7C7B;&#x5C11;&#x4E86;&#x8FD8;&#x597D;&#x7BA1;&#x7406;&#xFF0C;&#x8FD9;&#x8981;&#x662F;&#x591A;&#x8D77;&#x6765;&#x771F;&#x662F;&#x518D;&#x806A;&#x660E;&#x7684;&#x4EBA;&#x6015;&#x4E5F;&#x662F;&#x8981;&#x5341;&#x4E2A;&#x5934;&#x4E5D;&#x4E2A;&#x5927;&#x4E86;&#xFF0C; &#x800C;&#x4E14;A&#x3001;B&#x4E4B;&#x95F4;&#x7684;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x4F7F;&#x5404;&#x4EE3;&#x7801;&#x7D27;&#x5BC6;&#x8026;&#x5408;&#xFF0C;&#x4E00;&#x65E6;B&#x7C7B;&#x7684;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#xFF0C;&#x6216;&#x8005;&#x67D0;&#x5929;&#x5E72;&#x8106;&#x4E0D;&#x7528;B&#x4E86;&#x7528;C&#xFF0C;&#x90A3;&#x662F;&#x4E0D;&#x662F;A&#x7C7B;&#x91CC;&#x7684;new B()&#x5168;&#x5F97;&#x6362;&#x6210;new C()&#xFF1F;&#x60F3;&#x8C61;&#x90FD;&#x89C9;&#x5F97;&#x7D2F;&#x2026; &#x6709;&#x4E86;IoC&#x4E4B;&#x540E;&#xFF0C;&#x5BF9;&#x8C61;&#x521B;&#x5EFA;&#x90FD;&#x4EA4;&#x7ED9;&#x7B2C;&#x4E09;&#x65B9;&#x5BB9;&#x5668;&#x5904;&#x7406;&#xFF0C;A&#x4E2D;&#x7684;B&#x901A;&#x8FC7;&#x6CE8;&#x5165;&#x6765;&#x5B8C;&#x6210;&#xFF0C;B&#x51FA;&#x95EE;&#x9898;&#x4E86;&#xFF0C;&#x6216;&#x8005;&#x9700;&#x8981;&#x6362;&#x6210;C&#x4E86;&#xFF0C;&#x53EA;&#x8981;&#x628A;&#x6CE8;&#x5165;&#x7684;B&#x6362;&#x6210;C&#x5C31;&#x53EF;&#x4EE5;(&#x73B0;&#x5B9E;&#x5F00;&#x53D1;&#x4E2D;B&#x3001;C&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x76F8;&#x540C;&#x7684;&#x63A5;&#x53E3;&#x89E3;&#x51B3;~&#x6240;&#x4EE5;&#x554A;&#xFF0C;Spring&#x662F;&#x9762;&#x5411;&#x63A5;&#x53E3;&#x7F16;&#x7A0B;&#x9E2D;)&#x3002; TipsExpert One-on-One J2EE without EJB&#x8FD9;&#x672C;&#x4E66;&#x662F;spring&#x7238;&#x7238;Rod Johnson&#x5199;&#x7684;&#xFF0C;&#x8FDB;&#x5165;Spring&#x7684;BeanFactory&#x7C7B;&#x91CC;&#x9762;&#x770B;&#x770B;&#x4F5C;&#x8005;&#x5C31;&#x662F;&#x4ED6;&#xFF0C;&#x54C8;&#x54C8;&#xFF01;&#x6D45;&#x8C08;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x4E0E;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#xFF1A;&#x8FD9;&#x662F;&#x6211;&#x770B;&#x8FC7;&#x6700;&#x597D;&#x7684;&#x4E00;&#x7BC7;&#x5BF9;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x7684;&#x89E3;&#x91CA;&#xFF0C;&#x5F3A;&#x70C8;&#x63A8;&#x8350;&#xFF01; &#x4E8C;&#x3001;IoC&#x5BB9;&#x5668;&#x521D;&#x59CB;&#x5316;&#x9884;&#x5907;&#x5185;&#x5BB9;&#x672C;&#x8282;&#x53EA;&#x8BB2;&#x89E3;IoC&#x5BB9;&#x5668;&#x7684;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5176;&#x4E2D;&#x5305;&#x62EC;&#x521B;&#x5EFA;&#x5BB9;&#x5668;&#x548C;&#x5C06;bean&#x88C5;&#x5165;&#x5230;&#x5BB9;&#x5668;&#x4E2D;&#xFF0C;&#x4E0B;&#x9762;&#x8FD9;&#x4E09;&#x4EF6;&#x4E8B;&#x662F;&#x8BE5;&#x90E8;&#x5206;&#x7684;&#x6838;&#x5FC3;&#xFF1A; BeanDefinition&#x7684;Resource&#x5B9A;&#x4F4D;BeanDefinition&#x7684;&#x8F7D;&#x5165;&#x548C;&#x89E3;&#x6790;BeanDefinition&#x5728;&#x5BB9;&#x5668;&#x4E2D;&#x7684;&#x6CE8;&#x518C; &#x56E0;&#x4E3A;Spring&#x7684;IoC&#x5BB9;&#x5668;&#x5B9E;&#x73B0;&#x592A;&#x590D;&#x6742;&#x4E86;&#xFF0C;&#x5404;&#x79CD;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x8C03;&#x7528;&#x5F88;&#x5BB9;&#x6613;&#x5C31;&#x8BA9;&#x6211;&#x4EEC;&#x9677;&#x5165;&#x5230;&#x7EC6;&#x8282;&#x4E4B;&#x4E2D;&#xFF0C;&#x7ED3;&#x679C;&#x5C31;&#x8D70;&#x7684;&#x592A;&#x8FDC;&#x5FD8;&#x8BB0;&#x4E86;&#x4E3A;&#x5565;&#x8981;&#x51FA;&#x53D1;&#x4E86;&#x1F613;&#xFF0C;&#x672C;&#x6587;&#x4E3B;&#x8981;&#x5C06;&#x8FF0;&#x5BB9;&#x5668;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x4E09;&#x4EF6;&#x4E8B;&#x3002; &#x5148;&#x4E86;&#x89E3;&#x51E0;&#x4E2A;&#x6982;&#x5FF5;&#xFF1A; BeanFactory&#xFF1A;&#x8FD9;&#x662F;IOC&#x5BB9;&#x5668;&#x7684;&#x63A5;&#x53E3;&#x5B9A;&#x4E49;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;IoC&#x6700;&#x57FA;&#x672C;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x5982;&#x679C;&#x8BF4;&#x5BB9;&#x5668;&#x662F;&#x4E2A;&#x6C7D;&#x8F66;&#x5DE5;&#x5382;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x5C31;&#x89C4;&#x5B9A;&#x4E86;&#x6C7D;&#x8F66;&#x5DE5;&#x5382;&#x6700;&#x57FA;&#x672C;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x80FD;&#x50A8;&#x5B58;&#x96F6;&#x4EF6;&#xFF0C;&#x80FD;&#x7EC4;&#x88C5;&#x6C7D;&#x8F66;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public interface BeanFactory { /** * &#x4F7F;&#x7528;&#x5BB9;&#x5668;&#x83B7;&#x53D6;bean&#x65F6;&#xFF0C;&#x6DFB;&#x52A0;&#x8F6C;&#x4E49;&#x81EA;&#x7B26;&amp;&#x53EF;&#x4EE5;&#x83B7;&#x53D6;&#x5230;FactoryBean&#x672C;&#x8EAB;&#x800C;&#x5427;&#x662F;Factory&#x4EA7;&#x751F;&#x7684;&#x5BF9;&#x8C61; */ String FACTORY_BEAN_PREFIX = &quot;&amp;&quot;; /** * &#x901A;&#x8FC7;bean&#x7684;&#x540D;&#x5B57;&#x6765;&#x83B7;&#x53D6;bean */ Object getBean(String name) throws BeansException; /** * &#x901A;&#x8FC7;bean&#x7684;&#x7C7B;&#x578B;&#x548C;&#x7C7B;&#x578B;&#x6765;&#x83B7;&#x53D6;bean */ &lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType) throws BeansException; /** * &#x901A;&#x8FC7;bean&#x7684;&#x7C7B;&#x578B;&#x6765;&#x83B7;&#x53D6;bean */ &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) throws BeansException; /** * &#x901A;&#x8FC7;&#x540D;&#x5B57;&#x548C;&#x53C2;&#x6570;&#x6765;&#x83B7;&#x53D6;bean */ Object getBean(String name, Object... args) throws BeansException; /** * &#x662F;&#x5426;&#x5305;&#x542B;&#x540D;&#x5B57;&#x4E3A;name&#x7684;bean */ boolean containsBean(String name); /** * &#x662F;&#x5426;&#x5355;&#x4F8B; */ boolean isSingleton(String name) throws NoSuchBeanDefinitionException; /** * &#x662F;&#x5426;&#x539F;&#x578B; */ boolean isPrototype(String name) throws NoSuchBeanDefinitionException; /** * &#x540D;&#x5B57;&#x4E3A;name&#x7684;bean&#x662F;&#x5426;&#x662F;targetType&#x7C7B;&#x578B; */ boolean isTypeMatch(String name, Class&lt;?&gt; targetType) throws NoSuchBeanDefinitionException; /** * &#x83B7;&#x53D6;&#x540D;&#x5B57;&#x4E3A;name&#x7684;bean&#x7C7B;&#x578B; */ Class&lt;?&gt; getType(String name) throws NoSuchBeanDefinitionException; /** * &#x83B7;&#x53D6;&#x540D;&#x5B57;&#x4E3A;name&#x7684;bean&#x7684;&#x522B;&#x540D;&#x5B57;&#x96C6;&#x5408; */ String[] getAliases(String name);} ApplicationContext&#xFF1A;&#x5347;&#x7EA7;&#x7248;&#x6C7D;&#x8F66;&#x5382;&#xFF0C;&#x9664;&#x4E86;&#x4E0A;&#x9762;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x8FD8;&#x63D0;&#x4F9B;&#x5F88;&#x591A;&#x4EBA;&#x6027;&#x5316;&#x7684;&#x670D;&#x52A1;&#xFF0C;&#x7EE7;&#x627F;&#x4E86; MessageSource&#xFF0C;ResourceLoader&#xFF0C;ApplicationEventPublisher&#x7B49;&#x7B49;&#x63A5;&#x53E3;&#xFF0C;&#x5728;BeanFactory &#x7B80;&#x5355;IoC&#x5BB9;&#x5668;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x6DFB;&#x52A0;&#x4E86;&#x8BB8;&#x591A;&#x5BF9;&#x9AD8;&#x7EA7;&#x5BB9;&#x5668;&#x7684;&#x652F;&#x6301;&#x3002; 12345678910111213141516171819202122232425262728293031public interface ApplicationContext extends EnvironmentCapable,ListableBeanFactory,HierarchicalBeanFactory,MessageSource,ApplicationEventPublisher,ResourcePatternResolver { /** * &#x8FD4;&#x56DE;&#x8BE5;&#x4E0A;&#x4E0B;&#x6587;&#x7684;id(unique) */ String getId(); /** * &#x8FD4;&#x56DE;&#x4E0A;&#x4E0B;&#x6587;&#x6240;&#x5C5E;&#x5E94;&#x7528;&#x7684;&#x540D;&#x5B57; */ String getApplicationName(); /** * &#x8FD4;&#x56DE;&#x8FD9;&#x4E2A;&#x4E0A;&#x4E0B;&#x6587;&#x53CB;&#x597D;&#x7684;&#x540D;&#x5B57; */ String getDisplayName(); /** * &#x8FD4;&#x56DE;&#x4E0A;&#x4E0B;&#x6587;&#x9996;&#x6B21;&#x52A0;&#x8F7D;&#x7684;&#x65F6;&#x95F4; */ long getStartupDate(); /** * &#x8FD4;&#x56DE;&#x7236;&#x7C7B;&#x4E0A;&#x4E0B;&#x6587; */ ApplicationContext getParent(); /** * &#x529F;&#x80FD;&#x6027;&#x7684;&#x66B4;&#x9732;&#x81EA;&#x52A8;&#x88C5;&#x914D;&#x7684;&#x5DE5;&#x5382;&#xFF0C;&#x5E76;&#x4E0D;&#x5E38;&#x7528; */ AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException;} &#x8FD9;&#x91CC;&#x9762;&#x7684;&#x65B9;&#x6CD5;&#x4E5F;&#x4E0D;&#x591A;&#xFF0C;&#x4E3B;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#x90FD;&#x5728;&#x7EE7;&#x627F;&#x7684;&#x63A5;&#x53E3;&#x91CC; BeanDifinition&#xFF1A;&#x50A8;&#x5B58; Spring&#x4E2D; Bean&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5305;&#x62EC;&#x5404;&#x5C5E;&#x6027;&#x540D;&#xFF0C;&#x7C7B;&#x540D;&#xFF0C;&#x662F;&#x5426;&#x5355;&#x4F8B;&#x7B49;&#xFF0C;&#x62BD;&#x8C61;&#x4E86;&#x6211;&#x4EEC;&#x5BF9; Bean&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x662F;&#x8BA9;&#x5BB9;&#x5668;&#x8D77;&#x4F5C;&#x7528;&#x7684;&#x4E3B;&#x8981;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002;&#x5BF9; IOC &#x5BB9;&#x5668;&#x6765;&#x8BF4;&#xFF0C;BeanDefinition &#x5C31;&#x662F;&#x5BF9;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x6A21;&#x5F0F;&#x4E2D;&#x7BA1;&#x7406;&#x7684;&#x5BF9;&#x8C61;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x7684;&#x6570;&#x636E;&#x62BD;&#x8C61;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x6B63;&#x5F0F;&#x8FDB;&#x5165;IoC&#x5BB9;&#x5668;&#x521D;&#x59CB;&#x5316;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x4EE5;FileSystemXmlApplicationContext&#x4E3A;&#x4F8B;,&#x4E0B;&#x9762;&#x662F;FileSystemXmlApplicationContext&#x7684;&#x7EE7;&#x627F;&#x5173;&#x7CFB;~&#xFF08;&#x8FD9;&#x5F62;&#x72B6;&#xFF0C;&#x6EE1;&#x6EE1;&#x7684;&#x7231;&#x554A;&#xFF0C;&#x54C8;&#x54C8;&#xFF09; BeanDefinition&#x7684;Resource&#x5B9A;&#x4F4D;1234567891011121314151617181920212223242526272829303132333435363738394041424344public class FileSystemXmlApplicationContext extends AbstractXmlApplicationContext { /** * &#x65E0;&#x53C2;&#x6784;&#x9020; */ public FileSystemXmlApplicationContext() { } /** * &#x4F20;&#x5165;&#x7236;&#x7C7B;&#x4E0A;&#x4E0B;&#x6587; */ public FileSystemXmlApplicationContext(ApplicationContext parent) { super(parent); } /** * &#x6838;&#x5FC3;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x5176;&#x4ED6;&#x51E0;&#x4E2A;&#x90FD;&#x57FA;&#x4E8E;&#x672C;&#x6784;&#x9020;&#x65B9;&#x6CD5; * configLocations &#x4F20;&#x5165;xml&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4F4D;&#x7F6E;&#x96C6;&#x5408; * refresh &#x662F;&#x5426;&#x81EA;&#x52A8;&#x5237;&#x65B0;&#x5BB9;&#x5668;(&#x662F;refresh&#x65B9;&#x6CD5;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x6838;&#x5FC3;&#x65B9;&#x6CD5;) * parent &#x7236;&#x7C7B;&#x4E0A;&#x4E0B;&#x6587; * 1.&#x4F20;&#x5165;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x5730;&#x5740; * 2.&#x5237;&#x65B0;&#x5BB9;&#x5668; */ public FileSystemXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent) throws BeansException { super(parent); setConfigLocations(configLocations); if (refresh) { refresh(); } } /** * &#x901A;&#x8FC7;&#x7ED9;&#x5B9A;&#x7684;&#x8DEF;&#x5F84;&#x5728;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x4E2D;&#x5B9A;&#x4F4D;BeanDefinition&#x5E76;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;FileSystemResource * &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;BeanDefinitionReader&#x7684;loadBeanDefinition&#x4E2D;&#x88AB;&#x8C03;&#x7528;&#xFF0C; * loadBeanDefinition&#x91C7;&#x7528;&#x4E86;&#x6A21;&#x677F;&#x6A21;&#x5F0F;&#xFF0C;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x7C7B;&#x4E2D;(&#x9ED8;&#x8BA4;&#x662F;&#x7C7B;&#x8DEF;&#x5F84;) */ @Override protected Resource getResourceByPath(String path) { if (path != null &amp;&amp; path.startsWith(&quot;/&quot;)) { path = path.substring(1); } return new FileSystemResource(path); }} &#x770B;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x672C;&#x7C7B;&#x5BF9;&#x6240;&#x6709;configLocation&#x90FD;&#x8FDB;&#x884C;&#x4E86;&#x5904;&#x7406;&#xFF0C;&#x4F7F;&#x6240;&#x6709;&#x4EE5;xml&#x5F62;&#x5F0F;&#x5B58;&#x5728;&#x7684;BeanDefinition&#x90FD;&#x5F97;&#x5230;&#x4E86;&#x5904;&#x7406;&#xFF0C;&#x5176;&#x4E2D;&#x8FD9;&#x4E2A;refresh&#x5C31;&#x6700;&#x6700;&#x5173;&#x952E;&#x70B9;&#x65B9;&#x6CD5;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x5BF9;refresh&#x8FDB;&#x884C;&#x89E3;&#x6790;&#x3002; refresh&#x662F;&#x5728;AbstractApplicationContext&#x4E2D;&#x5B9E;&#x73B0;&#xFF0C;&#x7406;&#x89E3;&#x4E86;refresh&#x65B9;&#x6CD5;&#xFF0C;&#x57FA;&#x672C;&#x5C31;&#x7406;&#x89E3;&#x4E86;IoC&#x521D;&#x59CB;&#x5316;&#x7684;&#x5168;&#x8FC7;&#x7A0B;&#x4E86;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public void refresh() throws BeansException, IllegalStateException { synchronized (this.startupShutdownMonitor) { // &#x5237;&#x65B0;&#x524D;&#x51C6;&#x5907;&#x6D3B;&#x52A8; prepareRefresh(); // &#x5173;&#x952E;&#x65B9;&#x6CD5;&#x6784;&#x5EFA;beanFactory&#x2014;&#x2014;&gt;&#x63A5;&#x4E0B;&#x6765;&#x4F1A;&#x8BE6;&#x89E3;&#x672C;&#x65B9;&#x6CD5; ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // &#x4E3A;&#x5728;&#x8FD9;&#x4E2A;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x4F7F;&#x7528;beanFactory&#x505A;&#x51C6;&#x5907; prepareBeanFactory(beanFactory); try { // &#x8BBE;&#x7F6E;&#x540E;&#x7F6E;&#x5904;&#x7406;&#x5668; postProcessBeanFactory(beanFactory); // &#x8C03;&#x7528;bean&#x7684;&#x540E;&#x7F6E;&#x5904;&#x7406;&#x5668;&#xFF0C;&#x8FD9;&#x4E9B;&#x5904;&#x7406;&#x5668;&#x5728;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x88AB;&#x6CE8;&#x518C;&#x4E3A;bean&#x7684;&#x5F62;&#x5F0F; // Invoke factory processors registered as beans in the context. invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. // &#x6CE8;&#x518C;&#x62E6;&#x622A;bean&#x521B;&#x5EFA;&#x7684;&#x5904;&#x7406;&#x5668; registerBeanPostProcessors(beanFactory); // Initialize message source for this context. // &#x4E3A;&#x4E0A;&#x4E0B;&#x6587;&#x521D;&#x59CB;&#x5316;&#x6D88;&#x606F;&#x6E90;&#xFF0C;&#x56FD;&#x9645;&#x5316;&#x529F;&#x80FD; initMessageSource(); // Initialize event multicaster for this context. // &#x521D;&#x59CB;&#x5316;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x65F6;&#x95F4;&#x673A;&#x5236; initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. // &#x521D;&#x59CB;&#x5316;&#x5176;&#x4ED6;&#x7279;&#x6B8A;bean&#x5728;&#x7279;&#x6B8A;&#x4E0A;&#x4E0B;&#x6587;&#x5B50;&#x7C7B;&#x4E2D; onRefresh(); // Check for listener beans and register them. // &#x68C0;&#x67E5;&#x76D1;&#x542C;&#x7684;bean&#xFF0C;&#x5E76;&#x5C06;&#x4ED6;&#x4EEC;&#x6CE8;&#x518C;&#x5230;&#x5BB9;&#x5668;&#x4E2D; registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. // &#x521D;&#x59CB;&#x5316;&#x6240;&#x6709;&#x7684;&#x975E;&#x61D2;&#x52A0;&#x8F7D;&#x5355;&#x4EF6; finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. // &#x53D1;&#x5E03;&#x76F8;&#x5173;&#x4E8B;&#x4EF6;&#xFF0C;&#x7ED3;&#x675F;refresh finishRefresh(); } catch (BeansException ex) { // Destroy already created singletons to avoid dangling resources. // &#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x9500;&#x6BC1;beans destroyBeans(); // Reset &apos;active&apos; flag. // &#x8FD9;&#x4E2A;active&#x5728;&#x4E0A;&#x9762;&#x7684;prepare&#x4E2D;&#x88AB;&#x8BBE;&#x7F6E;&#x4E3A;&#x4E86;true cancelRefresh(ex); // Propagate exception to caller. throw ex; } }} &#x63A5;&#x4E0B;&#x6765;&#x6211;&#x4EEC;&#x8BE6;&#x7EC6;&#x6765;&#x770B;&#x4E00;&#x4E0B;&#x5BB9;&#x5668;&#x7684;&#x6784;&#x5EFA;&#x8FC7;&#x7A0B;&#xFF0C;&#x5728;&#x7C7B;AbstractRefreshableApplicationContext&#x4E2D; 12345678910protected ConfigurableListableBeanFactory obtainFreshBeanFactory() { // &#x5237;&#x65B0;beanfactory&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5F88;&#x91CD;&#x8981;,&#x5C31;&#x662F;&#x5B83;&#x6784;&#x5EFA;&#x7684;bean&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x8D70;&#x3011; refreshBeanFactory(); ConfigurableListableBeanFactory beanFactory = getBeanFactory(); if (logger.isDebugEnabled()) { logger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory); } return beanFactory;} 123456789101112131415161718192021222324@Overrideprotected final void refreshBeanFactory() throws BeansException { // &#x5982;&#x679C;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;beanfactory&#x90A3;&#x5C31;&#x9500;&#x6BC1;&#x6389;bean&#x5E76;&#x628A;&#x5DE5;&#x5382;&#x5173;&#x4E86;&#xFF0C;&#x907F;&#x514D;&#x5BF9;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x521D;&#x59CB;&#x5316;&#x9020;&#x6210;&#x5F71;&#x54CD; if (hasBeanFactory()) { destroyBeans(); closeBeanFactory(); } try { // &#x8FD9;&#x91CC;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;DefaultListableBeanFactory DefaultListableBeanFactory beanFactory = createBeanFactory(); // &#x8BBE;&#x7F6E;&#x552F;&#x4E00;id&#xFF0C;&#x7528;&#x4E8E;&#x5E8F;&#x5217;&#x5316; beanFactory.setSerializationId(getId()); // &#x81EA;&#x5B9A;&#x4E49;bean&#x5DE5;&#x5382; customizeBeanFactory(beanFactory); // &#x5411;&#x5DE5;&#x5382;&#x4E2D;&#x52A0;&#x8F7D;BeanDefinition&#xFF0C;&#x8FD9;&#x4E2A;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x8D70;&#x3011; loadBeanDefinitions(beanFactory); synchronized (this.beanFactoryMonitor) { this.beanFactory = beanFactory; } } catch (IOException ex) { throw new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex); }} loadBeanDefinitions&#x5728;AbstractRefreshableApplicationContext&#x4E2D;&#x662F;&#x4E2A;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x76F4;&#x63A5;&#x627E;&#x5230;&#x4E86;&#x5728;&#x5B50;&#x7C7B;AbstractXmlApplicationContext&#xFF08;&#x5176;&#x5B9E;&#x6709;&#x4E09;&#x4E2A;&#x5B9E;&#x73B0;&#x7C7B;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x7814;&#x7A76;&#x7684;&#x662F;FileSystemXmlApplicationContext&#xFF09;&#x4E2D;&#x7684;&#x5B9E;&#x73B0;&#x3002; 1234567891011121314protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException { // &#x770B;&#x8FD9;&#x540D;&#x5B57;&#xFF0C;&#x663E;&#x7136;&#x5C31;&#x662F;&#x7528;&#x8FD9;&#x5BB6;&#x4F19;&#x5BF9;&#x6765;&#x5C06;xml&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x4FE1;&#x606F;&#x8BFB;&#x53D6;&#x653E;&#x5230;&#x5BB9;&#x5668;&#x91CC;&#x7684;. XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory); //&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x73AF;&#x5883;&#x8D44;&#x6E90;&#x5BF9;&#x8FD9;&#x4E2A;reader&#x8FDB;&#x884C;&#x914D;&#x7F6E; beanDefinitionReader.setEnvironment(this.getEnvironment()); beanDefinitionReader.setResourceLoader(this); beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this)); // &#x5141;&#x8BB8;&#x5B50;&#x7C7B;&#x4E2A;&#x6027;&#x5316;&#x5BF9;&#x8FD9;&#x4E2A;reader&#x521D;&#x59CB;&#x5316; initBeanDefinitionReader(beanDefinitionReader); // &#x7136;&#x540E;&#x5F00;&#x59CB;&#x771F;&#x6B63;&#x7684;&#x52A0;&#x8F7D;BeanDefinition&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x8D70;&#x3011; loadBeanDefinitions(beanDefinitionReader);} &#x8FD9;&#x6B21;&#x662F;&#x8DF3;&#x8F6C;&#x5230;AbstractXmlApplicationContext&#x91CC;&#x9762;&#xFF0C;&#x7EE7;&#x7EED;&#x9605;&#x8BFB; 1234567891011121314protected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException { // &#x83B7;&#x53D6;&#x914D;&#x7F6E;&#x8D44;&#x6E90;~~&#x4E0D;&#x8FC7;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x4E86;&#x4E00;&#x4E2A;null,&#x4E0D;&#x8FC7;&#x6709;&#x5B50;&#x7C7B;&#x8FDB;&#x884C;&#x91CD;&#x5199;&#x7684;&#xFF08;&#x5982;&#x679C;&#x770B;&#x8FC7;HashMap&#x6E90;&#x7801;&#xFF0C;&#x90A3;&#x80AF;&#x5B9A;&#x8BB0;&#x5F97;&#x91CC;&#x9762;&#x6709;&#x51E0;&#x4E2A;&#x7A7A;&#x5B9E;&#x73B0;&#x662F;&#x7ED9;LinkedHashMap&#x7528;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x540C;&#x6837;&#x7684;&#x9053;&#x7406;&#xFF09; Resource[] configResources = getConfigResources(); if (configResources != null) { reader.loadBeanDefinitions(configResources); } // &#x8FD9;&#x4E2A;&#x662F;&#x7C7B;AbstractRefreshableConfigApplicationContext&#x4E2D;&#x7684;&#x65B9;&#x6CD5;(&#x8DF3;&#x6765;&#x8DF3;&#x53BB;&#x8111;&#x58F3;&#x90FD;&#x5927;&#x4E86;&#x3002;&#x3002;&#x3002;) // FileSystemXmlApplicationContext&#x5728;refresh&#x524D;&#x5C31;&#x8BBE;&#x7F6E;&#x4E86; String[] configLocations = getConfigLocations(); if (configLocations != null) { // &#x7EC8;&#x4E8E;&#x5F00;&#x59CB;&#x89E3;&#x6790;&#x4E86;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x8D70;&#x3011; reader.loadBeanDefinitions(configLocations); }} AbstractBeanDefinitionReade&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x662F;&#x5728;&#x8FD9;&#x91CC;&#x8FDB;&#x884C;&#x52A0;&#x8F7D;&#x7684; 12345678910@Overridepublic int loadBeanDefinitions(String... locations) throws BeanDefinitionStoreException { Assert.notNull(locations, &quot;Location array must not be null&quot;); int counter = 0; for (String location : locations) { // ....&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8D70;&#x3011; counter += loadBeanDefinitions(location); } return counter;} &#x8FD8;&#x5728;&#x672C;&#x7C7B;&#x91CC;~&#x4E0D;&#x7528;&#x8DF3;&#x4E86; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public int loadBeanDefinitions(String location, Set&lt;Resource&gt; actualResources) throws BeanDefinitionStoreException { // &#x83B7;&#x53D6;&#x8D44;&#x6E90;&#x52A0;&#x8F7D;&#x5668; ResourceLoader resourceLoader = getResourceLoader(); // &#x7A7A;&#x5C31;&#x629B;&#x5F02;&#x5E38; if (resourceLoader == null) { throw new BeanDefinitionStoreException( &quot;Cannot import bean definitions from location [&quot; + location + &quot;]: no ResourceLoader available&quot;); } // &#x8FD9;&#x4E2A;&#x662F;&#x7528;&#x6765;&#x89E3;&#x6790;classpath*:&#x8FD9;&#x79CD;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x591A;&#x4E2A;&#x914D;&#x7F6E;&#x6587;&#x4EF6; if (resourceLoader instanceof ResourcePatternResolver) { // Resource pattern matching available. try { //&#x5230;&#x8FD9;&#x91CC;getResource&#x3010;&#x5B8C;&#x6210;&#x4E86;&#x5177;&#x4F53;&#x7684;&#x5B9A;&#x4F4D;&#x3011; Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location); // &#x5F00;&#x59CB;&#x8F7D;&#x5165;BeanDefinition int loadCount = loadBeanDefinitions(resources); if (actualResources != null) { for (Resource resource : resources) { actualResources.add(resource); } } if (logger.isDebugEnabled()) { logger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location pattern [&quot; + location + &quot;]&quot;); } return loadCount; } catch (IOException ex) { throw new BeanDefinitionStoreException( &quot;Could not resolve bean definition resource pattern [&quot; + location + &quot;]&quot;, ex); } } else { // &#x5230;&#x8FD9;&#x91CC;getResource,resource&#x63A5;&#x53E3;&#x4E2D;&#x5C01;&#x88C5;&#x4E86;&#x5F88;&#x591A;&#x4E0E;I/O&#x76F8;&#x5173;&#x7684;&#x64CD;&#x4F5C; // &#x81F3;&#x6B64;&#x3010;&#x5B8C;&#x6210;&#x4E86;&#x5177;&#x4F53;&#x7684;&#x5B9A;&#x4F4D;&#x3011; Resource resource = resourceLoader.getResource(location); // &#x5F00;&#x59CB;&#x8F7D;&#x5165;BeanDefinition&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x8DF3;&#x3011; int loadCount = loadBeanDefinitions(resource); if (actualResources != null) { actualResources.add(resource); } if (logger.isDebugEnabled()) { logger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location [&quot; + location + &quot;]&quot;); } return loadCount; }} refresh&#x65B9;&#x6CD5;&#x5B8C;&#x6210;IoC&#x7684;&#x6574;&#x4E2A;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5176;&#x4E2D; refreshBeanFactory()&#x65B9;&#x6CD5;&#x975E;&#x5E38;&#x7684;&#x91CD;&#x8981;&#xFF0C;&#x672C;&#x5C0F;&#x8282;&#x8BB2;&#x5230;&#x5B9A;&#x4F4D;&#xFF0C;&#x4E0B;&#x4E00;&#x5C0F;&#x8282;&#x5F00;&#x59CB;&#x8BB2;&#x89E3;BeanDefinition&#x89E3;&#x6790;&#x4E0E;&#x52A0;&#x8F7D;&#x3002; BeanDefinition&#x7684;&#x8F7D;&#x5165;&#x548C;&#x89E3;&#x6790;&#x5BF9;&#x4E8E;IoC&#x5BB9;&#x5668;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x8F7D;&#x5165;&#x8FC7;&#x7A0B;&#x76F8;&#x5F53;&#x4E8E;&#x628A;xml&#x4E2D;&#x7684;BeanDefinition&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;Spring&#x5185;&#x90E8;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x8FC7;&#x7A0B;&#x3002;IoC&#x5BB9;&#x5668;&#x5BF9;Bean&#x7684;&#x7BA1;&#x7406;&#x548C;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#x529F;&#x80FD;&#x662F;&#x901A;&#x8FC7;&#x5BF9;&#x5176;&#x6301;&#x6709;&#x7684;BeanDefinition&#x8FDB;&#x884C;&#x5404;&#x79CD;&#x76F8;&#x5173;&#x64CD;&#x4F5C;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x8FD9;&#x4E9B;BeanDefinition&#x662F;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;HashMap&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x3002; &#x627F;&#x63A5;&#x4E0A;&#x6587;&#xFF0C;loadBeanDefinitions()&#x662F;&#x5BF9;BeanDefinition&#x8F7D;&#x5165;&#x548C;&#x89E3;&#x6790;&#x7684;&#x6838;&#x5FC3;&#x65B9;&#x6CD5;&#x3002;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5728;XMLBeanDefinitionReader&#x91CC;&#x9762;&#x3002; 123456789public int loadBeanDefinitions(Resource... resources) throws BeanDefinitionStoreException { Assert.notNull(resources, &quot;Resource array must not be null&quot;); int counter = 0; for (Resource resource : resources) { // &#x8FD9;&#x91CC;&#x662F;&#x5FAA;&#x73AF;&#x52A0;&#x8F7D;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; counter += loadBeanDefinitions(resource); } return counter;} 1234public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException { // &#x5BF9;Resource&#x8FDB;&#x884C;&#x5305;&#x88C5;,&#x63D0;&#x4F9B;&#x901A;&#x8FC7;&#x4E0D;&#x540C;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x8BFB;&#x53D6;&#x8D44;&#x6E90;&#x6587;&#x4EF6;,&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; return loadBeanDefinitions(new EncodedResource(resource));} 123456789101112131415161718192021222324252627282930313233343536373839404142public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException { Assert.notNull(encodedResource, &quot;EncodedResource must not be null&quot;); if (logger.isInfoEnabled()) { logger.info(&quot;Loading XML bean definitions from &quot; + encodedResource.getResource()); } // &#x83B7;&#x53D6;&#x5DF2;&#x7ECF;&#x52A0;&#x8F7D;&#x7684;Resource Set&lt;EncodedResource&gt; currentResources = this.resourcesCurrentlyBeingLoaded.get(); if (currentResources == null) { currentResources = new HashSet&lt;EncodedResource&gt;(4); this.resourcesCurrentlyBeingLoaded.set(currentResources); } // &#x89E3;&#x51B3;&#x91CD;&#x590D;&#x4F9D;&#x8D56;&#x95EE;&#x9898;&#xFF0C;encodedResource&#x7684;equals&#x65B9;&#x6CD5;&#x5DF2;&#x7ECF;&#x88AB;&#x91CD;&#x5199; if (!currentResources.add(encodedResource)) { throw new BeanDefinitionStoreException( &quot;Detected cyclic loading of &quot; + encodedResource + &quot; - check your import definitions!&quot;); } // &#x8FD9;&#x91CC;&#x83B7;&#x53D6;IO&#x51C6;&#x5907;&#x8BFB;&#x53D6;XML&#x4E2D;&#x7684;BeanDefinition try { InputStream inputStream = encodedResource.getResource().getInputStream(); try { InputSource inputSource = new InputSource(inputStream); if (encodedResource.getEncoding() != null) { inputSource.setEncoding(encodedResource.getEncoding()); } // &#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; return doLoadBeanDefinitions(inputSource, encodedResource.getResource()); } finally { inputStream.close(); } } catch (IOException ex) { throw new BeanDefinitionStoreException( &quot;IOException parsing XML document from &quot; + encodedResource.getResource(), ex); } finally { currentResources.remove(encodedResource); if (currentResources.isEmpty()) { this.resourcesCurrentlyBeingLoaded.remove(); } }} &#x8FD9;&#x4E2A;&#x662F;&#x5728;XMLBeanDefinitionReader&#x4E2D;&#x5B9E;&#x73B0;(&#x6CA1;&#x6709;&#x8FDB;&#x5176;&#x4ED6;&#x7C7B;) 123456789101112131415161718192021222324252627282930313233protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource) throws BeanDefinitionStoreException { try { // &#x8FD9;&#x91CC;&#x53D6;&#x5F97;XML&#x7684;document&#x5BF9;&#x8C61;&#xFF0C;&#x89E3;&#x6790;&#x7531;documentLoader&#x5B8C;&#x6210;&#xFF0C;&#x611F;&#x5174;&#x8DA3;&#x770B;&#x4EE5;&#x8FDB;&#x53BB;&#x770B;&#x770B;&#x6B65;&#x9AA4; // &#x867D;&#x7136;&#x5DF2;&#x7ECF;&#x5BF9;xml&#x8FDB;&#x884C;&#x89E3;&#x6790;&#x4F46;&#x662F;&#x5E76;&#x6CA1;&#x6709;&#x6309;&#x7167;bean&#x7684;&#x89C4;&#x5219;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x7EE7;&#x7EED;&#x89E3;&#x6790; Document doc = doLoadDocument(inputSource, resource); // &#x8FD9;&#x91CC;&#x542F;&#x52A8;&#x7684;&#x662F;&#x5BF9;beanDefinition&#x89E3;&#x6790;&#x7684;&#x8BE6;&#x7EC6;&#x8FC7;&#x7A0B;&#xFF0C;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; return registerBeanDefinitions(doc, resource); } catch (BeanDefinitionStoreException ex) { throw ex; } catch (SAXParseException ex) { throw new XmlBeanDefinitionStoreException(resource.getDescription(), &quot;Line &quot; + ex.getLineNumber() + &quot; in XML document from &quot; + resource + &quot; is invalid&quot;, ex); } catch (SAXException ex) { throw new XmlBeanDefinitionStoreException(resource.getDescription(), &quot;XML document from &quot; + resource + &quot; is invalid&quot;, ex); } catch (ParserConfigurationException ex) { throw new BeanDefinitionStoreException(resource.getDescription(), &quot;Parser configuration exception parsing XML from &quot; + resource, ex); } catch (IOException ex) { throw new BeanDefinitionStoreException(resource.getDescription(), &quot;IOException parsing XML document from &quot; + resource, ex); } catch (Throwable ex) { throw new BeanDefinitionStoreException(resource.getDescription(), &quot;Unexpected exception parsing XML document from &quot; + resource, ex); }} &#x4ECD;&#x7136;&#x5728;&#x672C;&#x7C7B;&#x4E2D; 123456789public int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException { // &#x521B;&#x5EFA;BeanDefinitionDocumentReader&#x5BF9;document&#x8FDB;&#x884C;&#x89E3;&#x6790; BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader(); documentReader.setEnvironment(this.getEnvironment()); int countBefore = getRegistry().getBeanDefinitionCount(); // &#x5177;&#x4F53;&#x7684;&#x89E3;&#x6790;&#x8FC7;&#x7A0B;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; documentReader.registerBeanDefinitions(doc, createReaderContext(resource)); return getRegistry().getBeanDefinitionCount() - countBefore;} &#x8FDB;&#x5165;DefaultBeanDefinitionDocumentReader&#x7C7B;&#x4E2D;&#xFF0C;&#x5728;&#x6587;&#x6863;&#x5143;&#x7D20;&#x4E2D;&#x83B7;&#x53D6;&#x6839;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x7EE7;&#x7EED;&#x8C03;&#x7528;doRegisterBeanDefinition&#x8FDB;&#x884C;&#x6CE8;&#x518C;&#x3002; 1234567public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) { this.readerContext = readerContext; logger.debug(&quot;Loading bean definitions&quot;); Element root = doc.getDocumentElement(); // &#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; doRegisterBeanDefinitions(root);} 1234567891011121314151617181920protected void doRegisterBeanDefinitions(Element root) { String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE); if (StringUtils.hasText(profileSpec)) { Assert.state(this.environment != null, &quot;Environment must be set for evaluating profiles&quot;); String[] specifiedProfiles = StringUtils.tokenizeToStringArray( profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS); if (!this.environment.acceptsProfiles(specifiedProfiles)) { return; } } BeanDefinitionParserDelegate parent = this.delegate; this.delegate = createDelegate(this.readerContext, root, parent); preProcessXml(root); // &#x5BF9;BeanDefinition&#x8FDB;&#x884C;&#x89E3;&#x6790;&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x7684;&#x6838;&#x5FC3;&#x903B;&#x8F91;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; parseBeanDefinitions(root, this.delegate); postProcessXml(root); this.delegate = parent;} 12345678910111213141516171819202122// &#x4E0D;&#x96BE;&#x770B;&#x51FA;&#xFF0C;&#x8FD9;&#x662F;&#x5BF9;xml&#x7684;&#x89E3;&#x6790;&#x8FC7;&#x7A0B;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) { if (delegate.isDefaultNamespace(root)) { NodeList nl = root.getChildNodes(); for (int i = 0; i &lt; nl.getLength(); i++) { Node node = nl.item(i); if (node instanceof Element) { Element ele = (Element) node; if (delegate.isDefaultNamespace(ele)) { // &#x672C;&#x903B;&#x8F91;&#x4E3A;&#x6838;&#x5FC3;&#x903B;&#x8F91;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; parseDefaultElement(ele, delegate); } else { delegate.parseCustomElement(ele); } } } } else { delegate.parseCustomElement(root); }} 1234567891011121314151617181920private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) { // import&#x6807;&#x7B7E; if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) { importBeanDefinitionResource(ele); } // &#x522B;&#x540D; else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) { processAliasRegistration(ele); } // bean&#x6807;&#x7B7E; else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) { // &#x5BF9;bean&#x6807;&#x7B7E;&#x8FDB;&#x884C;&#x89E3;&#x6790;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; processBeanDefinition(ele, delegate); } // beans&#x6807;&#x7B7E; else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) { // recurse doRegisterBeanDefinitions(ele); }} 123456789101112131415161718protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) { // &#x8FD9;&#x4E2A;&#x662F;BeanDefinitionHolder&#x91CC;&#x88C5;&#x6709;BeanDefinition&#x5BF9;&#x8C61;&#x548C;beanname&#xFF0C;&#x522B;&#x540D;&#x96C6;&#x5408;&#x7B49;&#x4FE1;&#x606F; // parseBeanDefinitionElement()&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5C06;xml&#x4E2D;bean&#x7684;&#x5B9A;&#x4E49;&#x8FDB;&#x884C;&#x89E3;&#x6790;&#xFF0C;&#x6709;&#x5174;&#x8DA3;&#x53EF;&#x4EE5;&#x8FDB;&#x53BB;&#x6DF1;&#x5165;&#x4E86;&#x89E3; BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele); if (bdHolder != null) { bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder); try { // &#x5411;IoC&#x5BB9;&#x5668;&#x6CE8;&#x518C;&#x89E3;&#x6790;&#x5230;&#x7684;BeanDefinition&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry()); } catch (BeanDefinitionStoreException ex) { getReaderContext().error(&quot;Failed to register bean definition with name &apos;&quot; + bdHolder.getBeanName() + &quot;&apos;&quot;, ele, ex); } // Send registration event. getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder)); }} &#x81F3;&#x6B64;&#xFF0C;XML&#x4E2D;&#x7684;BeanDefinition&#x7684;&#x89E3;&#x6790;&#x548C;&#x8F7D;&#x5165;&#x5168;&#x90E8;&#x5B8C;&#x6210;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x8FDB;&#x5165;bean&#x7684;&#x6CE8;&#x518C;&#x90E8;&#x5206;&#x3002; BeanDefinition&#x5728;IoC&#x5BB9;&#x5668;&#x4E2D;&#x7684;&#x6CE8;&#x518C;&#x7ECF;&#x8FC7;&#x5B9A;&#x4F4D;&#x548C;&#x8F7D;&#x5165;&#x540E;&#xFF0C;BeanDefinition&#x5DF2;&#x7ECF;&#x5728;IoC&#x5EFA;&#x7ACB;&#x8D77;&#x76F8;&#x5E94;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x4E3A;&#x4E86;&#x66F4;&#x53CB;&#x597D;&#x7684;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;BeanDefinition&#xFF0C;&#x9700;&#x8981;&#x5728;IoC&#x5BB9;&#x5668;&#x4E2D;&#x5C06;&#x8FD9;&#x4E9B;BeanDefinition&#x8FDB;&#x884C;&#x6CE8;&#x518C;&#x3002; &#x8BE5;&#x65B9;&#x6CD5;&#x5728;BeanDefinitionReaderUtils&#x7C7B;&#x4E2D; 12345678910111213141516public static void registerBeanDefinition( BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) throws BeanDefinitionStoreException { String beanName = definitionHolder.getBeanName(); // &#x8FD9;&#x4E2A;&#x5F88;&#x660E;&#x663E;&#x662F;&#x5C06;BeanDefinition&#x6CE8;&#x518C;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x3010;&#x7EE7;&#x7EED;&#x5F80;&#x91CC;&#x9762;&#x8DF3;&#x3011; registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition()); // Register aliases for bean name, if any. String[] aliases = definitionHolder.getAliases(); if (aliases != null) { for (String aliase : aliases) { registry.registerAlias(beanName, aliase); } }} &#x8DF3;&#x8F6C;&#x5230;DefaultListableBeanFactory&#x7C7B;&#x4E2D;&#xFF0C;&#x524D;&#x9762;&#x521B;&#x5EFA;&#x5DE5;&#x5382;&#x65F6;&#x7528;&#x7684;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x5DE5;&#x5382; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException { Assert.hasText(beanName, &quot;Bean name must not be empty&quot;); Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;); if (beanDefinition instanceof AbstractBeanDefinition) { try { ((AbstractBeanDefinition) beanDefinition).validate(); } catch (BeanDefinitionValidationException ex) { throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName, &quot;Validation of bean definition failed&quot;, ex); } } // &#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x4E00;&#x81F4;&#x6027;&#xFF0C;&#x6CE8;&#x518C;&#x65F6;&#x52A0;&#x4E2A;synchronized&#x7EBF;&#x7A0B;&#x9501; synchronized (this.beanDefinitionMap) { // &#x68C0;&#x67E5;&#x5728;IoC&#x5BB9;&#x5668;&#x4E2D;&#x662F;&#x5426;&#x6709;&#x540C;&#x540D;bean&#xFF0C;&#x6709;&#x540C;&#x540D;&#x7684;&#x8FD8;&#x4E0D;&#x8BA9;&#x8986;&#x76D6;&#x7684;&#x5C31;&#x662F;&#x629B;&#x5F02;&#x5E38; BeanDefinition oldBeanDefinition = this.beanDefinitionMap.get(beanName); if (oldBeanDefinition != null) { if (!this.allowBeanDefinitionOverriding) { throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName, &quot;Cannot register bean definition [&quot; + beanDefinition + &quot;] for bean &apos;&quot; + beanName + &quot;&apos;: There is already [&quot; + oldBeanDefinition + &quot;] bound.&quot;); } else if (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) { if (this.logger.isWarnEnabled()) { this.logger.warn(&quot;Overriding user-defined bean definition for bean &apos;&quot; + beanName +&quot; with a framework-generated bean definition &apos;: replacing [&quot; +oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;); } } else { if (this.logger.isInfoEnabled()) { this.logger.info(&quot;Overriding bean definition for bean &apos;&quot; + beanName +&quot;&apos;: replacing [&quot; + oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;); } } } else { this.beanDefinitionNames.add(beanName); this.frozenBeanDefinitionNames = null; } // &#x628A;BeanDefinition&#x88C5;&#x5230;&#x5982;&#x5230;beanDefinitionMap&#x4E2D; // &#x3010;&#x81F3;&#x6B64;Spring IoC&#x5BB9;&#x5668;&#x521D;&#x59CB;&#x5316;&#x5B8C;&#x6210;~&#x3011; // beanDeinitionMap&#x662F;&#x521D;&#x59CB;&#x957F;&#x5EA6;64&#x7684;ConcurrentHashMap this.beanDefinitionMap.put(beanName, beanDefinition); } resetBeanDefinition(beanName);} &#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x6CE8;&#x518C;&#x5B8C;&#x6210;&#x3002;&#x6211;&#x4EEC;&#x521B;&#x5EFA;bean&#x5DE5;&#x5382;&#xFF0C;&#x5C06;BeanDefinition&#x6CE8;&#x518C;&#x5230;&#x4E86;IoC&#x5BB9;&#x5668;&#x6301;&#x6709;&#x7684;Map&#x4E2D;&#x3002;&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#x662F;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x7684;&#x57FA;&#x7840;&#x3002; &#x4E09;&#x3001;&#x5C0F;&#x7ED3;&#x672C;&#x6587;&#x5F00;&#x59CB;&#x7B80;&#x7565;&#x89E3;&#x91CA;IoC&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x7136;&#x540E;&#x4ECE;FileSystemXmlApplicationContext&#x7740;&#x624B;&#xFF0C;&#x6839;&#x636E;&#x6E90;&#x7801;&#x4E00;&#x6B65;&#x4E00;&#x6B65;&#x8BB2;&#x8FF0;&#x4ECE;bean&#x5DE5;&#x5382;&#x521B;&#x5EFA;&#x5230;BeanDefinition&#x5728;IoC&#x4E2D;&#x6CE8;&#x518C;&#x6838;&#x5FC3;&#x903B;&#x8F91;&#x3002;Spring&#x6E90;&#x7801;&#x786E;&#x5B9E;&#x7EC6;&#x8282;&#x592A;&#x591A;&#xFF0C;&#x5728;&#x9605;&#x8BFB;&#x6E90;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x6293;&#x4F4F;&#x6838;&#x5FC3;&#x903B;&#x8F91;&#x3002; &#x672C;&#x6587;&#x662F;&#x535A;&#x4E3B;&#x5728;&#x5B66;&#x4E60;Spring&#x6E90;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#x5BF9;IoC&#x7684;&#x603B;&#x7ED3;&#xFF0C;&#x5E0C;&#x671B;&#x5BF9;&#x60F3;&#x8981;&#x9605;&#x8BFB;&#x6E90;&#x7801;&#x4F46;&#x4E0D;&#x77E5;&#x4ECE;&#x4F55;&#x4E0B;&#x624B;&#x7684;&#x540C;&#x5B66;&#x6709;&#x6240;&#x5E2E;&#x52A9;&#xFF01;&#x5982;&#x6709;&#x9519;&#x8BEF;&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x6307;&#x6B63;&#x3002; &#x672C;&#x6587;&#x9996;&#x53D1;&#x4E8E;cdream&#x4E2A;&#x4EBA;&#x535A;&#x5BA2; &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#xFF01; &#x672C;&#x6587;&#x53C2;&#x8003;&#xFF1A; Spring&#x63ED;&#x79D8;&#xFF0C;&#x738B;&#x798F;&#x5F3A; Spring&#x6280;&#x672F;&#x5185;&#x5E55;&#xFF0C;&#x8BA1;&#x6587;&#x67EF; Spring&#x6E90;&#x7801;&#x6DF1;&#x5EA6;&#x5206;&#x6790;&#xFF0C;&#x90DD;&#x4F73; &#x6DF1;&#x5165;&#x7406;&#x89E3;-Spring-&#x4E4B;&#x6E90;&#x7801;&#x5256;&#x6790;IOC &#x6D45;&#x8C08;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x4E0E;&#x4F9D;&#x8D56;&#x6CE8;&#x5165; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring——概述]]></title>
    <url>%2F2018%2F11%2F23%2Fspring01%2F</url>
    <content type="text"><![CDATA[&#x6458;&#x8981;&#xFF1A;&#x672C;&#x6587;&#x7B80;&#x5355;&#x4ECB;&#x7ECD;Spring&#x7684;&#x4EA7;&#x751F;&#x7684;&#x539F;&#x56E0;&#xFF0C;spring&#x7684;&#x6574;&#x4F53;&#x67B6;&#x6784;&#x56FE;&#xFF0C;&#x6838;&#x5FC3;&#x8BBE;&#x8BA1;&#x7406;&#x5FF5;&#xFF0C;&#x5E76;&#x4F5C;&#x4E3A;&#x63A5;&#x6765;&#x4E0B;&#x8BB2;&#x89E3;spring&#x51E0;&#x4E2A;&#x6838;&#x5FC3;&#x90E8;&#x5206;&#x7684;&#x7D22;&#x5F15;&#x3002; &#x4E00;&#x3001;Spring&#x7684;&#x7531;&#x6765;Java EE&#x5F00;&#x53D1;&#x4E2D;&#xFF0C;&#x4F20;&#x7EDF;&#x7684;EJB&#x5F00;&#x53D1;&#x9700;&#x8981;&#x4F9D;&#x8D56;&#x6309;&#x7167;J2EE&#x89C4;&#x8303;&#x5B9E;&#x73B0;&#x7684;J2EE&#x5E94;&#x7528;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x5728;&#x5E94;&#x7528;&#x8BBE;&#x8BA1;&#x65F6;&#x9700;&#x8981;&#x9075;&#x5FAA;&#x4E00;&#x7CFB;&#x5217;&#x6807;&#x51C6;&#x63A5;&#x53E3;&#x624D;&#x80FD;&#x5728;&#x6D4B;&#x8BD5;&#x73AF;&#x5883;&#x4E2D;&#x6D4B;&#x8BD5;&#x548C;&#x90E8;&#x7F72;&#x3002;&#x5B58;&#x5728;API&#x5177;&#x6709;&#x4FB5;&#x5165;&#x6027;&#xFF0C;&#x4EA7;&#x54C1;&#x5BF9;&#x5BB9;&#x5668;&#x4F9D;&#x8D56;&#xFF0C;&#x4E0D;&#x6613;&#x901A;&#x7528;&#x7B49;&#x7B49;&#x95EE;&#x9898;&#x3002; &#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x8FD9;&#x4E9B;&#x95EE;&#x9898;&#xFF0C;Spring&#x4FBF;&#x51FA;&#x73B0;&#x4E86;&#xFF0C;Spring&#x4E3A;&#x5F00;&#x53D1;&#x8005;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x4E00;&#x7AD9;&#x5F0F;&#x8F7B;&#x91CF;&#x7EA7;&#x5E94;&#x7528;&#x5F00;&#x53D1;&#x6846;&#x67B6;&#x3002;&#x5C3D;&#x91CF;&#x4F7F;&#x7528;pojo&#x7684;&#x65B9;&#x5F0F;&#x5F00;&#x53D1;&#xFF0C;&#x4E0D;&#x4F9D;&#x8D56;&#x4E8E;&#x4EFB;&#x4F55;&#x5BB9;&#x5668;&#xFF0C;&#x6709;&#x5229;&#x4E8E;&#x9879;&#x76EE;&#x5FEB;&#x901F;&#x5F00;&#x53D1;&#xFF0C;&#x5E76;&#x53EF;&#x4EE5;&#x4E0E;&#x5176;&#x4ED6;&#x6846;&#x67B6;&#x826F;&#x597D;&#x7ED3;&#x5408;&#x3002; &#x5728;&#x7F51;&#x4E0A;&#x5927;&#x591A;&#x662F;EJB&#x7684;&#x8D1F;&#x9762;&#x8BC4;&#x4EF7;,&#x5176;&#x5B9E;&#x7FFB;&#x770B;&#x51E0;&#x5E74;&#x524D;&#x7684;&#x5E16;&#x5B50;&#xFF0C;EJB3.0&#x51FA;&#x73B0;&#x65F6;&#x4E5F;&#x6709;&#x5F88;&#x591A;&#x4F18;&#x70B9;&#xFF0C;&#x4F8B;&#x5982;&#x652F;&#x6301;&#x6CE8;&#x89E3;&#x5F0F;&#x5F00;&#x53D1;&#xFF0C;&#x652F;&#x6301;&#x5206;&#x5E03;&#x5F0F;&#x90E8;&#x7F72;&#xFF08;&#x5F53;&#x65F6;&#x7684;Spring&#x662F;&#x4E0D;&#x652F;&#x6301;&#x6CE8;&#x89E3;&#x548C;&#x5206;&#x5E03;&#x5F0F;&#x7684;&#xFF09;&#xFF0C;&#x4F46;&#x662F;EJB&#x7684;&#x5E94;&#x7528;&#x670D;&#x52A1;&#x5668;&#x56E0;&#x9700;&#x8981;&#x7BA1;&#x7406;&#x7EC4;&#x4EF6;&#x7684;&#x8D1F;&#x8D23;&#x751F;&#x547D;&#x5468;&#x671F;&#x4EE5;&#x53CA;&#x884C;&#x4E3A;&#xFF0C;&#x5E76;&#x4E14;&#x5185;&#x7F6E;&#x63D0;&#x4F9B;&#x5404;&#x9879;&#x670D;&#x52A1;&#xFF0C;&#x8FD9;&#x6837;&#x7684;EJB&#x8FD8;&#x662F;&#x663E;&#x5F97;&#x81C3;&#x80BF;&#x3002;&#x540E;&#x6765;EJB&#x548C;Spring&#x4E92;&#x76F8;&#x501F;&#x9274;&#xFF0C;Spring&#x53D8;&#x7684;&#x66F4;&#x52A0;&#x5B8C;&#x5584;&#xFF0C;&#x52A0;&#x4E0A;&#x4EBA;&#x4EEC;&#x5DF2;&#x7ECF;&#x4E60;&#x60EF;Spring&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x5F00;&#x53D1;&#x7279;&#x70B9;&#xFF0C;EJB3.0&#x4E5F;&#x6CA1;&#x6709;&#x6380;&#x8D77;&#x592A;&#x5927;&#x98CE;&#x6D6A;&#x3002; &#x4E8C;&#x3001;Spring&#x7684;&#x6574;&#x4F53;&#x7ED3;&#x6784; Core Container&#xFF08;&#x6838;&#x5FC3;&#x5BB9;&#x5668;&#xFF09;core&#x548C;beans&#x662F;&#x6A21;&#x5757;&#x7684;&#x6838;&#x5FC3;&#x90E8;&#x5206;&#xFF0C;&#x63D0;&#x4F9B;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#xFF08;DI&#xFF09;&#x7279;&#x6027;&#x3002;&#x4E3B;&#x8981;&#x662F;BeanFactory&#xFF0C;&#x662F;&#x5BF9;&#x5DE5;&#x5382;&#x6A21;&#x5F0F;&#x7684;&#x7ECF;&#x5178;&#x5B9E;&#x73B0;&#xFF0C;&#x771F;&#x6B63;&#x7684;&#x5B8C;&#x6210;&#x4E86;&#x4ECE;&#x7A0B;&#x5E8F;&#x903B;&#x8F91;&#x5206;&#x79BB;&#x51FA;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x548C;&#x914D;&#x7F6E;&#x3002; Beans:&#x4E3B;&#x8981;&#x662F;&#x5305;&#x542B;&#x8BBF;&#x95EE;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x3001;&#x521B;&#x5EFA;&#x548C;&#x7BA1;&#x7406;bean&#x5DF2;&#x53CA;&#x8FDB;&#x884C;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#xFF08;DI&#xFF09;&#x76F8;&#x5173;&#x64CD;&#x4F5C;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x3002; Core:Spring&#x7684;&#x6838;&#x5FC3;&#x5DE5;&#x5177;&#x7C7B;&#xFF0C;&#x5176;&#x4ED6;&#x7EC4;&#x4EF6;&#x90FD;&#x9700;&#x8981;&#x7528;&#x5230;&#x8FD9;&#x4E2A;&#x5305;&#x91CC;&#x7684;&#x7C7B;&#x3002; Context:&#x57FA;&#x4E8E;Beans&#x548C;Core&#xFF0C;&#x662F;BeanFactory&#x7684;&#x6269;&#x5C55;&#xFF0C;&#x6DFB;&#x52A0;&#x4E86;&#x56FD;&#x9645;&#x5316;&#x3001;&#x4E8B;&#x4EF6;&#x4F20;&#x64AD;&#x3001;&#x8D44;&#x6E90;&#x52A0;&#x8F7D;&#x548C;&#x5BF9;Context&#x7684;&#x900F;&#x660E;&#x521B;&#x5EFA;&#x652F;&#x6301;&#x3002; Expression:&#x4E5F;&#x5C31;&#x662F;&#x7ECF;&#x5E38;&#x8BF4;&#x7684;&#x7684;EL&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x652F;&#x6301;&#x8BBE;&#x7F6E;/&#x83B7;&#x53D6;&#x5C5E;&#x6027;&#x503C;&#xFF0C;&#x5C5E;&#x6027;&#x5206;&#x914D;&#xFF0C;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#xFF0C;&#x8BBF;&#x95EE;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x7B97;&#x6570;&#x8FD0;&#x7B97;&#x7B26;&#x7B49;&#x7B49;&#x529F;&#x80FD;&#x3002; &#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x548C;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#x7684;&#x5173;&#x7CFB;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x4E3B;&#x8981;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF1A;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#x548C;&#x4F9D;&#x8D56;&#x67E5;&#x627E;&#x3002;&#x90FD;&#x662F;&#x63CF;&#x8FF0;Spring&#x5C06;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x7BA1;&#x7406;&#x4EA4;&#x7ED9;&#x5BB9;&#x5668;&#x6765;&#x5B8C;&#x6210;&#xFF0C;Spring in Action&#x4E2D;&#x4E5F;&#x662F;&#x53EA;&#x63D0;&#x4E86;Spring&#x4E24;&#x5927;&#x6838;&#x5FC3;&#x7279;&#x6027;DI&#x548C;AOP&#xFF0C;&#x767E;&#x5EA6;&#x767E;&#x79D1;&#x5E72;&#x8106;&#x628A;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#x6307;&#x5411;&#x63A7;&#x5236;&#x53CD;&#x8F6C;&#x3002; Date Access/IntegrationJDBC:&#x63D0;&#x4F9B;JDBC&#x62BD;&#x8C61;&#x5C42;&#xFF0C;&#x5305;&#x542B;&#x4E86;Spring&#x5BF9;&#x6240;&#x6709;JDBC&#x6570;&#x636E;&#x8BBF;&#x95EE;&#x8FDB;&#x884C;&#x5C01;&#x88C5;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x3002; ORM:&#x5BF9;&#x8C61;&#x5173;&#x7CFB;&#x6620;&#x5C04;API&#xFF0C;&#x5982;JPA&#xFF0C;Hibernate&#xFF0C;MyBatis&#x7B49;&#xFF0C;&#x90FD;&#x652F;&#x6301;Spring&#x901A;&#x7528;&#x4E8B;&#x52A1;&#x548C;&#x5F02;&#x5E38;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x3002; OXM&#xFF1A;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x5BF9;Object/XML&#x6620;&#x5C04;&#x5B9E;&#x73B0;&#x7684;&#x62BD;&#x8C61;&#x7C7B;&#xFF0C;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5BF9;&#x8C61;&#x548C;XML&#x6587;&#x6863;&#x4E92;&#x76F8;&#x8F6C;&#x6362;&#x3002;&#x5B9E;&#x73B0;&#x5305;&#x62EC;XMLBeans&#xFF0C;Xstream&#x7B49;&#x3002; JMS&#xFF1A;&#x5305;&#x542B;&#x751F;&#x4EA7;&#x8005;&#x548C;&#x6D88;&#x8D39;&#x8005;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x5BF9;&#x5404;&#x79CD;&#x6D88;&#x606F;&#x961F;&#x5217;&#x7684;&#x652F;&#x6301;&#x3002; Transaction&#xFF1A;&#x652F;&#x6301;&#x58F0;&#x660E;&#x5F0F;&#x4E8B;&#x52A1;&#x548C;&#x7F16;&#x7A0B;&#x5F0F;&#x4E8B;&#x52A1;&#x3002; Web&#x5EFA;&#x7ACB;&#x5728;ApplicationContext&#x4E4B;&#x4E0A;&#xFF0C;&#x4E3A;Web&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x63D0;&#x4F9B;&#x4E0A;&#x4E0B;&#x6587;&#x3002; WebSocket&#xFF1A;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x5728;web&#x5E94;&#x7528;&#x4E2D;&#x5B9E;&#x73B0;&#x9AD8;&#x6548;&#x3001;&#x53CC;&#x5411;&#x901A;&#x8BAF;&#xFF0C;&#x9700;&#x8003;&#x8651;&#x5BA2;&#x6237;&#x7AEF;(&#x6D4F;&#x89C8;&#x5668;)&#x548C;&#x670D;&#x52A1;&#x7AEF;&#x4E4B;&#x95F4;&#x9AD8;&#x9891;&#x548C;&#x4F4E;&#x5EF6;&#x65F6;&#x6D88;&#x606F;&#x4EA4;&#x6362;&#x7684;&#x673A;&#x5236;&#x3002; WebMVC&#xFF1A;Spring Web MVC &#x6846;&#x67B6;&#x662F;&#x56F4;&#x7ED5;DispatcherServlet&#x8BBE;&#x8BA1;&#x7684;&#xFF0C;&#x6240;&#x8C13;DispatcherServlet&#x5C31;&#x662F;&#x5C06;&#x8BF7;&#x6C42;&#x5206;&#x53D1;&#x5230;handler&#xFF0C;&#x9700;&#x8981;&#x6709;&#x914D;&#x7F6E;&#x597D;&#x7684;handler&#x6620;&#x5C04;&#x3001;&#x89C6;&#x56FE;&#x89E3;&#x6790;&#x3001;&#x672C;&#x5730;&#x5316;&#x3001;&#x65F6;&#x533A;&#x3001;theme&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3001;&#x8FD8;&#x6709;&#x4E0A;&#x4F20;&#x6587;&#x4EF6;&#x7684;&#x652F;&#x6301;&#x3002; WebFlux:Spring WebFlux&#x662F;&#x968F;Spring 5&#x63A8;&#x51FA;&#x7684;&#x54CD;&#x5E94;&#x5F0F;Web&#x6846;&#x67B6;(&#x53EF;&#x80FD;&#x662F;web&#x672A;&#x6765;&#x7684;&#x53D1;&#x5C55;&#x65B9;&#x5411;&#xFF0C;&#x524D;&#x51E0;&#x5929;&#x5728;&#x77E5;&#x4E4E;&#x770B;&#x5230;&#x95EE;Spring MVC&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x8FC7;&#x65F6;&#x7684;&#x95EE;&#x9898;~)&#x3002; AOP&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x8054;&#x76DF;&#x6807;&#x51C6;&#x7684;&#x9762;&#x5411;&#x5207;&#x9762;&#x7F16;&#x7A0B;&#x5B9E;&#x73B0;,&#x5141;&#x8BB8;&#x4F60;&#x5B9A;&#x4E49;&#x8BF8;&#x5982;&#x65B9;&#x6CD5;&#x62E6;&#x622A;&#x5668;&#x548C;&#x5207;&#x70B9;&#x5E72;&#x51C0;&#x5229;&#x843D;&#x5730;&#x51CF;&#x5C11;&#x90A3;&#x4E9B;&#x5E94;&#x8BE5;&#x88AB;&#x5206;&#x5230;&#x4E00;&#x8FB9;&#x7684;&#x4EE3;&#x7801;&#x529F;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5F02;&#x5E38;&#x5904;&#x7406;&#x3001;&#x4E8B;&#x52A1;&#x3001;&#x65E5;&#x5FD7;&#x7B49;&#x4EE3;&#x7801;&#x4ECE;&#x4E1A;&#x52A1;&#x4EE3;&#x7801;&#x4E2D;&#x5265;&#x79BB;&#x51FA;&#x6765;&#x3002; Aspects:&#x63D0;&#x4F9B;&#x4E86;&#x5BF9;AspectJ&#x7684;&#x652F;&#x6301; Instrumentation&#x63D0;&#x4F9B;&#x4E86;&#x5BF9;class instrumentation&#x7684;&#x652F;&#x6301;&#x548C;classloader&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x4F7F;&#x5F97;&#x53EF;&#x4EE5;&#x5728;&#x7279;&#x5B9A;&#x5E94;&#x7528;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x4F7F;&#x7528;&#x3002;spring-instrument-tomcat&#x6A21;&#x5757;&#x5305;&#x542B;&#x4E86;&#x4E3A;tomcat&#x63D0;&#x4F9B;&#x7684;spring&#x4EEA;&#x5668;(instrumentation)&#x4EE3;&#x7406;&#x3002; Messaging&#x4ECE;spring&#x96C6;&#x6210;&#x9879;&#x76EE;(&#x5982;Meaasge,MessageChannel,MessageHandler,&#x548C;&#x5176;&#x4ED6;&#x57FA;&#x4E8E;&#x6D88;&#x606F;&#x5E94;&#x7528;&#x7684;&#x57FA;&#x7840;&#x670D;&#x52A1;)&#x800C;&#x6765;&#x7684;&#x5173;&#x952E;&#x62BD;&#x8C61;.&#x8FD9;&#x4E2A;&#x6A21;&#x5757;&#x4E5F;&#x5305;&#x62EC;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x7528;&#x6765;&#x6620;&#x5C04;&#x6D88;&#x606F;&#x5230;&#x65B9;&#x6CD5;&#x7684;&#x6CE8;&#x89E3;,&#x7C7B;&#x4F3C;&#x4E8E;&#x57FA;&#x4E8E;&#x7F16;&#x7A0B;&#x6A21;&#x578B;&#x7684;springMVC&#x6CE8;&#x89E3;. Test&#x652F;&#x6301;&#x4F7F;&#x7528;Junit&#x5BF9;Spring&#x7EC4;&#x4EF6;&#x8FDB;&#x884C;&#x6D4B;&#x8BD5;&#x3002; &#x4E09;&#x3001;Spring&#x7684;&#x4EF7;&#x503C; Spring&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x4FB5;&#x5165;&#x6027;&#x6846;&#x67B6;&#xFF0C;&#x76EE;&#x6807;&#x662F;&#x4F7F;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x4EE3;&#x7801;&#x5BF9;&#x6846;&#x67B6;&#x7684;&#x4F9D;&#x8D56;&#x6700;&#x5C0F;&#x5316;&#x3002; &#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x4E00;&#x81F4;&#x7684;&#x7F16;&#x7A0B;&#x6A21;&#x5F0F;&#xFF0C;&#x4F7F;&#x5E94;&#x7528;&#x76F4;&#x63A5;&#x4F7F;&#x7528;POJO&#x5F00;&#x53D1;&#xFF0C;&#x4ECE;&#x800C;&#x53EF;&#x4EE5;&#x4E0E;&#x8FD0;&#x884C;&#x73AF;&#x5883;&#x9694;&#x79BB;&#x5F00;&#x3002; Spring&#x63A8;&#x52A8;&#x5E94;&#x7528;&#x7684;&#x8BBE;&#x8BA1;&#x98CE;&#x683C;&#x5411;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x53CA;&#x9762;&#x5411;&#x63A5;&#x53E3;&#x7F16;&#x7A0B;&#x8F6C;&#x53D8;&#xFF0C;&#x63D0;&#x9AD8;&#x4E86;&#x4EE3;&#x7801;&#x7684;&#x91CD;&#x7528;&#x6027;&#x548C;&#x53EF;&#x6D4B;&#x8BD5;&#x6027; Spring&#x6539;&#x8FDB;&#x4E86;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;&#x5E73;&#x53F0;&#x5207;&#x6362;&#x7684;&#x9009;&#x62E9;&#x6027;&#xFF0C;&#x964D;&#x4F4E;&#x4E86;&#x98CE;&#x9669;(&#x4F8B;&#x5982;SpringMVC&#xFF0C;Struts&#x4E4B;&#x95F4;&#x7684;&#x5207;&#x6362;&#xFF0C;&#x867D;&#x7136;&#x4E00;&#x822C;&#x4E0D;&#x8FD9;&#x6837;&#x505A;)&#x3002; &#x672C;&#x6587;&#x53C2;&#x8003;&#xFF1A; Spring&#x6280;&#x672F;&#x5185;&#x5E55; &#x8BA1;&#x6587;&#x67EF; Spring&#x6E90;&#x7801;&#x6DF1;&#x5EA6;&#x89E3;&#x6790; &#x90DD;&#x4F73; &#x7801;&#x519C;&#x7FFB;&#x8EAB; &#x5218;&#x6B23; Spring5 &#x7CFB;&#x7EDF;&#x67B6;&#x6784; Spring&#x4E0E;EJB&#x6BD4;&#x8F83; EJB&#x5230;&#x5E95;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x771F;&#x7684;&#x90A3;&#x4E48;&#x795E;&#x79D8;&#x5417; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java集合——HashMap源码分析]]></title>
    <url>%2F2018%2F11%2F18%2Fhashmap01%2F</url>
    <content type="text"><![CDATA[&#x672C;&#x6587;&#x662F;&#x6211;&#x5728;&#x5B66;&#x4E60; java&#x96C6;&#x5408;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x9488;&#x5BF9;HashMap&#x7684;&#x4E00;&#x7BC7;&#x603B;&#x7ED3;&#x6587;&#x7AE0;&#x3002;&#x7531;&#x4E8E;&#x535A;&#x4E3B;&#x662F;&#x975E;&#x79D1;&#x73ED;&#x51FA;&#x8EAB;&#x7A0B;&#x5E8F;&#x5458;&#xFF0C;&#x5728;&#x5B66;&#x4E60;HashMap&#x539F;&#x7406;&#x65F6;&#x9047;&#x5230;&#x4E86;&#x5F88;&#x591A;&#x56F0;&#x96BE;&#xFF0C;&#x6240;&#x4EE5;&#x5982;&#x679C;&#x4F60;&#x548C;&#x535A;&#x4E3B;&#x4E00;&#x6837;&#xFF0C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x57FA;&#x7840;&#x4E5F;&#x4E0D;&#x624E;&#x5B9E;&#x751A;&#x81F3;&#x662F;&#x6CA1;&#x6709;&#x57FA;&#x7840;&#xFF0C;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x53EF;&#x80FD;&#x4E5F;&#x975E;&#x5E38;&#x9002;&#x5408;&#x4F60;&#xFF01; &#x672C;&#x6587;&#x57FA;&#x4E8E;jdk1.8&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x7EA2;&#x9ED1;&#x6811;&#x90E8;&#x5206;&#x5206;&#x6790; &#x4EE5;&#x4E0B;&#x662F;&#x672C;&#x6587;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x53EF;&#x6839;&#x636E;&#x9700;&#x8981;&#x8DF3;&#x8F6C;&#x5230;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E0D;&#x5FC5;&#x6309;&#x987A;&#x5E8F;&#x9605;&#x8BFB;&#xFF01; &#x4E00;&#x3001;&#x9884;&#x5907;&#x77E5;&#x8BC6;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7528;&#x6765;&#x5EA6;&#x91CF;&#x7B97;&#x6CD5;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x95F4;&#xFF0C;&#x8BB0;&#x4F5C;: T(n) = O(f(n))&#x3002;&#x5B83;&#x8868;&#x793A;&#x968F;&#x7740;&#x8F93;&#x5165; n &#x7684;&#x589E;&#x5927;&#xFF0C;&#x7B97;&#x6CD5;&#x6267;&#x884C;&#x9700;&#x8981;&#x7684;&#x65F6;&#x95F4;&#x7684;&#x589E;&#x957F;&#x901F;&#x5EA6;&#x53EF;&#x4EE5;&#x7528; f(n) &#x6765;&#x63CF;&#x8FF0;&#x3002;&#x6E10;&#x8FDB;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7528;&#x5927;&#x5199;O&#x6765;&#x8868;&#x793A;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x88AB;&#x79F0;&#x4E3A;&#x5927; O&#x8868;&#x793A;&#x6CD5;&#x3002; &#x5E38;&#x7528;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x6BD4;&#x8F83;: O(1)&lt;O(log n)&lt;O(n)&lt;O(nlog n)&lt;O(n^2) &#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#xFF0C;&#x7B97;&#x6CD5;&#x6267;&#x884C;&#x6548;&#x7387;&#x9010;&#x6E10;&#x4E0B;&#x964D;, &#x4E86;&#x89E3;&#x66F4;&#x591A;&#xFF1A; &#x5341;&#x5206;&#x949F;&#x641E;&#x5B9A;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF08;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF09; &#x4E00;&#x5957;&#x56FE; &#x5F7B;&#x5E95;&#x660E;&#x767D;&#x4E86;&#x201C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x201D; &#x57FA;&#x672C;&#x6570;&#x636E;&#x7ED3;&#x6784;HashMap&#x4E3B;&#x5E72;&#x662F;&#x54C8;&#x5E0C;&#x8868;&#xFF0C;&#x8FD9;&#x4E4B;&#x524D;&#x5148;&#x4E86;&#x89E3;&#x4E00;&#x4E0B;&#x5176;&#x4ED6;&#x51E0;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x6027;&#x80FD;&#x3002; &#x6570;&#x7EC4;&#x91C7;&#x7528;&#x4E00;&#x6BB5;&#x8FDE;&#x7EED;&#x7684;&#x5B58;&#x50A8;&#x5355;&#x5143;&#x6765;&#x5B58;&#x50A8;&#x6570;&#x636E;&#x3002;&#x5BF9;&#x4E8E;&#x6307;&#x5B9A;&#x4E0B;&#x6807;&#x7684;&#x67E5;&#x627E;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; O(1)&#xFF1B;&#x901A;&#x8FC7;&#x7ED9;&#x5B9A;&#x503C;&#x8FDB;&#x884C;&#x67E5;&#x627E;&#xFF08;&#x987A;&#x5E8F;&#x67E5;&#x627E;&#xFF09;&#xFF0C;&#x9700;&#x8981;&#x904D;&#x5386;&#x6570;&#x7EC4;&#xFF0C;&#x9010;&#x4E00;&#x6BD4;&#x5BF9;&#x7ED9;&#x5B9A;&#x5173;&#x952E;&#x5B57;&#x548C;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; O(n)&#xFF1B;&#x5BF9;&#x4E8E;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#xFF0C;&#x53EF;&#x91C7;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#xFF0C;&#x63D2;&#x503C;&#x67E5;&#x627E;&#xFF0C;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x67E5;&#x627E;&#x7B49;&#x65B9;&#x5F0F;&#xFF0C;&#x53EF;&#x5C06;&#x67E5;&#x627E;&#x590D;&#x6742;&#x5EA6;&#x63D0;&#x9AD8;&#x4E3A; O(logn)&#xFF1B;&#x5BF9;&#x4E8E;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#x7684;&#x63D2;&#x5165;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#xFF0C;&#x6D89;&#x53CA;&#x5230;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#x7684;&#x79FB;&#x52A8;&#xFF0C;&#x5176;&#x5E73;&#x5747;&#x590D;&#x6742;&#x5EA6;&#x4E3A; O(n)&#xFF1B;&#x53E6;&#x5916;&#x4FEE;&#x6539;&#x548C;&#x67E5;&#x627E;&#x5B9E;&#x73B0;&#x590D;&#x6742;&#x5EA6;&#x76F8;&#x540C;&#x3002; &#x94FE;&#x8868;&#x4E0D;&#x662F;&#x6309;&#x7EBF;&#x6027;&#x7684;&#x987A;&#x5E8F;&#x5B58;&#x50A8;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x662F;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x91CC;&#x5B58;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488;(Pointer)&#x3002;&#x5BF9;&#x4E8E;&#x94FE;&#x8868;&#x7684;&#x65B0;&#x589E;&#xFF0C;&#x5220;&#x9664;&#x7B49;&#x64CD;&#x4F5C;&#xFF08;&#x5728;&#x627E;&#x5230;&#x6307;&#x5B9A;&#x64CD;&#x4F5C;&#x4F4D;&#x7F6E;&#x540E;&#xFF09;&#xFF0C;&#x4EC5;&#x9700;&#x5904;&#x7406;&#x7ED3;&#x70B9;&#x95F4;&#x7684;&#x5F15;&#x7528;&#x5373;&#x53EF;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; O(1)&#xFF0C;&#x800C;&#x67E5;&#x627E;&#x64CD;&#x4F5C;&#x9700;&#x8981;&#x904D;&#x5386;&#x94FE;&#x8868;&#x9010;&#x4E00;&#x8FDB;&#x884C;&#x6BD4;&#x5BF9;&#xFF0C;&#x590D;&#x6742;&#x5EA6;&#x4E3A; O(n)&#x3002; &#x6570;&#x7EC4;&#x4E0E;&#x94FE;&#x8868;&#x7684;&#x6839;&#x636E;&#x6307;&#x5B9A;&#x503C;&#x67E5;&#x8BE2;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x662F;O(1),&#x4F46;&#x6570;&#x7EC4;&#x66F4;&#x5FEB;1. &#x94FE;&#x8868;&#x9700;&#x8981;&#x5728;&#x904D;&#x5386;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6BD4;&#x6570;&#x7EC4;&#x66F4;&#x591A;&#x7684;&#x5BFB;&#x5740;&#x64CD;&#x4F5C; 2. CPU&#x7F13;&#x5B58;&#x4F1A;&#x628A;&#x4E00;&#x7247;&#x8FDE;&#x7EED;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x8BFB;&#x5165;&#xFF0C;&#x56E0;&#x4E3A;&#x6570;&#x7EC4;&#x7ED3;&#x6784;&#x662F;&#x8FDE;&#x7EED;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;&#xFF0C;&#x6240;&#x4EE5;&#x6570;&#x7EC4;&#x5168;&#x90E8;&#x6216;&#x8005;&#x90E8;&#x5206;&#x5143;&#x7D20;&#x88AB;&#x8FDE;&#x7EED;&#x5B58;&#x5728;CPU&#x7F13;&#x5B58;&#x91CC;&#x9762;&#xFF0C;&#x800C;&#x94FE;&#x8868;&#x5219;&#x4E0D;&#x4F1A; &#x7EA2;&#x9ED1;&#x6811;&#x662F;&#x4E00;&#x79CD;&#x81EA;&#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;O(log n)&#x65F6;&#x95F4;&#x5185;&#x505A;&#x67E5;&#x627E;&#xFF0C;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664;&#xFF0C;jdk8&#x4E4B;&#x540E;HashMap&#x6876;&#x5185;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x8D85;&#x8FC7;&#x6811;&#x5316;&#x9600;&#x503C;&#x4E14;&#x603B;&#x957F;&#x5EA6;&#x8D85;&#x8FC7;&#x6700;&#x5C0F;&#x6811;&#x5316;&#x5BB9;&#x91CF;&#x540E;&#x4F1A;&#x5C06;&#x94FE;&#x8868;&#x8F6C;&#x6362;&#x4E3A;&#x7EA2;&#x9ED1;&#x6811;&#x3002; &#x6563;&#x5217;&#x8868;&#x6563;&#x5217;&#x8868;(Hash table&#xFF0C;&#x4E5F;&#x53EB;&#x54C8;&#x5E0C;&#x8868;)&#x662F;&#x4E00;&#x79CD;&#x6839;&#x636E; key-value&#x8FDB;&#x884C;&#x8BBF;&#x95EE;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x5728;&#x6563;&#x5217;&#x8868;&#x4E2D;&#x8FDB;&#x884C;&#x6DFB;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x67E5;&#x627E;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x6027;&#x80FD;&#x5341;&#x5206;&#x4E4B;&#x9AD8;&#xFF0C;&#x4E0D;&#x8003;&#x8651;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4EC5;&#x9700;&#x4E00;&#x6B21;&#x5B9A;&#x4F4D;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(1)&#x3002;&#x54C8;&#x5E0C;&#x8868;&#x662F; HashMap&#x4E3B;&#x5E72;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x5206;&#x6790; HashMap&#x524D;&#x8981;&#x5148;&#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x4E00;&#x4E0B;&#x54C8;&#x5E0C;&#x8868;&#x3002; &#x6563;&#x5217;&#x8868;(Hash table)&#xFF0C;&#x662F;&#x6839;&#x636E;&#x952E;&#xFF08;Key&#xFF09;&#x800C;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x5728;&#x5185;&#x5B58;&#x5B58;&#x50A8;&#x4F4D;&#x7F6E;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x901A;&#x8FC7;&#x8BA1;&#x7B97;&#x4E00;&#x4E2A;&#x5173;&#x4E8E;&#x952E;&#x503C;&#x7684;&#x51FD;&#x6570;f(x)&#xFF0C;&#x5C06;&#x6240;&#x9700;&#x67E5;&#x8BE2;&#x7684;&#x6570;&#x636E;&#x6620;&#x5C04;&#x5230;&#x8868;&#x4E2D;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x6765;&#x8BBF;&#x95EE;&#x8BB0;&#x5F55;&#xFF0C;&#x8FD9;&#x52A0;&#x5FEB;&#x4E86;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x3002;&#x8FD9;&#x4E2A;&#x6620;&#x5C04;&#x51FD;&#x6570;f(x)&#x79F0;&#x505A;&#x6563;&#x5217;&#x51FD;&#x6570;&#xFF0C;&#x5B58;&#x653E;&#x8BB0;&#x5F55;&#x7684;&#x6570;&#x7EC4;&#x79F0;&#x505A;&#x6563;&#x5217;&#x8868;&#x3002; &#x6563;&#x5217;&#x51FD;&#x6570;(Hash function)&#xFF0C;&#x7ECF;&#x6563;&#x5217;&#x51FD;&#x6570;&#x6620;&#x8C61;&#x5230;&#x5730;&#x5740;&#x96C6;&#x5408;&#x4E2D;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5730;&#x5740;&#x7684;&#x6982;&#x7387;&#x662F;&#x76F8;&#x7B49;&#x7684;&#xFF0C;&#x5219;&#x79F0;&#x6B64;&#x7C7B;&#x6563;&#x5217;&#x51FD;&#x6570;&#x4E3A;&#x5747;&#x5300;&#x6563;&#x5217;&#x51FD;&#x6570;(Uniform Hash function)&#xFF0C;&#x6563;&#x5217;&#x51FD;&#x6570;&#x7684;&#x8BBE;&#x8BA1;&#x81F3;&#x5173;&#x91CD;&#x8981;&#xFF0C;&#x597D;&#x7684;&#x6563;&#x5217;&#x51FD;&#x6570;&#x4F1A;&#x5C3D;&#x53EF;&#x80FD;&#x5730;&#x4FDD;&#x8BC1; &#x8BA1;&#x7B97;&#x7B80;&#x5355;&#x548C;&#x6563;&#x5217;&#x5730;&#x5740;&#x5206;&#x5E03;&#x5747;&#x5300;&#x3002;&#x6563;&#x5217;&#x51FD;&#x6570;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x5305;&#x62EC;&#x76F4;&#x63A5;&#x5B9A;&#x5740;&#x6CD5;&#xFF0C;&#x968F;&#x673A;&#x6570;&#x6CD5;&#xFF0C;&#x9664;&#x7559;&#x4F59;&#x6570;&#x6CD5;&#x7B49;&#x3002; &#x51B2;&#x7A81;(Collision)&#xFF1A;&#x5BF9;&#x4E0D;&#x540C;&#x7684;Key&#x53EF;&#x80FD;&#x5F97;&#x5230;&#x540C;&#x4E00;&#x6563;&#x5217;&#x5730;&#x5740;&#xFF0C;&#x5373;k1&#x2260; k2&#xFF0C;&#x800C; f(k1)=f(k2)&#xFF0C;&#x518D;&#x597D;&#x7684;&#x6563;&#x5217;&#x51FD;&#x6570;&#x4E5F;&#x65E0;&#x6CD5;&#x907F;&#x514D;&#x51B2;&#x7A81;&#x3002;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#x5C31;&#x8981;&#x8FDB;&#x884C;&#x5904;&#x7406;&#xFF0C;&#x901A;&#x5E38;&#x5904;&#x7406;&#x51B2;&#x7A81;&#x7684;&#x65B9;&#x6CD5;&#x6709;&#x5F00;&#x53D1;&#x5B9A;&#x5740;&#x6CD5;&#xFF0C;&#x5355;&#x72EC;&#x94FE;&#x8868;&#x6CD5;&#xFF0C;&#x53CC;&#x6563;&#x5217;&#xFF0C;&#x518D;&#x6563;&#x5217;&#x7B49;&#x3002;&#x5728;java&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x5355;&#x72EC;&#x94FE;&#x8868;&#x6CD5;&#x3002; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; &#x5047;&#x8BBE;&#x6709;&#x4E2A;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x4E3A;4&#x6570;&#x7EC4;(&#x6BCF;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x90FD;&#x53EB;&#x6876;bucket)&#xFF0C;&#x8FD9;&#x91CC;&#x6709;3&#x4E2A;&#x4EBA;&#x8D75;&#x56DB;&#xFF0C;&#x94B1;&#x4E94;&#xFF0C;&#x5B59;&#x516D;&#x8981;&#x88C5;&#x8FDB;&#x53BB;&#xFF0C;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x89C4;&#x5219;&#xFF0C;&#x6309;&#x59D3;&#x6C0F;&#x5728;&#x767E;&#x5BB6;&#x59D3;&#x4E2D;&#x7684;&#x987A;&#x5E8F;&#x9664;&#x4EE5;&#x56DB;&#x5F97;&#x5230;&#x7684;&#x4F59;&#x6570;&#x4F5C;&#x4E3A;&#x7D22;&#x5F15;&#x653E;&#x5165;&#x56DB;&#x4E2A;&#x4F4D;&#x7F6E;&#x3002; &#x5F53;&#x524D;&#x5B58;&#x653E;&#x4E09;&#x4E2A;&#x4EBA;&#x8BB0;&#x5F55;&#x7684;&#x6570;&#x7EC4;&#x5C31;&#x662F;&#x6563;&#x5217;&#x8868;&#xFF0C;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x7684;&#x89C4;&#x5219;&#x5C31;&#x662F;&#x6563;&#x5217;&#x51FD;&#x6570;&#xFF0C;&#x6839;&#x636E;&#x6563;&#x5217;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x6620;&#x5C04;&#x7684;&#x8FC7;&#x7A0B;&#x53EB;&#x505A;&#x6563;&#x5217;&#x8FC7;&#x7A0B;&#x3002; &#x5982;&#x679C;&#x53C8;&#x6765;&#x4E00;&#x4E2A;&#x4EBA;&#x53EB;&#x5468;&#x65E5;&#xFF0C;&#x6839;&#x636E;&#x6211;&#x4EEC;&#x7684;&#x89C4;&#x5219;&#xFF0C;&#x5468;&#x65E5;&#x4E5F;&#x8981;&#x843D;&#x5728;1&#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#xFF0C;&#x6B64;&#x65F6;&#x5C31;&#x4EA7;&#x751F;&#x4E86;&#x51B2;&#x7A81;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x5355;&#x72EC;&#x94FE;&#x8868;&#x6CD5;&#x5904;&#x7406;&#xFF0C;&#x628A;&#x5468;&#x5929;&#x653E;&#x5728;&#x7D22;&#x5F15;&#x4E3A;&#x4E00;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x8D75;&#x56DB;&#x6784;&#x6210;&#x94FE;&#x8868;&#xFF08;&#x65B0;&#x5143;&#x7D20;&#x662F;&#x653E;&#x5728;&#x94FE;&#x8868;&#x524D;&#x7AEF;&#x8FD8;&#x662F;&#x540E;&#x7AEF;&#x5B8C;&#x5168;&#x662F;&#x53D6;&#x51B3;&#x4E8E;&#x600E;&#x4E48;&#x65B9;&#x4FBF;&#xFF09;&#x3002; &#x6563;&#x5217;&#x8868;&#x67E5;&#x627E;&#x662F;&#x5C31;&#x662F;&#x5148;&#x627E;&#x5230;&#x6876;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x518D;&#x904D;&#x5386;&#x67E5;&#x627E;&#x9700;&#x8981;&#x7684;&#x6570;&#x636E;&#x3002;&#x5982;&#x679C;&#x6563;&#x5217;&#x51FD;&#x6570;&#x8BBE;&#x8BA1;&#x7684;&#x4E0D;&#x597D;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x5143;&#x7D20;&#x90FD;&#x843D;&#x5728;&#x4E00;&#x4E2A;&#x6876;&#x91CC;&#x90A3;&#x6548;&#x7387;&#x5C31;&#x7279;&#x522B;&#x4F4E;&#xFF0C;&#x548C;&#x5355;&#x94FE;&#x8868;&#x968F;&#x673A;&#x8BBF;&#x95EE;&#x6CA1;&#x4EC0;&#x4E48;&#x533A;&#x522B;&#x3002; &#x57FA;&#x672C;&#x4F4D;&#x8FD0;&#x7B97; &#x8FD0;&#x7B97;&#x7B26; &#x8BA1;&#x7B97;&#x65B9;&#x5F0F; &#x4E0E; &amp; &#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x6570;&#x540C;&#x4E00;&#x4F4D;&#x90FD;&#x662F;1&#x624D;&#x4F1A;&#x8FD4;&#x56DE;1 &#x6216; l &#x4E24;&#x4E2A;&#x6570;&#x540C;&#x4E00;&#x4F4D;&#x53EA;&#x8981;&#x5B58;&#x5728;&#x4E00;&#x4E2A;1&#x5C31;&#x662F;1 &#x5F02;&#x6216; ^ &#x4E24;&#x4E2A;&#x6570;&#x540C;&#x4E00;&#x4F4D;&#x4E0D;&#x80FD;&#x76F8;&#x540C;&#x624D;&#x4E3A;1 &#x5DE6;&#x79FB; &lt;&lt; &#x6240;&#x6709;&#x4F4D;&#x7F6E;&#x5DE6;&#x79FB;&#xFF0C;&#x4F4E;&#x4F4D;&#x8865;0 &#x53F3;&#x79FB; &gt;&gt; &#x6B63;&#x6570;&#xFF1A;&#x6240;&#x6709;&#x4F4D;&#x7F6E;&#x53F3;&#x79FB;&#xFF0C;&#x9AD8;&#x4F4D;&#x8865;0&#x8D1F;&#x6570;&#xFF1A;&#x5199;&#x51FA;&#x8865;&#x7801;&#xFF08;&#x7B26;&#x53F7;&#x4F4D;&#x4E0D;&#x53D8;&#xFF0C;&#x5176;&#x4F59;&#x4F4D;&#x7F6E;&#x53D6;&#x53CD;&#xFF0C;&#x7136;&#x540E;&#x52A0;1&#xFF09;&#xFF0C;&#x6240;&#x6709;&#x4F4D;&#x7F6E;&#x53F3;&#x79FB;&#x9AD8;&#x4F4D;&#x8865;1&#xFF0C;&#x7136;&#x540E;&#x518D;&#x83B7;&#x53D6;&#x539F;&#x7801;&#xFF08;&#x7B26;&#x53F7;&#x4F4D;&#x4E0D;&#x53D8;&#xFF0C;&#x5176;&#x4F59;&#x4F4D;&#x7F6E;&#x53D6;&#x53CD;&#xFF0C;&#x7136;&#x540E;&#x52A0;1&#xFF09; &#x65E0;&#x7B26;&#x53F7;&#x53F3;&#x79FB; &gt;&gt;&gt; &#x65E0;&#x8BBA;&#x6B63;&#x8D1F;&#x9AD8;&#x4F4D;&#x8865;0 &#x4E86;&#x89E3;&#x66F4;&#x591A;&#xFF1A; &#x8D1F;&#x6570;&#x7684;&#x5E26;&#x7B26;&#x53F7;&#x548C;&#x4E0D;&#x5E26;&#x7B26;&#x53F7;&#x7684;&#x53F3;&#x79FB;&#x8FD0;&#x7B97; &#x4F4D;&#x8FD0;&#x7B97;&#x7B26;&#x8BE6;&#x89E3; &#x4E8C;&#x3001;HashMap&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x7ED3;&#x6784;Node&#x662F; HashMap&#x7684;&#x9759;&#x6001;&#x5185;&#x90E8;&#xFF0C;HashMap&#x4E3B;&#x5E72;&#x662F;&#x4E00;&#x4E2A;Node&#x6570;&#x7EC4;&#xFF0C;Node&#x662F;HashMap&#x7684;&#x6700;&#x57FA;&#x672C;&#x7EC4;&#x6210;&#x5355;&#x4F4D;&#x3002; 12// HashMap&#x7684;&#x4E3B;&#x5E72;&#x6570;&#x7EC4;transient Node&lt;K,V&gt;[] table; Node 1234567891011121314151617181920static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; { // &#x8FD9;&#x4E2A;&#x8282;&#x70B9;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x7684;hash&#x503C; final int hash; final K key; V value; // &#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5F15;&#x7528; Node&lt;K,V&gt; next; /** * &#x6784;&#x9020;&#x65B9;&#x6CD5; */ Node(int hash, K key, V value, Node&lt;K,V&gt; next) { this.hash = hash; this.key = key; this.value = value; this.next = next; } &#x2026;&#x2026;&#x2026;&#x2026;(&#x5176;&#x4ED6;get(),set()&#x7B49;&#x65B9;&#x6CD5;&#x7701;&#x7565;) } &#x5728;jdk8&#x4E4B;&#x524D;HashMap&#x662F;&#x6570;&#x7EC4;&#x52A0;&#x94FE;&#x8868;&#x7684;&#x5F62;&#x5F0F;&#x5B9E;&#x73B0;&#xFF0C;&#x4F46;&#x662F;&#x5728;1.8&#x4E4B;&#x540E;&#x4E3A;&#x63D0;&#x9AD8;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x540E;&#x94FE;&#x8868;&#x7684;&#x67E5;&#x8BE2;&#x901F;&#x5EA6;&#xFF0C;&#x5F53;&#x6876;&#x5185;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x8D85;&#x8FC7;&#x6811;&#x5316;&#x9600;&#x503C;&#x4E14;&#x603B;&#x957F;&#x5EA6;&#x8D85;&#x8FC7;&#x6700;&#x5C0F;&#x6811;&#x5316;&#x5BB9;&#x91CF;&#x540E;&#x4F1A;&#x5C06;&#x94FE;&#x8868;&#x8F6C;&#x6362;&#x4E3A;&#x7EA2;&#x9ED1;&#x6811;&#x3002; jdk7 jdk8 &#x901F;&#x5EA6;&#x67E5;&#x8BE2;&#x4E0E;&#x4FEE;&#x6539;&#x5148;&#x7528;&#x6563;&#x5217;&#x51FD;&#x6570;&#x5BF9;&#x952E;&#x8FDB;&#x884C;&#x6563;&#x5217;&#xFF0C;&#x6CA1;&#x6709;&#x51B2;&#x7A81;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x67E5;&#x8BE2;&#x662F;&#x4E0B;&#x6807;&#x67E5;&#x8BE2;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; O(1),&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#x3002; &#x5B58;&#x5728;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x9700;&#x8981;&#x5BF9;&#x94FE;&#x8868;/&#x7EA2;&#x9ED1;&#x6811;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;equals&#x6BD4;&#x5BF9;&#x67E5;&#x8BE2;&#x3002; &#x6027;&#x80FD;&#x4E0A;&#xFF0C;&#x8003;&#x8651;&#x662F;&#x94FE;&#x8868;/&#x7EA2;&#x9ED1;&#x6811;&#x4E0A;&#x7684;&#x5143;&#x7D20;&#x8D8A;&#x662F;&#x8D8A;&#x597D;&#xFF0C;&#x8D8A;&#x5747;&#x5300;&#x8D8A;&#x597D;&#xFF1B;&#x6B64;&#x5916;HashMap&#x4E3B;&#x5E72;&#x672A;&#x5FC5;&#x8D8A;&#x957F;&#x8D8A;&#x597D;&#xFF0C;&#x4F1A;&#x6709;&#x7528;&#x4E0D;&#x5230;&#x7684;&#x6876;&#x6D6A;&#x8D39;&#x7A7A;&#x95F4;&#x3002; &#x589E;&#x52A0;&#x4E0E;&#x5220;&#x9664;&#x7531;&#x4E8E;&#x67E5;&#x8BE2;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x800C;&#x6876;&#x91CC;&#x7528;&#x94FE;&#x8868;/&#x7EA2;&#x9ED1;&#x6811;&#x5B9E;&#x73B0;&#xFF0C;&#x6240;&#x4EE5;&#x6DFB;&#x52A0;&#x548C;&#x5220;&#x9664;&#x6548;&#x7387;&#x4E5F;&#x5F88;&#x9AD8;&#x3002;HashMap&#x4F1A;&#x5728;size&#x8D85;&#x8FC7;&#x9600;&#x503C;&#x540E;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#x5927;&#x4E0B;(resize)&#xFF0C;&#x6240;&#x4EE5;&#x6839;&#x636E;&#x5177;&#x4F53;&#x60C5;&#x51B5;&#x63D0;&#x524D;&#x7ED9;HashMap&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x521D;&#x59CB;&#x957F;&#x5EA6;&#x662F;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x4E60;&#x60EF;&#x3002; &#x4E09;&#x3001;&#x6E90;&#x7801;&#x5206;&#x6790;&#x57FA;&#x672C;&#x5E38;&#x91CF;1234567891011121314151617181920212223// &#x9ED8;&#x8BA4;&#x521D;&#x59CB;&#x957F;&#x5EA6;&#xFF0C;&#x5373;&#x4E3B;&#x5E72;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x5982;&#x679C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x65F6;&#x6CA1;&#x6709;&#x7ED9;&#x957F;&#x5EA6;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;16// &#x5728;&#x660E;&#x786E;&#x77E5;&#x9053;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x5EFA;&#x8BAE;&#x53EF;&#x4EE5;&#x628A;&#x5BB9;&#x91CF;&#x8BBE;&#x7F6E;&#x6210;expectedSize / 0.75F + 1.0F (guava)static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;// &#x6700;&#x5927;&#x5BB9;&#x91CF;,HashMap&#x6700;&#x5927;&#x5BB9;&#x91CF;&#x662F;2^30// &#x56E0;&#x4E3A;int&#x8303;&#x56F4;&#x662F;-2^31&#x2014;&#x2014;2^31-1,&#x4F46;32&#x4F4D;2&#x8FDB;&#x5236;&#x6700;&#x9AD8;&#x4F4D;&#x662F;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x5927;&#x662F;2^30static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;// &#x9ED8;&#x8BA4;&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;0.75&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x65F6;&#x53EF;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;// &#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x8BA1;&#x7B97;&#x6269;&#x5BB9;&#x9600;&#x503C;transient Node&lt;K,V&gt;[] table;static final float DEFAULT_LOAD_FACTOR = 0.75f;// &#x6811;&#x5316;&#x9600;&#x503C;// &#x5F53;&#x67D0;&#x4E00;&#x4E2A;&#x6876;&#x4E2D;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x8D85;&#x8FC7;8&#x65F6;&#x4F1A;&#x8F6C;&#x5316;&#x4E3A;&#x7EA2;&#x9ED1;&#x6811;static final int TREEIFY_THRESHOLD = 8;// &#x53BB;&#x6811;&#x5316;&#x9600;&#x503C;// &#x5F53;&#x4E00;&#x4E2A;&#x6876;&#x91CC;&#x7EA2;&#x9ED1;&#x6811;&#x603B;&#x7ED3;&#x70B9;&#x6570;&#x5C0F;&#x4E8E;6&#x65F6;&#xFF0C;&#x4F1A;&#x8F6C;&#x5316;&#x4E3A;&#x94FE;&#x8868;static final int UNTREEIFY_THRESHOLD = 6;// &#x6700;&#x5C0F;&#x6811;&#x5316;&#x5BB9;&#x91CF;// &#x6811;&#x5316;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x6761;&#x4EF6;&#xFF0C;&#x53EA;&#x6709;&#x4E3B;&#x5E72;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x5927;&#x4E8E;64&#x624D;&#x8FDB;&#x884C;&#x6811;&#x5316;static final int MIN_TREEIFY_CAPACITY = 64; CAPACITY&#x662F; HashMap&#x5BB9;&#x91CF;(&#x4E3B;&#x5E72;&#x6570;&#x7EC4;&#x957F;&#x5EA6;)&#xFF0C;size&#x662F;&#x952E;&#x503C;&#x5BF9;&#x4E2A;&#x6570; &#x57FA;&#x672C;&#x6210;&#x5458;&#x53D8;&#x91CF;123456789101112131415161718// &#x4E3B;&#x5E72;&#x6570;&#x7EC4;transient Node&lt;K,V&gt;[] table;// &#x904D;&#x5386;&#x65F6;&#x7ECF;&#x5E38;&#x7528;&#x5230;transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;// HashMap&#x4E2D;Node&#x7684;&#x603B;&#x4E2A;&#x6570;transient int size;// &#x7528;&#x4E8E;&#x5FEB;&#x901F;&#x5931;&#x8D25;&#xFF0C;HashMap&#x662F;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;,&#x5728;&#x8FED;&#x4EE3;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x7ED3;&#x6784;&#x53D1;&#x751F;&#x6539;&#x53D8;&#xFF0C;&#x4F1A;&#x629B;&#x51FA;ConcurrentModificationExceptiontransient int modCount;// &#x9600;&#x503C;&#xFF0C;&#x662F;&#x5426;&#x8C03;&#x6574;&#x4E3B;&#x5E72;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x7684;&#x6307;&#x6807;// &#x4E00;&#x822C;&#x7531;capacity(&#x4E3B;&#x5E72;&#x6570;&#x7EC4;&#x957F;&#x5EA6;) * loadFactor&#x8BA1;&#x7B97;&#xFF0C;&#x8D85;&#x8FC7;&#x8303;&#x56F4;&#x4F1A;&#x53D6;&#x6700;&#x5927;&#x5BB9;&#x91CF;MAXIMUM_CAPACITYint threshold;//&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#xFF0C;&#x6570;&#x7EC4;&#x7684;&#x586B;&#x5145;&#x91CF;&#xFF0C;&#x8BA1;&#x7B97;&#x9600;&#x503C;&#x4F7F;&#x7528;&#xFF0C;&#x4E0A;&#x9762;&#x6709;&#x4E2A;&#x9ED8;&#x8BA4;&#x7684;0.75Ffinal float loadFactor; &#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E3B;&#x8981;&#x6784;&#x9020;&#x65B9;&#x6CD5;HashMap&#x6709;&#x56DB;&#x79CD;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x8BF4;&#x6700;&#x6838;&#x5FC3;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x53EA;&#x8BF4;&#x4F20;&#x5165;&#x521D;&#x59CB;&#x5BB9;&#x91CF;&#x548C;&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#x8FD9;&#x79CD;&#x3002; 123456789101112131415161718192021/** * &#x6838;&#x5FC3;&#x6784;&#x9020;&#x65B9;&#x6CD5; * @param initialCapacity &#x521D;&#x59CB;&#x5316;&#x5BB9;&#x91CF; * @param loadFactor &#x8D1F;&#x8F7D;&#x56E0;&#x5B50; */public HashMap(int initialCapacity, float loadFactor) { // &#x521D;&#x59CB;&#x5BB9;&#x91CF;&#x5C0F;&#x4E8E;0&#xFF0C;&#x629B;&#x5F02;&#x5E38; if (initialCapacity &lt; 0) throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; + initialCapacity); // &#x5982;&#x679C;&#x5927;&#x4E8E;&#x4E86;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#xFF0C;&#x5C31;&#x8F6C;&#x6210;&#x6700;&#x5927;&#x5BB9;&#x91CF; if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; // &#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#x5C0F;&#x4E8E;0&#x6216;&#x662F;&#x4E2A;&#x975E;&#x6CD5;&#x6570;&#x5B57;(&#x9664;&#x6570;&#x4E3A;0&#x8FD9;&#x79CD;)&#xFF0C;&#x629B;&#x5F02;&#x5E38; if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(&quot;Illegal load factor: &quot; + loadFactor); this.loadFactor = loadFactor; // &#x8FD9;&#x91CC;&#x521D;&#x59CB;&#x5BB9;&#x91CF;&#x8D4B;&#x503C;&#x7ED9;&#x4E86;&#x9600;&#x503C;&#xFF0C;&#x540E;&#x9762;&#x4F1A;&#x7528;&#x5230; this.threshold = tableSizeFor(initialCapacity);} &#x5728;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x5BF9;table&#x8FD9;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316;&#xFF0C;table&#x7684;&#x521D;&#x59CB;&#x5316;&#x88AB;&#x63A8;&#x8FDF;&#x5230;&#x4E86;put&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x5728;put&#x65B9;&#x6CD5;&#x4E2D;&#x4F1A;&#x5BF9;threshold&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x3002; tableSizeFor(initialCapacity)&#x65B9;&#x6CD5;&#x662F;&#x7528;&#x6765;&#x8BA1;&#x7B97;&#x521D;&#x59CB;&#x5BB9;&#x91CF;&#x7684;&#xFF0C;HashMap&#x5BB9;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x4F20;&#x591A;&#x5C11;&#x5C31;&#x662F;&#x591A;&#x5C11;&#xFF0C;&#x800C;&#x4E00;&#x5B9A;&#x662F;2&#x7684;&#x6B21;&#x5E42;&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x6BD4;&#x7ED9;&#x5B9A;&#x5BB9;&#x91CF;&#x5927;&#x7684;&#x6700;&#x5C0F;2&#x7684;&#x6B21;&#x5E42;&#x7684;&#x6570;&#x3002; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;:&#x5982;&#x679C;&#x4F60;&#x7ED9;&#x4E86;9&#xFF0C;&#x6BD4;9&#x5927;&#x7684;&#x6700;&#x5C0F;2&#x7684;&#x6B21;&#x5E42;&#x662F;16(2^4)&#xFF1B;&#x5982;&#x679C;&#x4F60;&#x7ED9;&#x4E2A;27&#xFF0C;&#x6BD4;27&#x5927;&#x7684;&#x6700;&#x5C0F;&#x7684;2&#x7684;&#x6B21;&#x5E42;&#x662F;32(2^5)&#x3002; 123456789101112131415static final int tableSizeFor(int cap) { // &#x5148;&#x662F;&#x5C06;cap&#x51CF;1&#xFF0C;&#x5426;&#x5219;&#xFF0C;&#x5982;&#x679C;cap&#x662F;2&#x7684;&#x6B21;&#x5E42;&#xFF0C;&#x4F8B;&#x5982;16&#xFF0C;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x5C31;&#x662F;32&#xFF0C;&#x662F;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x7684;&#x5BB9;&#x91CF;&#x7684;2&#x500D; int n = cap - 1; // &#x8FD9;&#x91CC;&#x662F;&#x5148;&#x5C06;n&#x65E0;&#x7B26;&#x53F7;&#x53F3;&#x79FB;&#xFF0C;&#x518D;&#x4E0E;n&#x8FDB;&#x884C;&#x6216;&#x8FD0;&#x7B97;&#x5E76;&#x8D4B;&#x503C;&#x7ED9;n // &#x8FD9;&#x6837;&#x597D;&#x7406;&#x89E3;&#x4E00;&#x70B9; =&gt; n = n | (n &gt;&gt;&gt; 1) n |= n &gt;&gt;&gt; 1; n |= n &gt;&gt;&gt; 2; n |= n &gt;&gt;&gt; 4; n |= n &gt;&gt;&gt; 8; n |= n &gt;&gt;&gt; 16; // &#x5982;&#x679C;n&lt;0&#x8FD4;&#x56DE;1 // &#x5982;&#x679C;n&gt;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#x8FD4;&#x56DE;&#x6700;&#x5927;&#x5BB9;&#x91CF; // &#x5426;&#x5219;&#x8FD4;&#x56DE; n+1 return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;} &#x89E3;&#x91CA;&#xFF1A; n=0 &#x7ECF;&#x8FC7;&#x51E0;&#x6B21;&#x6B21;&#x65E0;&#x7B26;&#x53F7;&#x53F3;&#x79FB;&#x8FD8;&#x662F;0&#xFF0C;&#x6700;&#x540E;&#x8FD4;&#x56DE;n+1&#x662F;1 n&gt;0 &#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#x56FE;&#x6F14;&#x793A;&#x524D;&#x4E09;&#x6B65;&#x79FB;&#x52A8;&#x7684;&#x8FC7;&#x7A0B; &#x5269;&#x4E0B;&#x7684;&#x5927;&#x5BB6;&#x8111;&#x8865;&#xFF0C;&#x6700;&#x540E;&#x7B97;&#x51FA;&#x6765;&#x5C31;&#x662F;32&#x4F4D;&#x4EE5;&#x5185;&#x6700;&#x9AD8;&#x4F4D;&#x90A3;&#x4E2A;1&#x540E;&#x9762;&#x8DDF;&#x7684;&#x90FD;&#x662F;1&#xFF0C;&#x7136;&#x540E;n&#x2260;1&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4F1A;&#x52A0;&#x4E2A;1&#xFF0C;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x8981;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x91CC;&#x7ED3;&#x679C;&#x662F;2^8&#xFF0C;&#x539F;&#x6765;&#x90A3;&#x4E2A;&#x663E;&#x7136;&#x662F;&#x5927;&#x4E8E;2^7&#x7684;&#x4E00;&#x4E2A;&#x6570;&#x3002;&#x770B;&#x5B8C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x662F;&#x4E0D;&#x662F;&#x89C9;&#x5F97;&#x201D;&#x5999;&#x554A;&#xFF01;&#x201D;&#xFF0C;&#x6211;&#x4E5F;&#x89C9;&#x5F97;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x597D;&#x673A;&#x667A;&#xFF0C;&#x54C8;&#x54C8;&#x3002; &#x5176;&#x4ED6;&#x6784;&#x9020;&#x65B9;&#x6CD5;1234567public HashMap(int initialCapacity) { this(initialCapacity, DEFAULT_LOAD_FACTOR);}public HashMap() { this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted} &#x4EE5;&#x4E0A;&#x51E0;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x90FD;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x7684;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5207;&#x5B9E;&#x5B58;&#x5728;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x4ED6;&#x4EEC;&#x90FD;&#x662F;&#x5728;&#x4E3A;&#x521B;&#x5EFA;&#x6570;&#x7EC4;&#x9700;&#x8981;&#x7684;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x505A;&#x521D;&#x59CB;&#x5316;&#xFF0C;table&#x7684;&#x521D;&#x59CB;&#x5316;&#x88AB;&#x63A8;&#x8FDF;&#x5230;&#x4E86;put&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x51E0;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x7684;&#x5C5E;&#x6027;&#x90FD;&#x4F1A;&#x5728;&#x5B9E;&#x9645;&#x521D;&#x59CB;&#x5316;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#x7528;&#x9ED8;&#x8BA4;&#x503C;&#x66FF;&#x6362;&#x3002; &#x8FD9;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x6709;put&#x8FC7;&#x7A0B;&#xFF0C;table&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x521D;&#x59CB;&#x5316; 1234public HashMap(Map&lt;? extends K, ? extends V&gt; m) { this.loadFactor = DEFAULT_LOAD_FACTOR; putMapEntries(m, false);} &#x5C0F;&#x7ED3;1.&#x6784;&#x9020;&#x51FD;&#x6570;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5BB9;&#x91CF;&#xFF08;&#x4E3B;&#x5E72;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#xFF09;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;initialCapacity&#x7684;&#x6700;&#x5C0F;&#x7684;2&#x7684;&#x5E42;&#x957F;&#x5EA6;&#x7684;HashMap2.&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#x53EF;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;3.&#x591A;&#x6570;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x521D;&#x59CB;&#x5316;table,table&#x521D;&#x59CB;&#x5316;&#x7684;&#x8FC7;&#x7A0B;&#x662F;&#x5728;put&#x65B9;&#x6CD5;&#x4E2D;&#x5B8C;&#x6210;&#x7684; put&#x65B9;&#x6CD5;putput&#x65B9;&#x6CD5;&#x662F;&#x4E00;&#x4E2A;&#x91CD;&#x70B9;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x91CC;&#x6709; HashMap&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x6570;&#x636E;&#x5728; HashMap&#x4E2D;&#x662F;&#x5982;&#x4F55;&#x50A8;&#x5B58;&#x7684;&#xFF0C;&#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;&#x94FE;&#x8868;&#x4F1A;&#x8F6C;&#x6362;&#x4E3A;&#x7EA2;&#x9ED1;&#x6811;&#x7B49;&#x5185;&#x5BB9;&#xFF0C;&#x9700;&#x8981;&#x4ED4;&#x7EC6;&#x7814;&#x7A76;&#x3002; 1234public V put(K key, V value) { //&#x8FD9;&#x91CC;&#x7EE7;&#x7EED;&#x8C03;&#x7528;putVal&#x65B9;&#x6CD5; return putVal(hash(key), key, value, false, true);} putValputVal&#x662F;final&#x4FEE;&#x9970;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5B50;&#x7C7B; LinkedHashMap&#x4E5F;&#x662F;&#x7528;&#x7684;&#x8FD9;&#x5404;&#x65B9;&#x6CD5;&#xFF0C;evict&#xFF08;&#x770B;&#x4E0B;&#x9762;&#x7684;&#x7684;&#x7B2C;5&#x4E2A;&#x53C2;&#x6570;&#xFF09;&#x5C31;&#x662F;&#x7ED9; LinkedHashMap&#x4F7F;&#x7528;&#x7684;&#xFF0C;HashMap&#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x7528;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192/** * &#x771F;&#x6B63;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x64CD;&#x4F5C;&#x7684;&#x65B9;&#x6CD5;&#xFF0C; * hash &#x4F20;&#x5165;key&#x7684;&#x54C8;&#x5E0C;&#x503C; * onlyIfAbsent &#x5982;&#x679C;&#x8BE5;&#x503C;&#x662F;true,&#x5982;&#x679C;&#x5B58;&#x5728;&#x503C;&#x5C31;&#x4E0D;&#x4F1A;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x64CD;&#x4F5C; * evict LinekdHashMap&#x5C3E;&#x64CD;&#x4F5C;&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x91CC;&#x6682;&#x65E0;&#x7528;&#x9014; */final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; /**********&#x521D;&#x59CB;&#x5316;********/ // &#x5982;&#x679C;table&#x957F;&#x5EA6;&#x662F;0&#x6216;table&#x662F;null&#x4F1A;&#x8C03;&#x6574;&#x4E00;&#x6B21;&#x5927;&#x5C0F; // &#x8FD9;&#x65F6;tab&#x4F1A;&#x6307;&#x5411;&#x8C03;&#x6574;&#x5927;&#x4E0B;&#x540E;&#x7684;Node&lt;K,V&gt;[](&#x4E3B;&#x5E72;&#x6570;&#x7EC4;) // n&#x88AB;&#x8D4B;&#x503C;&#x4E3A;&#x65B0;&#x6570;&#x7EC4;&#x957F;&#x5EA6; // &#x5982;&#x679C;&#x6CA1;&#x6709;&#x8C03;&#x6574;&#x5927;&#x5C0F;&#xFF0C;tab&#x6307;&#x5411;table if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; /********&#x5F00;&#x59CB;&#x67E5;&#x627E;&#x952E;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5E76;&#x5B58;&#x50A8;value*******/ // i = (n - 1) &amp; hash&#x8FD9;&#x4E2A;&#x662F;&#x83B7;&#x53D6;key&#x5E94;&#x8BE5;&#x5728;&#x54EA;&#x4E2A;&#x6876;&#x91CC;,&#x4E0B;&#x9762;&#x8BE6;&#x8BF4; // &#x8FD9;&#x91CC;&#x5C06;p&#x6307;&#x5411;&#x5F53;&#x524D;key&#x6240;&#x9700;&#x8981;&#x7684;&#x90A3;&#x4E2A;&#x6876; if ((p = tab[i = (n - 1) &amp; hash]) == null) // &#x5982;&#x679C;&#x7A7A;&#x6876;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x65E0;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x76F4;&#x63A5;&#x4E22;&#x4E2A;Node&#x8FDB;&#x53BB;&#x3002; // &#x6B64;&#x65F6;&#x7684;tab&#x5C31;&#x662F;table tab[i] = newNode(hash, key, value, null); //&#x5B58;&#x5728;&#x51B2;&#x7A81;&#xFF0C;&#x5F00;&#x59CB;&#x5BFB;&#x627E;&#x6211;&#x4EEC;&#x8981;&#x627E;&#x7684;&#x8282;&#x70B9; else { Node&lt;K,V&gt; e; K k; // &#x5224;&#x65AD;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x662F;&#x4E0D;&#x662F;&#x6211;&#x4EEC;&#x627E;&#x7684; // &#x6B64;&#x65F6;k&#x50A8;&#x5B58;&#x4E86; p.key if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) // hash&#x7CFB;&#x503C;&#x76F8;&#x7B49;&#xFF0C;key&#x503C;&#x76F8;&#x7B49;&#xFF0C;&#x5B9A;&#x4F4D;&#x5B8C;&#x6210;,&#x662F;&#x4FEE;&#x6539;&#x64CD;&#x4F5C; // e&#x6765;&#x50A8;&#x5B58;p&#x8FD9;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x4E00;&#x4F1A;&#x4FEE;&#x6539; e = p; // &#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#x8282;&#x70B9; else if (p instanceof TreeNode) // &#x662F;&#x7EA2;&#x9ED1;&#x6811;&#x8282;&#x70B9;&#xFF0C;&#x5B58;&#x5728;&#x5C31;&#x8FD4;&#x56DE;&#x90A3;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x5C31;&#x8FD4;&#x56DE;null e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); // &#x6700;&#x7EC8;&#xFF0C;&#x662F;&#x94FE;&#x8868;&#x4E86;&#xFF0C;&#x5F00;&#x59CB;&#x5BF9;&#x94FE;&#x8868;&#x904D;&#x5386;&#x67E5;&#x627E; else { for (int binCount = 0; ; ++binCount) { // &#x4E0A;&#x9762;&#x77E5;&#x9053;&#x7B2C;&#x4E00;&#x4E2A;&#x63A5;&#x70B9;&#x4E0D;&#x662F;&#x6211;&#x4EEC;&#x8981;&#x7684;&#xFF0C;&#x76F4;&#x63A5;&#x83B7;&#x53D6;&#x4E0B;&#x4E00;&#x4E2A;&#xFF0C;&#x5E76;&#x50A8;&#x5B58;&#x7ED9;e // &#x4E0B;&#x4E00;&#x4E2A;&#x662F;&#x7A7A;&#xFF0C;&#x76F4;&#x63A5;&#x4E22;&#x4E2A;Node&#x5728;&#x8FD9;&#x91CC;&#xFF0C;&#x7136;&#x540E;p.next&#x6307;&#x5411;&#x8FD9;&#x91CC; // &#x8FD9;&#x91CC;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x5730;&#x5740;&#x7ED9;&#x4E86;e if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); // &#xFF01;&#x5927;&#x4E8E;&#x6811;&#x5316;&#x9600;&#x503C;&#xFF0C;&#x5F00;&#x59CB;&#x6811;&#x5316; // &#x6CE8;&#x610F;-1&#x662F;&#x56E0;&#x4E3A;binCount&#x662F;&#x7D22;&#x5F15;&#x800C;&#x4E0D;&#x662F;&#x957F;&#x5EA6; // &#x5176;&#x5B9E;&#x6B64;&#x65F6;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x5DF2;&#x7ECF;&#x662F;7+1&#xFF08;&#x7D22;&#x5F15;&#xFF09; + 1&#xFF08;&#x65B0;&#x8FDB;&#x6765;&#x7684;Node&#xFF09; // &#x5DF2;&#x7ECF;&#x5927;&#x4E8E;&#x6811;&#x5316;&#x9600;&#x503C;8&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x4E3A;8&#x65F6;&#x662F;&#x4E0D;&#x4F1A;&#x6811;&#x5316;&#x7684; if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); //&#x52A0;&#x8FDB;&#x53BB;&#x5C31;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;&#x4E86; break; } // &#x4E0B;&#x4E2A;&#x8282;&#x70B9;&#x6709;&#x503C;&#xFF0C;&#x4E14;&#x662F;&#x6211;&#x4EEC;&#x627E;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x8DF3;&#x51FA;&#x53BB; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; //&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x4E0D;&#x662F;&#x6211;&#x4EEC;&#x627E;&#x7684;&#x8282;&#x70B9;&#x7EE7;&#x7EED;&#x7F16;&#x5386; p = e; } } // &#x4E0A;&#x9762;&#x8BF4;&#x4E86;&#xFF0C;&#x8FD9;&#x6709;&#x4FEE;&#x6539;&#x64CD;&#x4F5C;e&#x624D;&#x80FD;&#x4E0D;&#x662F;null if (e != null) { // existing mapping for key V oldValue = e.value; // &#x7ED9;e&#x65B0;&#x503C; if (!onlyIfAbsent || oldValue == null) e.value = value; // &#x8FD9;&#x4E2A;&#x662F;LinkedHashMap&#x7528;&#x7684;&#xFF0C;HashMap&#x91CC;&#x662F;&#x4E2A;&#x7A7A;&#x5B9E;&#x73B0; afterNodeAccess(e); // &#x4FEE;&#x6539;&#x5C31;&#x4F1A;&#x628A;&#x65E7;&#x503C;&#x8FD4;&#x56DE;&#x53BB; return oldValue; } } /*********&#x4FEE;&#x6539;&#x5B8C;&#x6210;&#x7684;&#x540E;&#x7EED;&#x64CD;&#x4F5C;**********/ // &#x4FEE;&#x6539;&#x6B21;&#x6570;&#x52A0;1 ++modCount; // &#x5982;&#x679C;size&#x5927;&#x4E8E;&#x9600;&#x503C;&#xFF0C;&#x4F1A;&#x6267;&#x884C;resize()&#x65B9;&#x6CD5;&#x8C03;&#x6574;&#x5927;&#x5C0F; if (++size &gt; threshold) resize(); // &#x8FD9;&#x4E2A;&#x662F;&#x7ED9;LinkedHashMap&#x7528;&#x7684;&#xFF0C;HashMap&#x91CC;&#x4E5F;&#x662F;&#x4E2A;&#x7A7A;&#x5B9E;&#x73B0; afterNodeInsertion(evict); // &#x6DFB;&#x52A0;&#x6210;&#x529F;&#x8FD4;&#x56DE;null return null;} hash&#x518D;&#x6765;&#x770B;&#x4E00;&#x4E0B;hash()&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5427;&#x3002; 12345static final int hash(Object key) { int h; // key&#x662F;null&#x5C31;&#x8FD4;&#x56DE;0&#xFF0C;key&#x4E0D;&#x662F;null&#x5C31;&#x5148;&#x53D6;hashCode&#xFF08;&#xFF09;&#x7136;&#x540E;&#x4E0E;&#x8FD9;&#x4E2A;hashCode&#xFF08;&#xFF09;&#x65E0;&#x7B26;&#x53F7;&#x53F3;&#x79FB;&#x8FDB;&#x884C;&#x4EA6;&#x6216;&#x8FD0;&#x7B97; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);} &#x53EF;&#x80FD;&#x5C0F;&#x4F19;&#x4F34;&#x6709;&#x7591;&#x60D1;&#xFF0C;&#x597D;&#x597D;&#x7684;hashCode()&#x975E;&#x5F04;&#x4E2A;&#x4EA6;&#x6216;&#x8FD0;&#x7B97;&#x5E72;&#x5565;&#xFF1F;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x627E;key&#x7684;&#x4F4D;&#x7F6E;&#x65F6;&#xFF0C;(n - 1) &amp; hash&#x662F;table&#x7684;&#x7D22;&#x5F15;&#xFF0C;n&#x7684;&#x957F;&#x5EA6;&#x4E0D;&#x591F;&#x5927;&#x65F6;&#xFF0C;&#x53EA;&#x548C;hashCode()&#x7684;&#x4F4E;16&#x4F4D;&#x6709;&#x5173;&#xFF0C;&#x8FD9;&#x6837;&#x53D1;&#x751F;&#x51B2;&#x7A81;&#x7684;&#x6982;&#x7387;&#x5C31;&#x53D8;&#x9AD8;&#x3002;&#x4E3A;&#x51CF;&#x5C11;&#x8FD9;&#x79CD;&#x5F71;&#x54CD;&#xFF0C;&#x8BBE;&#x8BA1;&#x8005;&#x6743;&#x8861;&#x4E86;speed, utility, and quality&#xFF0C;&#x5C06;&#x9AD8;16&#x4F4D;&#x4E0E;&#x4F4E;16&#x4F4D;&#x5F02;&#x6216;&#x6765;&#x51CF;&#x5C11;&#x8FD9;&#x79CD;&#x5F71;&#x54CD;&#x3002;&#x8BBE;&#x8BA1;&#x8005;&#x8003;&#x8651;&#x5230;&#x73B0;&#x5728;&#x7684;hashCode&#x5206;&#x5E03;&#x7684;&#x5DF2;&#x7ECF;&#x5F88;&#x4E0D;&#x9519;&#x4E86;&#xFF0C;&#x800C;&#x4E14;&#x5F53;&#x53D1;&#x751F;&#x8F83;&#x5927;&#x78B0;&#x649E;&#x65F6;&#x4E5F;&#x7528;&#x6811;&#x5F62;&#x5B58;&#x50A8;&#x964D;&#x4F4E;&#x4E86;&#x51B2;&#x7A81;&#x3002;&#x4EC5;&#x4EC5;&#x5F02;&#x6216;&#x4E00;&#x4E0B;&#xFF0C;&#x65E2;&#x51CF;&#x5C11;&#x4E86;&#x7CFB;&#x7EDF;&#x7684;&#x5F00;&#x9500;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x9020;&#x6210;&#x7684;&#x56E0;&#x4E3A;&#x9AD8;16&#x4F4D;&#x6CA1;&#x6709;&#x53C2;&#x4E0E;&#x4E0B;&#x6807;&#x7684;&#x8BA1;&#x7B97;(table&#x957F;&#x5EA6;&#x6BD4;&#x8F83;&#x5C0F;&#x65F6;)&#x800C;&#x5F15;&#x8D77;&#x7684;&#x78B0;&#x649E;&#x3002; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A;&#x4E0B;&#x56FE;&#x5C31;&#x662F;table.length&#x4E3A;16&#x65F6;&#x7684;&#x8BA1;&#x7B97;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4EA6;&#x6216;&#x8FD0;&#x7B97;&#x5C31;&#x53EA;&#x548C;&#x4F4E;4&#x4F4D;&#x6709;&#x5173;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4F1A;&#x52A0;&#x5927;&#x51B2;&#x7A81;&#x7684;&#x6982;&#x7387;&#x3002; resize&#x8FD9;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x7B2C;&#x4E00;&#x90E8;&#x5206;&#x662F;&#x6839;&#x636E;size&#x662F;&#x5426;&#x8D85;&#x8FC7;&#x9600;&#x503C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x6269;&#x5BB9;&#xFF0C;&#x7B2C;&#x4E8C;&#x90E8;&#x5206;&#x662F;&#x6269;&#x5BB9;&#x540E;&#x5C06;&#x539F;Node[]&#x4E2D;&#x6570;&#x636E;&#x590D;&#x5236;&#x5230;&#x6269;&#x5BB9;&#x540E;&#x7684;Node[]&#x4E2D; &#x6269;&#x5BB9;&#x90E8;&#x5206; 123456789101112131415161718192021222324252627282930313233343536373839final Node&lt;K,V&gt;[] resize() { Node&lt;K,V&gt;[] oldTab = table; // &#x539F;&#x5BB9;&#x91CF;&#xFF0C;table&#x4E3A;null&#x8FD4;&#x56DE;0&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;table&#x957F;&#x5EA6; int oldCap = (oldTab == null) ? 0 : oldTab.length; // &#x539F;&#x9600;&#x503C; int oldThr = threshold; // &#x65B0;&#x5BB9;&#x91CF;&#xFF0C;&#x65B0;&#x9600;&#x503C; int newCap, newThr = 0; // table&#x5DF2;&#x7ECF;&#x521D;&#x59CB;&#x5316; if (oldCap &gt; 0) { // &#x5BB9;&#x91CF;&#x5DF2;&#x7ECF;&#x8D85;&#x8FC7;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#xFF0C;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x53BB; if (oldCap &gt;= MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return oldTab; } // 2&#x500D;&#x6269;&#x5BB9;&#x540E;&#x5C0F;&#x4E8E;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x539F;&#x5BB9;&#x91CF;&#x5927;&#x4E8E;&#x9ED8;&#x8BA4;&#x521D;&#x59CB;&#x5316;&#x5BB9;&#x91CF;(&#x6211;&#x8FD8;&#x6CA1;&#x60F3;&#x6E05;&#x695A;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x5927;&#x4E8E;&#x9ED8;&#x8BA4;&#x521D;&#x59CB;&#x5BB9;&#x91CF;) else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) // &#x9600;&#x503C;&#x52A0;&#x500D; newThr = oldThr &lt;&lt; 1; // double threshold } // &#x539F;&#x6570;&#x7EC4;&#x5BB9;&#x91CF;&#x4E3A;0&#xFF0C;&#x672A;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5355;&#x9600;&#x503C;&#x4E0D;&#x4E3A;0 // &#x4E5F;&#x5C31;&#x662F;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x91CC;threshold = tableSizeFor(initialCapacity&#xFF09;&#x8FD9;&#x4E2A;&#x6B65;&#x9AA4; else if (oldThr &gt; 0) newCap = oldThr; // &#x5565;&#x90FD;&#x6CA1;&#x6709;&#xFF0C;&#x9ED8;&#x8BA4;&#x6784;&#x9020; else { newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); } // &#x65B0;&#x6570;&#x7EC4;&#x9600;&#x503C;&#x672A;&#x88AB;&#x8D4B;&#x503C; if (newThr == 0) { // &#x4F7F;&#x7528;&#x65B0;&#x7684;&#x5BB9;&#x91CF;*&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#x8BA1;&#x7B97;&#x9600;&#x503C; float ft = (float)newCap * loadFactor; // &#x53D6;&#x8BA1;&#x7B97;&#x540E;&#x9600;&#x503C;&#x548C;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#x91CC;&#x8F83;&#x5C0F;&#x7684;&#x90A3;&#x4E2A; newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } threshold = newThr; &#x590D;&#x5236;&#x6570;&#x636E;&#x90E8;&#x5206; &#x770B;&#x6E90;&#x7801;&#x524D;&#xFF0C;&#x5148;&#x770B;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#x56FE; &#x6B63;&#x5E38;&#x6765;&#x8BB2;&#xFF0C;&#x5411;&#x65B0;&#x6570;&#x7EC4;&#x590D;&#x5236;&#x5143;&#x7D20;&#x65F6;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x4F4D;&#x7F6E;&#xFF0C;&#x73B0;&#x5728;&#x6709;&#x4E86;&#x8FD9;&#x4E2A;&#x89C4;&#x5F8B;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x505A;&#xFF1A; x=0&#x4E0D;&#x6539;&#x53D8;&#x4F4D;&#x7F6E; x&#x2260;0&#x539F;&#x4F4D;&#x7F6E;+&#x539F;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x83B7;&#x53D6;&#x65B0;&#x4F4D;&#x7F6E; &#x5224;&#x65AD;x&#x662F;&#x5426;&#x4E3A;0&#xFF0C;e.hash &amp; oldCap&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#xFF0C;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x662F;0&#xFF0C;&#x4EE3;&#x8868;x&#x5904;&#x662F;0&#xFF0C;&#x4F4D;&#x7F6E;&#x4E0D;&#x7528;&#x6539;&#x53D8;&#xFF0C;&#x5426;&#x5219;&#x6539;&#x53D8;&#x4F4D;&#x7F6E; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x6570;&#x7EC4;Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap]; table = newTab; // &#x5F00;&#x59CB;&#x590D;&#x5236;&#x6570;&#x636E; if (oldTab != null) { // &#x5F00;&#x59CB;&#x904D;&#x5386; for (int j = 0; j &lt; oldCap; ++j) { Node&lt;K,V&gt; e; // x&#x83B7;&#x53D6;&#x6876;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9; if ((e = oldTab[j]) != null) { oldTab[j] = null; // &#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;&#x76F4;&#x63A5;&#x79FB;&#x8FC7;&#x53BB; if (e.next == null) newTab[e.hash &amp; (newCap - 1)] = e; // &#x5982;&#x679C;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#xFF0C;&#x5206;&#x88C2;&#x653E;&#x5165;&#x65B0;&#x6570;&#x7EC4; else if (e instanceof TreeNode) ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap); // &#x5982;&#x679C;&#x662F;&#x94FE;&#x8868;&#xFF0C;&#x8FDB;&#x884C;&#x4E0B;&#x65B9;&#x64CD;&#x4F5C; else { // &#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x5143;&#x7D20;&#x5728;&#x65B0;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x800C;&#x662F;&#x539F;&#x4F4D;&#x7F6E;&#x52A0;&#x539F;&#x6570;&#x7EC4;&#x957F;&#x5EA6; Node&lt;K,V&gt; loHead = null, loTail = null; Node&lt;K,V&gt; hiHead = null, hiTail = null; Node&lt;K,V&gt; next; do { // &#x628A;&#x94FE;&#x8868;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x653E;&#x5728; next&#x91CC; next = e.next; // &#x8BE5;&#x8282;&#x70B9;&#x4E0D;&#x9700;&#x8981;&#x79FB;&#x52A8; if ((e.hash &amp; oldCap) == 0) { // &#x5C3E;&#x5143;&#x7D20;&#x4E3A;&#x7A7A;&#xFF0C;&#x786E;&#x5B9A;&#x9996;&#x5143;&#x7D20; if (loTail == null) loHead = e; else // &#x5C3E;&#x5143;&#x7D20;&#x6709;&#x5C31;&#x76F4;&#x63A5;&#x4E22;&#x6700;&#x540E; loTail.next = e; // &#x786E;&#x5B9A;&#x5C3E;&#x5143;&#x7D20; loTail = e; } // &#x8BE5;&#x8282;&#x70B9;&#x9700;&#x8981;&#x79FB;&#x52A8; else { // &#x5C3E;&#x5143;&#x7D20;&#x4E3A;&#x7A7A;&#xFF0C;&#x786E;&#x5B9A;&#x9996;&#x5143;&#x7D20; if (hiTail == null) hiHead = e; else // &#x5C3E;&#x5143;&#x7D20;&#x6709;&#x5C31;&#x76F4;&#x63A5;&#x4E22;&#x6700;&#x540E; hiTail.next = e; // &#x786E;&#x5B9A;&#x5C3E;&#x5143;&#x7D20; hiTail = e; } } while ((e = next) != null);// &#x76F4;&#x5230;&#x904D;&#x5386;&#x5B8C;&#x94FE;&#x8868;&#x8DF3;&#x51FA; // &#x628A;&#x4E24;&#x4E2A;&#x9996;&#x5143;&#x7D20;&#x653E;&#x5728;&#x4E24;&#x4E2A;&#x6876;&#x91CC;&#x5C31;&#x53EF;&#x4EE5;&#x4E86; if (loTail != null) { loTail.next = null; newTab[j] = loHead; } if (hiTail != null) { hiTail.next = null; newTab[j + oldCap] = hiHead; } } } } } // &#x8FD4;&#x56DE;&#x65B0;&#x7684;&#x6570;&#x7EC4; return newTab; } &#x590D;&#x5236;&#x8FC7;&#x7A0B;&#xFF0C;a&#x8FC7;&#x53BB;&#xFF0C;&#x5047;&#x8BBE;&#x8BA1;&#x7B97;&#x540E;&#x4F4D;&#x7F6E;&#x4E0D;&#x8FB9;&#xFF0C;&#x8FDB;&#x5230;i,&#x6B64;&#x65F6;i&#x4E3A;null&#xFF0C;a&#x8FDB;&#x53BB;&#x540E;&#x5373;&#x662F;head&#xFF0C;&#x53C8;&#x662F;tail &#x7136;&#x540E;&#x5FAA;&#x73AF;&#xFF0C;&#x5230;b&#xFF0C;&#x5047;&#x8BBE;&#x8BA1;&#x7B97;&#x540E;&#x8FD8;&#x662F;i&#xFF0C;i&#x4E2D;&#x5DF2;&#x7ECF;&#x6709;a&#xFF0C;&#x6240;&#x4EE5;b&#x76F4;&#x63A5;&#x4E22;&#x5230;a&#x540E;&#x9762;&#xFF0C;a&#x4EFB;&#x662F;head,&#x5355;tail&#x5DF2;&#x7ECF;&#x53D8;&#x6210;&#x4E86;b &#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#xFF0C;a,b,c,d&#x90FD;&#x4F1A;&#x653E;&#x5728;i,j&#x4E2D; &#x5176;&#x5B9E;&#x662F;&#x5148;&#x62FC;&#x5B8C;&#x94FE;&#x8868;&#x624D;&#x88C5;&#x8FDB;&#x6876;&#x91CC;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x662F;&#x65B9;&#x4FBF;&#x63CF;&#x8FF0;&#xFF0C;&#x8BF4;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x8FC7;&#x53BB; &#x81F3;&#x6B64;&#xFF0C;put&#x65B9;&#x6CD5;&#x5DF2;&#x7ECF;&#x8BF4;&#x5B8C;&#x4E86;&#xFF0C;&#x91CD;&#x70B9;&#x662F;putVal,hash&#x548C;resize&#x4E09;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x7406;&#x89E3;&#x53EF;&#x4EE5;&#x770B;&#x672C;&#x6587;&#x7ED3;&#x5C3E;&#x7684;&#x53C2;&#x8003;&#x6587;&#x732E;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x4EBA;&#x601D;&#x7EF4;&#x65B9;&#x5F0F;&#xFF0C;&#x8868;&#x8FBE;&#x65B9;&#x5F0F;&#x90FD;&#x4E0D;&#x540C;&#xFF0C;&#x8BF4;&#x4E0D;&#x5B9A;&#x6362;&#x4E00;&#x79CD;&#x8868;&#x8FF0;&#x65B9;&#x5F0F;&#x5C31;&#x80FD;&#x7406;&#x89E3;&#x4E86;&#x3002; removeremove&#x5C31;&#x662F;&#x5148;&#x627E;&#x5230;&#x8282;&#x70B9;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x79FB;&#x9664;,&#x6838;&#x5FC3;&#x65B9;&#x6CD5;&#x662F;removeNode() 12345public V remove(Object key) { Node&lt;K,V&gt; e; // &#x8C03;&#x7528;removeNode&#xFF0C;&#x5982;&#x679C;&#x79FB;&#x9664;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x539F;&#x503C;&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;null return (e = removeNode(hash(key), key, null, false, true)) == null ? null : e.value;} removeNode12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/** * value remove&#x65B9;&#x6CD5;&#x91CD;&#x8F7D;&#x65F6;&#x4F7F;&#x7528;&#xFF0C;&#x53EA;&#x6709;&#x540C;&#x65F6;&#x5339;&#x914D;key-value&#x65F6;&#x79FB;&#x9664;&#x8BE5;&#x8282;&#x70B9; * matchValue,&#x4E3A;true&#x65F6;&#x624D;&#x4F1A;&#x540C;&#x65F6;&#x5339;&#x914D;key-value&#x8FDB;&#x884C;&#x5220;&#x9664; * movable &#x5220;&#x9664;&#x8282;&#x70B9;&#x540E;&#x662F;&#x5426;&#x6539;&#x53D8;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x822C;&#x90FD;&#x4E3A;true&#x53EA;&#x6709;&#x5728;iterator&#x7684;&#x65F6;&#x5019;&#x624D;&#x4E3A;false */final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) { /*******&#x67E5;&#x627E;&#x8282;&#x70B9;&#x7684;&#x90E8;&#x5206;*******/ Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index; // 1.&#x539F;&#x6570;&#x7EC4;&#x4E0D;&#x4E3A;null 2. &#x539F;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x5927;&#x4E8E;0 3.key&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#x4E0D;&#x4E3A;&#x7A7A; if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (p = tab[index = (n - 1) &amp; hash]) != null) { // &#x58F0;&#x660E;&#x4E24;&#x4E2A;&#x8282;&#x70B9;node&#xFF0C;e Node&lt;K,V&gt; node = null, e; K k; V v; // &#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x5C31;&#x6211;&#x4EEC;&#x8981;&#x627E;&#x7684;&#x8282;&#x70B9; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) // &#x5148;&#x7ED9;node&#xFF0C;&#x5728;&#x4E0B;&#x9762;&#x5220;&#x6389; node = p; else if ((e = p.next) != null) { // &#x5982;&#x679C;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#xFF0C;&#x83B7;&#x53D6;&#x8BE5;&#x63A5;&#x70B9;&#x5E76;&#x7ED9;node if (p instanceof TreeNode) node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key); // &#x5982;&#x679C;&#x662F;&#x94FE;&#x8868;&#xFF0C;&#x5FAA;&#x73AF;&#x904D;&#x5386; else { do { // &#x5982;&#x679C;&#x662F;&#x8981;&#x627E;&#x7684;&#x8282;&#x70B9;&#x5C31;&#x628A;&#x8FD9;&#x4E2A;&#x8282;&#x70B9;&#x7ED9;node if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) { node = e; break; } // &#x4E0D;&#x662F;&#x628A;&#x8282;&#x70B9;&#x7ED9;p&#x8BB0;&#x5F55;&#xFF0C;&#x7EE7;&#x7EED;&#x68C0;&#x67E5;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9; p = e; } while ((e = e.next) != null); } } /**********&#x5220;&#x9664;&#x8282;&#x70B9;&#x7684;&#x90E8;&#x5206;*********/ if (node != null &amp;&amp; (!matchValue || (v = node.value) == value || (value != null &amp;&amp; value.equals(v)))) { // &#x5982;&#x679C;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#x8282;&#x70B9;&#xFF0C;&#x4F7F;&#x7528;removeTreeNode&#x79FB;&#x9664; if (node instanceof TreeNode) ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable); else if (node == p) // &#x8FD9;&#x91CC;&#x6267;&#x884C;&#x7684;&#x5C31;&#x662F;&#x4E0A;&#x9762;&#x7684;&#x7B2C;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x6876;&#x91CC;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x5C31;&#x662F;&#x8981;&#x79FB;&#x9664;&#x7684; tab[index] = node.next; else // &#x76F4;&#x63A5;&#x5C06;&#x79FB;&#x9664;&#x7684;&#x4E0A;&#x4E2A;&#x8282;&#x70B9;&#x6307;&#x5411;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9; p.next = node.next; // &#x4FEE;&#x6539;&#x6B21;&#x6570;&#x518D;&#x52A0;1 ++modCount; // &#x957F;&#x5EA6; -1 --size; // &#x7ED9;LinkedList&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x91CC;&#x6CA1;&#x5565;&#x7528; afterNodeRemoval(node); // &#x5220;&#x9664;&#x7684;&#x503C;&#x8FD4;&#x56DE;&#x53BB; return node; } } // &#x6839;&#x672C;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x952E; return null;} &#x5927;&#x81F4;&#x8FC7;&#x7A0B;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x6837;&#x5B50;&#x7684;~~&#xFF0C;&#x52C9;&#x5F3A;&#x770B;&#x5427;&#x6CA1;&#x753B;&#x56FE;&#x5929;&#x8D4B;&#xFF01; &#x6E90;&#x7801;&#x5206;&#x6790;&#x5230;&#x8FD9;&#x91CC;&#x5C31;&#x7ED3;&#x675F;&#xFF0C;&#x770B;&#x4E86;&#x8FD9;&#x51E0;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x53EA;&#x8981;&#x4E0D;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x770B;&#x8D77;&#x6765;&#x5C31;&#x5F88;&#x6CA1;&#x90A3;&#x4E48;&#x56F0;&#x96BE;&#x4E86;&#x3002; &#x56DB;&#x3001;&#x65E5;&#x5E38;&#x4F7F;&#x7528;&#x6CE8;&#x610F;&#x4E8B;&#x9879; &#x5728;&#x53EF;&#x4EE5;&#x660E;&#x786E;HashMap&#x957F;&#x5EA6;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x597D;&#x7ED9;HashMap&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x5BB9;&#x91CF; &#x770B;&#x5B8C;&#x4E0A;&#x9762;&#x539F;&#x7801;&#x540E;&#xFF0C;&#x4F1A;&#x53D1;&#x73B0;HashMap&#x4F7F;&#x7528;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F1A;&#x51FA;&#x73B0;resize()&#x64CD;&#x4F5C;&#xFF0C;&#x4F1A;&#x6D89;&#x53CA;&#x5230;&#x54C8;&#x5E0C;&#x8868;&#x7684;&#x91CD;&#x5EFA;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x6D88;&#x8017;&#x8D44;&#x6E90;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x660E;&#x786E;&#x957F;&#x5EA6;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x80FD;&#x7ED9;&#x5B9A;&#x5408;&#x9002;&#x7684;&#x5BB9;&#x91CF;&#x5C31;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x751A;&#x81F3;&#x907F;&#x514D;&#x6269;&#x5BB9;&#x64CD;&#x4F5C;&#x3002; &#x963F;&#x91CC;&#x5DF4;&#x5DF4;&#x5F00;&#x53D1;&#x624B;&#x518C;&#x7ED9;&#x51FA;&#x5982;&#x4E0B;&#x516C;&#x5F0F;&#xFF1A; initialCapacity = (&#x9700;&#x8981;&#x5B58;&#x50A8;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570; / &#x8D1F;&#x8F7D;&#x56E0;&#x5B50;) + 1&#x3002; &#x6CE8;&#x610F;&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#xFF08;&#x5373;loader factor&#xFF09;&#x9ED8;&#x8BA4;&#x4E3A;0.75&#xFF0C; &#x5982;&#x679C;&#x6682;&#x65F6;&#x65E0;&#x6CD5;&#x786E;&#x5B9A;&#x521D;&#x59CB;&#x503C;&#x5927;&#x5C0F;&#xFF0C;&#x8BF7;&#x8BBE;&#x7F6E;&#x4E3A;16&#xFF08;&#x5373;&#x9ED8;&#x8BA4;&#x503C;&#xFF09; &#x5728;guava&#x4E2D;&#x5176;&#x5B9E;&#x4E5F;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#xFF0C;&#x5E76;&#x4E14;guava&#x63D0;&#x4F9B;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x521B;&#x5EFA;HashMap&#xFF1A; Map&lt;String, String&gt; map = Maps.newHashMapWithExpectedSize(10) &#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#x662F;&#x6765;&#x81EA;putAll()&#x65B9;&#x6CD5;&#xFF0C;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x53EF;&#x4EE5;&#x53BB;&#x770B;&#x4E00;&#x4E0B;&#x3002; &#x91CD;&#x5199;equals&#x65B9;&#x6CD5;&#x662F;&#x4E00;&#x5B9A;&#x8981;&#x91CD;&#x5199;hashCode&#x65B9;&#x6CD5; &#x8001;&#x751F;&#x957F;&#x8C08;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x9488;&#x5BF9;key&#x662F;&#x5BF9;&#x8C61;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 12345678910111213141516171819202122232425262728class Person{ int idCard; String name; public Person(int idCard, String name) { this.idCard = idCard; this.name = name; } @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()){ return false; } Person person = (Person) o; //&#x4E24;&#x4E2A;&#x5BF9;&#x8C61;&#x662F;&#x5426;&#x7B49;&#x503C;&#xFF0C;&#x901A;&#x8FC7;idCard&#x6765;&#x786E;&#x5B9A; return this.idCard == person.idCard; } @Test public void test(){ Map map = new HashMap(); Person p1 = new Person(1234,&quot;&#x5C0F;&#x767D;&quot;); map.put(p1,&quot;&#x54C8;&#x54C8;&#x54C8;&#x54C8;&quot;); Person p2 = new Person(1234,&quot;&#x5C0F;&#x767D;&quot;); map.get(p2); } &#x5F53;&#x7528;person&#x6765;&#x505A;key&#x65F6;&#xFF0C;&#x663E;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x5728;hashcode&#x4E0D;&#x91CD;&#x5199;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4F7F;&#x7528;p2&#x662F;&#x65E0;&#x6CD5;&#x83B7;&#x5F97;&#x9700;&#x8981;&#x7684;&#x5185;&#x5BB9;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x4E24;&#x4E2A;&#x5BF9;&#x8C61;&#x7528;&#x6765;&#x627E;&#x6876;&#x7684;hashcode&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x65E0;&#x6CD5;&#x627E;&#x5230;&#x60F3;&#x540C;&#x7684;&#x6876;&#x554A;&#xFF01;&#x6876;&#x90FD;&#x627E;&#x4E0D;&#x5230;&#x53BB;&#x54EA;&#x91CC;&#x627E;&#x503C;&#x54C8;&#x54C8;&#xFF01; &#x4E94;&#x3001;&#x603B;&#x7ED3; &#x672C;&#x6587;&#x8BB0;&#x5F55;&#x4E86;&#x6211;&#x5B66;&#x4E60;HashMap&#x7684;&#x5168;&#x8FC7;&#x7A0B;&#xFF0C;&#x5305;&#x62EC;&#x9884;&#x5907;&#x77E5;&#x8BC6;&#x3001;&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x3001;&#x6E90;&#x7801;&#x5206;&#x6790;&#x3001;&#x6CE8;&#x610F;&#x4E8B;&#x9879;&#x7B49;&#x51E0;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x5BF9;&#x6211;&#x8FD9;&#x4E2A;&#x6CA1;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x57FA;&#x7840;&#x7684;&#x4EBA;&#x6765;&#x8BF4;&#x6536;&#x83B7;&#x771F;&#x7684;&#x5F88;&#x5927;&#xFF0C;&#x5E0C;&#x671B;&#x5BF9;&#x5404;&#x4F4D;&#x8BFB;&#x8005;&#x4E5F;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x5E2E;&#x52A9;&#xFF01;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x6307;&#x6B63;&#xFF01; &#x672C;&#x6587;&#x9996;&#x53D1;&#x4E8E;cdream&#x4E2A;&#x4EBA;&#x535A;&#x5BA2; &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#xFF01; &#x672C;&#x6587;&#x53C2;&#x8003;&#xFF1A; HashMap&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x53CA;&#x6E90;&#x7801;&#x5206;&#x6790; &#x63ED;&#x79D8; HashMap &#x5B9E;&#x73B0;&#x539F;&#x7406;&#xFF08;Java 8&#xFF09; HashMap&#x6E90;&#x7801;&#x6CE8;&#x89E3; &#x4E4B; &#x9759;&#x6001;&#x5DE5;&#x5177;&#x65B9;&#x6CD5;hash()&#x3001;tableSizeFor()(&#x56DB;) Think in Java &#x7B2C;&#x56DB;&#x7248; &#x7B2C;8&#x7AE0; &#x96C6;&#x5408;&#x90E8;&#x5206; Java 1.8&#x4E2D;HashMap&#x7684;resize()&#x65B9;&#x6CD5;&#x6269;&#x5BB9;&#x90E8;&#x5206;&#x7684;&#x7406;&#x89E3; &#x5173;&#x4E8E;HashMap&#x5BB9;&#x91CF;&#x7684;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x8FD8;&#x6709;&#x8FD9;&#x4E48;&#x591A;&#x5B66;&#x95EE; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java基础_集合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java集合——概述]]></title>
    <url>%2F2018%2F11%2F17%2Fcollection%2F</url>
    <content type="text"><![CDATA[&#x6458;&#x8981;&#x200B; &#x672C;&#x6587;&#x4E3B;&#x8981;&#x4ECB;&#x7ECD;&#x96C6;&#x5408;&#x7684;&#x6574;&#x4F53;&#x6982;&#x5FF5;&#xFF0C;&#x5E76;&#x4F5C;&#x4E3A;&#x63A5;&#x4E0B;&#x6765;Java&#x96C6;&#x5408;&#x5B9E;&#x73B0;&#x7C7B;&#x8BB2;&#x89E3;&#x7684;&#x7D22;&#x5F15;&#x3002; &#x56FE;&#x793A;&#x200B; &#x8FD9;&#x662F;&#x5728;&#x7F51;&#x4E0A;&#x770B;&#x5230;&#x4E86;&#x8FD9;&#x6837;&#x4E00;&#x5F20;&#x56FE;&#xFF0C;&#x611F;&#x89C9;&#x5F88;&#x6E05;&#x6670;&#xFF0C;&#x5185;&#x5BB9;&#x4E5F;&#x5F88;&#x5168;&#x9762;&#xFF0C;&#x6211;&#x51B3;&#x5B9A;&#x6309;&#x8FD9;&#x5F20;&#x56FE;&#xFF0C;&#x628A;&#x81EA;&#x5DF1;&#x719F;&#x6089;&#x7684;&#x96C6;&#x5408;&#x90FD;&#x4ED4;&#x7EC6;&#x7814;&#x7A76;&#x4E00;&#x4E0B;&#x3002; &#x67E5;&#x770B;&#x5927;&#x56FE; &#x5404;&#x4F4D;&#x7F6E;&#x63CF;&#x8FF0; &#x4F4D;&#x7F6E; &#x63CF;&#x8FF0; &#x5DE6;&#x4E0A;&#x7070;&#x8272;&#x90E8;&#x5206; &#x5DF2;&#x7ECF;&#x8FC7;&#x671F;&#xFF0C;&#x4EE5;&#x540E;&#x7684;&#x5F00;&#x53D1;&#x4E2D;&#x4E0D;&#x8981;&#x4F7F;&#x7528;&#x3002; &#x53F3;&#x4E0A;&#x6D45;&#x7C89;&#x8272;&#x90E8;&#x5206; &#x63A5;&#x53E3;&#x5173;&#x7CFB;&#x56FE; &#x4E2D;&#x95F4;&#x7EFF;&#x8272;&#x90E8;&#x5206; java.util&#x5305;&#x91CC;&#x96C6;&#x5408;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x7C7B; &#x53F3;&#x4E0B;&#x7070;&#x8272;&#x90E8;&#x5206; java.util.concurrent&#x5305;&#x91CC;&#x9762;&#x7684;&#x7C7B;&#xFF0C;&#x7528;&#x6765;&#x5904;&#x7406;java&#x5E76;&#x53D1;&#x95EE;&#x9898; &#x96C6;&#x5408;&#x5206;&#x7C7B; &#x5206;&#x7C7B; &#x63CF;&#x8FF0; Map &#x53CC;&#x94FE;&#x96C6;&#x5408;&#xFF0C;&#x5141;&#x8BB8;&#x901A;&#x8FC7;&#x952E;&#x6765;&#x627E;&#x5230;&#x503C; List &#x6309;&#x7167;&#x63D2;&#x5165;&#x987A;&#x5E8F;&#x4FDD;&#x5B58;&#x5143;&#x7D20; Set &#x4E0D;&#x5141;&#x8BB8;&#x6709;&#x91CD;&#x590D;&#x5143;&#x7D20; Queue &#x4ECE;&#x4E00;&#x7AEF;&#x63D2;&#x5165;&#x5143;&#x7D20;&#xFF0C;&#x4ECE;&#x53E6;&#x4E00;&#x7AEF;&#x83B7;&#x53D6; &#x5B9E;&#x73B0;&#x7C7B; &#x63A5;&#x53E3; &#x5B9E;&#x73B0;&#x7C7B; List ArrayList&#x3001;LinkedList Set HashSet&#x3001;LinkedHashSet&#x3001;TreeSet Queue PriorityQueue&#x3001;LinkedList Map HashMap&#x3001;LinkedHashMap&#x3001;TreeMap&#x3001;WeakHashMap&#x3001;IdentityHashMap &#x5E95;&#x5C42;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x5E95;&#x5C42;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x5B9E;&#x73B0;&#x7C7B; &#x6570;&#x7EC4; EnumMap&#x3001;ArrayList&#x3001;ArrayQueue &#x94FE;&#x8868; LinkedHashSet&#x3001;LinkedList&#x3001;LinkedHashMap &#x7EA2;&#x9ED1;&#x6811; TreeMap&#x3001;TreeSet &#x4E8C;&#x53C9;&#x5806; PriorityQueue &#x54C8;&#x5E0C;&#x8868; HashMap&#x3001;HashSet&#x3001;LinkedHashMap&#x3001;LinkedHashSet&#x3001;WeakHashMap&#x3001;IdentityHashMap &#x6B63;&#x6587;&#x4E00;&#x3001;&#x96C6;&#x5408;&#x7684;&#x7531;&#x6765;&#x200B; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x53EA;&#x5305;&#x542B;&#x56FA;&#x5B9A;&#x6570;&#x91CF;&#x4E14;&#x751F;&#x547D;&#x5468;&#x671F;&#x90FD;&#x662F;&#x5DF2;&#x77E5;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x7A0B;&#x5E8F; &#x200B; &#x4E3A;&#x4E86;&#x6EE1;&#x8DB3;&#x5E38;&#x89C4;&#x7684;&#x7F16;&#x7A0B;&#x9700;&#x8981;&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x6C42;&#x80FD;&#x5728;&#x4EFB;&#x4F55;&#x65F6;&#x5019;&#xFF0C;&#x4EFB;&#x4F55;&#x5730;&#x70B9;&#x521B;&#x5EFA;&#x4EFB;&#x610F;&#x6570;&#x91CF;&#xFF0C;&#x751A;&#x81F3;&#x662F;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x7531;&#x4E8E;&#x6570;&#x7EC4;&#x53EA;&#x80FD;&#x88C5;&#x7EDF;&#x4E00;&#x7C7B;&#x578B;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x4E14;&#x957F;&#x5EA6;&#x56FA;&#x5B9A;&#xFF0C;&#x4E8E;&#x662F;&#x4EA7;&#x751F;&#x4E86;&#x96C6;&#x5408;&#x3002; &#x4E8C;&#x3001;&#x96C6;&#x5408;&#x7279;&#x70B9; &#x96C6;&#x5408;&#x53EA;&#x80FD;&#x5B58;&#x653E;&#x5BF9;&#x8C61;&#x3002;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x4F1A;&#x81EA;&#x52A8;&#x88C5;&#x7BB1;&#x4E3A;&#x5305;&#x88C5;&#x7C7B;&#x3002; &#x96C6;&#x5408;&#x5B58;&#x653E;&#x7684;&#x662F;&#x5BF9;&#x8C61;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x5BF9;&#x8C61;&#x672C;&#x8EAB;&#x8FD8;&#x662F;&#x653E;&#x5728;&#x5806;&#x5185;&#x5B58;&#x4E2D;&#x3002; &#x96C6;&#x5408;&#x53EF;&#x4EE5;&#x5B58;&#x653E;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#xFF0C;&#x4E0D;&#x9650;&#x6570;&#x91CF;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002; &#x4E09;&#x3001;&#x8FED;&#x4EE3;&#x5668;&#x200B; &#x4F7F;&#x7528;&#x96C6;&#x5408;&#x5FC5;&#x987B;&#x5BF9;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x7C7B;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x8003;&#x8651;&#x5982;&#x4E0B;&#x72B6;&#x51B5;&#xFF1A;&#x5982;&#x679C;&#x539F;&#x672C;&#x662F;&#x5BF9;List&#x8FDB;&#x884C;&#x7F16;&#x7A0B;&#xFF0C;&#x73B0;&#x5728;&#x8981;&#x628A;&#x76F8;&#x540C;&#x7684;&#x4EE3;&#x7801;&#x7528;&#x5728;Set&#x4E0A;&#xFF0C;&#x5982;&#x679C;&#x80FD;&#x4E0D;&#x5173;&#x5FC3;&#x5BB9;&#x5668;&#x7C7B;&#x578B;&#x53EA;&#x5173;&#x5FC3;&#x5BF9;&#x96C6;&#x5408;&#x5F97;&#x64CD;&#x4F5C;&#x8BE5;&#x600E;&#x4E48;&#x529E;&#xFF1F;&#x4E8E;&#x662F;&#xFF0C;&#x8FED;&#x4EE3;&#x5668;&#x56E0;&#x6B64;&#x4EA7;&#x751F;&#x3002; &#x200B; &#x8FED;&#x4EE3;&#x5668;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x5B83;&#x7684;&#x5DE5;&#x4F5C;&#x5C31;&#x662F;&#x904D;&#x5386;&#x5E76;&#x9009;&#x62E9;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x800C;&#x4E14;&#x5BA2;&#x6237;&#x7AEF;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x6CE8;&#x5E8F;&#x5217;&#x7684;&#x5E95;&#x5C42;&#x7ED3;&#x6784;&#xFF0C;Java&#x4E2D;Iterator&#x53EA;&#x80FD;&#x5355;&#x5411;&#x79FB;&#x52A8;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x5B50;&#x63A5;&#x53E3;ListIterator&#x53EF;&#x4EE5;&#x53CC;&#x5411;&#x79FB;&#x52A8;&#x3002; &#x200B; Iterator&#x4E2D;&#x6709;hashNext(),next(),remove()&#x51E0;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;ListIterator&#x5728;&#x5B83;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x53C8;&#x6DFB;&#x52A0;&#x4E86;&#x4E09;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x5206;&#x522B;&#x662F; add(),previous(),hasPrevious()&#x3002; &#x200B; Collection&#x9876;&#x5C42;&#x7ED3;&#x6784;&#x63A5;&#x53E3;&#x662F;Iterable,&#x800C;Map&#x7684;&#x9876;&#x5C42;&#x63A5;&#x53E3;&#x662F;Map&#xFF0C;Collection&#x4E0B;&#x7684;&#x96C6;&#x5408;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x8FED;&#x4EE3;&#x5668;&#x904D;&#x5386;&#xFF0C;Map&#x53EF;&#x4EE5;&#x4F7F;&#x7528;Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()&#x65B9;&#x6CD5;&#x8F6C;&#x6362;&#x4E3A;Set&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#x904D;&#x5386;&#x3002; &#x200B; Iterable&#x4E2D;&#x5305;&#x542B;Iterator&lt;T&gt; iterator()&#x65B9;&#x6CD5;&#xFF0C;Collection&#x4E0B;&#x96C6;&#x5408;&#x4F7F;&#x7528;&#x8BE5;&#x65B9;&#x6CD5;&#x540E;&#x4F1A;&#x8FD4;&#x56DE;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x53EF;&#x5BF9;&#x8FED;&#x4EE3;&#x5668;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#x904D;&#x5386;&#x3002; &#x200B; &#x901A;&#x5E38;&#x6765;&#x8BB2;&#x6709;&#x5E8F;&#x7684;&#x96C6;&#x5408;&#x4E2D;&#x6709;Iterator&lt;T&gt; iterator()&#x548C;ListIterator&lt;E&gt; listIterator()&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x53CC;&#x5411;&#x904D;&#x5386;&#xFF0C;&#x65E0;&#x5E8F;&#x7684;&#x96C6;&#x5408;&#x4E2D;&#x6709;Iterator&lt;T&gt; iterator()&#xFF0C;&#x53EA;&#x80FD;&#x5411;&#x540E;&#x904D;&#x5386;&#x3002; &#x56DB;&#x3001;&#x5B9E;&#x73B0;&#x81EA;&#x5DF1;&#x7684;&#x96C6;&#x5408;&#x200B; &#x5982;&#x679C;&#x60F3;&#x5B9E;&#x73B0;&#x81EA;&#x5DF1;&#x7684;&#x96C6;&#x5408;&#x53EF;&#x4EE5;JDK&#x63D0;&#x4F9B;&#x7684;&#x62BD;&#x8C61;&#x7C7B;&#xFF0C;&#x5982;AbstractList,AbstractMap&#xFF0C;&#x901A;&#x5E38;&#x8FD9;&#x4E9B;&#x62BD;&#x8C61;&#x7C7B;&#x5DF2;&#x7ECF;&#x4E3A;&#x6211;&#x4EEC;&#x63D0;&#x4F9B;&#x4E86;&#x73B0;&#x6210;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x9700;&#x8981;&#x5BF9;&#x7279;&#x5B9A;&#x7684;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#x91CD;&#x5199;&#xFF0C;&#x76F4;&#x63A5;&#x5B9E;&#x73B0;List&#x3001;Map&#x8FD9;&#x6837;&#x7684;&#x63A5;&#x53E3;&#x662F;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x6240;&#x6709;&#x65B9;&#x6CD5;&#x5DE5;&#x4F5C;&#x91CF;&#x8FC7;&#x5927;&#x3002; &#x200B; &#x4E0D;&#x8FC7;&#x901A;&#x5E38;&#x6765;&#x8BB2;&#xFF0C;java&#x5DF2;&#x7ECF;&#x63D0;&#x4F9B;&#x63D0;&#x4F9B;&#x4E86;&#x4E30;&#x5BCC;&#x7684;&#x96C6;&#x5408;&#x5B9E;&#x73B0;&#xFF0C;&#x5F88;&#x5C11;&#x4F1A;&#x9700;&#x8981;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x53BB;&#x5B9E;&#x73B0;&#x96C6;&#x5408;&#x3002; &#x672C;&#x6587;&#x53C2;&#x8003;&#xFF1A; Think in Java &#x7B2C;&#x56DB;&#x7248; &#x7B2C;8&#x7AE0; &#x96C6;&#x5408;&#x90E8;&#x5206; Java &#x96C6;&#x5408;&#x8BE6;&#x89E3; &#x4E00;&#x5F20;&#x56FE;&#x8BA9;&#x4F60;&#x770B;&#x6E05;Java&#x96C6;&#x5408;&#x7C7B;&#xFF08;Java&#x96C6;&#x5408;&#x7C7B;&#x7684;&#x603B;&#x7ED3;&#xFF09; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java基础_集合</tag>
      </tags>
  </entry>
</search>
